import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "children", "type", "activeKey", "onTabClick"];
import React, { useEffect, useState, useRef } from 'react';
import Pane from './Pane';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from './Pane';
Tabs.Pane = Pane;
export default function Tabs(props) {
  var {
    prefixCls = 'w-tabs',
    className,
    children,
    type = 'default',
    onTabClick
  } = props,
      elementProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [activeKey, setActiveKey] = useState(props.activeKey);
  var [slideStyle, setSlideStyle] = useState({
    width: 0,
    left: 0
  });
  var activeItem = useRef();
  var cls = [prefixCls, className, type ? prefixCls + "-" + type : null].filter(Boolean).join(' ').trim();
  useEffect(() => setActiveKey(props.activeKey), [props.activeKey]);
  useEffect(() => calcSlideStyle(), [activeKey]);

  function calcSlideStyle() {
    if (activeItem.current && type === 'line') {
      setSlideStyle({
        width: activeItem.current.clientWidth,
        left: activeItem.current.offsetLeft
      });
    }
  }

  return /*#__PURE__*/_jsxs("div", _extends({
    className: cls
  }, elementProps, {
    children: [/*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-bar",
      children: [/*#__PURE__*/_jsx("div", {
        className: prefixCls + "-nav",
        children: React.Children.map(children, (item, key) => {
          if (!item) {
            return null;
          }

          var divProps = {
            className: [prefixCls + "-item", item.key === activeKey ? 'active' : null, item.props.disabled ? 'disabled' : null].filter(Boolean).join(' ').trim(),
            children: item.props.label
          };

          if (!item.props.disabled) {
            divProps.onClick = e => {
              setActiveKey(item.key);
              onTabClick && onTabClick(item.key, item, e);
              calcSlideStyle();
            };
          }

          return /*#__PURE__*/_jsx("div", _extends({
            ref: node => {
              if (node && item.key === activeKey) {
                activeItem.current = node;
              }
            }
          }, divProps), key);
        })
      }), /*#__PURE__*/_jsx("div", {
        style: slideStyle,
        className: prefixCls + "-slide"
      })]
    }), React.Children.map(children, item => {
      if (!item || activeKey !== item.key) {
        return null;
      }

      return /*#__PURE__*/React.cloneElement(item, Object.assign({}, item.props, {}));
    })]
  }));
}
//# sourceMappingURL=index.js.map