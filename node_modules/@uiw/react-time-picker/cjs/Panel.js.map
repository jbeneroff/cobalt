{
  "version": 3,
  "sources": [
    "../src/Panel.tsx"
  ],
  "names": [
    "TimePickerPanel",
    "props",
    "prefixCls",
    "className",
    "count",
    "date",
    "type",
    "disabledHours",
    "disabledMinutes",
    "disabledSeconds",
    "hideDisabled",
    "onSelected",
    "other",
    "disableds",
    "getMaybeNumber",
    "Date",
    "handleClick",
    "num",
    "e",
    "currentDate",
    "current",
    "getDisabledItem",
    "disabled",
    "getItemInstance",
    "tag",
    "parentNode",
    "dataset",
    "offsetTop",
    "Number",
    "clientHeight",
    "scrollTop",
    "data",
    "Array",
    "map",
    "_",
    "idx",
    "push",
    "filter",
    "item",
    "liProps",
    "onClick",
    "currentCount",
    "undefined",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useMemo, useRef } from 'react';\nimport { IProps, HTMLDivProps, HTMLLiProps } from '@uiw/utils';\nimport './style/time-picker.less';\n\nexport interface TimePickerPanelProps extends IProps, HTMLDivProps {\n  onSelected?: (\n    type: TimePickerPanelProps['type'],\n    num: number,\n    disableds: number[],\n    date: TimePickerPanelProps['date'],\n  ) => void;\n  count?: number;\n  hideDisabled?: boolean;\n  disabledHours?: (\n    num: number,\n    type: TimePickerPanelProps['type'],\n    date: TimePickerPanelProps['date'],\n  ) => boolean | undefined;\n  disabledMinutes?: (\n    num: number,\n    type: TimePickerPanelProps['type'],\n    date: TimePickerPanelProps['date'],\n  ) => boolean | undefined;\n  disabledSeconds?: (\n    num: number,\n    type: TimePickerPanelProps['type'],\n    date: TimePickerPanelProps['date'],\n  ) => boolean | undefined;\n  type?: 'Hours' | 'Minutes' | 'Seconds';\n  date?: Date;\n}\n\nexport default function TimePickerPanel(props: TimePickerPanelProps) {\n  const {\n    prefixCls = 'w-timepicker',\n    className,\n    count = 24,\n    date,\n    type = 'Hours',\n    disabledHours,\n    disabledMinutes,\n    disabledSeconds,\n    hideDisabled,\n    onSelected,\n    ...other\n  } = props;\n  const disableds = useRef<number[]>([]);\n  function getMaybeNumber() {\n    if (date && type) {\n      return new Date(date)[\n        `get${type}` as 'getHours' | 'getMinutes' | 'getSeconds'\n      ]();\n    }\n    return 0;\n  }\n  function handleClick(num: number, e: React.MouseEvent<HTMLLIElement>) {\n    if (!date) return;\n    const currentDate = new Date(date);\n    currentDate[`set${type}` as 'setHours' | 'setMinutes' | 'setSeconds'](num);\n    onSelected && onSelected(type, num, disableds.current, currentDate);\n  }\n  function getDisabledItem(num: number) {\n    const disabled =\n      props[\n        `disabled${type}` as\n          | 'disabledHours'\n          | 'disabledMinutes'\n          | 'disabledSeconds'\n      ];\n    if (disabled) {\n      return disabled(num, type, new Date(date!));\n    }\n    return false;\n  }\n  function getItemInstance(tag: HTMLLIElement) {\n    if (tag && tag.parentNode && tag.dataset['index']) {\n      const offsetTop = Number(tag.dataset['index']) * tag.clientHeight;\n      if (tag.parentNode.parentNode) {\n        (tag.parentNode.parentNode as HTMLDivElement).scrollTop = offsetTop;\n      }\n    }\n  }\n  const data = useMemo(() => {\n    return [...Array(count)]\n      .map((_, idx) => {\n        const disabled = getDisabledItem(idx);\n        if (disabled) disableds.current.push(idx);\n        return {\n          count: idx,\n          disabled: getDisabledItem(idx),\n        };\n      })\n      .filter((item) => (hideDisabled && item.disabled ? false : true));\n  }, [hideDisabled]);\n\n  return (\n    <div className={`${prefixCls}-spinner`} {...other}>\n      <ul>\n        {data.map((item, idx) => {\n          const liProps = {} as HTMLLiProps;\n          if (!item.disabled) {\n            liProps.onClick = (e) => handleClick(item.count, e);\n          }\n          const currentCount = getMaybeNumber();\n          return (\n            <li\n              key={idx}\n              data-index={currentCount === item.count ? idx : undefined}\n              ref={(tag) => tag && getItemInstance(tag)}\n              {...liProps}\n              className={[\n                item.disabled ? 'disabled' : null,\n                currentCount === item.count ? 'selected' : null,\n                hideDisabled && item.disabled ? 'hide' : null,\n              ]\n                .filter(Boolean)\n                .join(' ')\n                .trim()}\n            >\n              {item.count < 10 ? `0${item.count}` : item.count}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n"
  ]
}