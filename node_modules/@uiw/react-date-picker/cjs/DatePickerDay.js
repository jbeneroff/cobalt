"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DayRect = DayRect;
exports.DatePickerDay = DatePickerDay;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["date", "row", "col", "index", "today", "panelDate", "disabledDate", "renderDay", "onSelectDay"],
    _excluded2 = ["prefixCls", "className", "weekday", "weekTitle", "date", "today", "panelDate", "disabledDate", "renderDay", "onSelectDay"];

function isValidDate(date) {
  return date instanceof Date && !isNaN(date.getTime());
}

function classnames(obj) {
  return Object.keys(obj || {}).map(function (keyName) {
    return obj[keyName] ? keyName : null;
  }).filter(Boolean).join(' ').trim();
}

function DayRect(props) {
  var selectedDate = props.date,
      row = props.row,
      col = props.col,
      index = props.index,
      today = props.today,
      panelDate = props.panelDate,
      disabledDate = props.disabledDate,
      renderDay = props.renderDay,
      onSelectDay = props.onSelectDay,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var cls = {
    end: col === 0 || col === 6,
    prev: false,
    today: false,
    selected: false,
    next: false,
    disabled: false
  };
  var date = panelDate;
  if (!date || !isValidDate(date)) date = new Date();
  var year = date.getFullYear();
  var month = date.getMonth();
  var week = (0, _react.useMemo)(function () {
    return new Date(new Date(date).setDate(1)).getDay();
  }, [date.toDateString()]);
  var lastDay = (0, _react.useMemo)(function () {
    return new Date(year, month === 0 ? 12 : month + 1, 0).getDate();
  }, [date.toDateString()]);
  var day = index;

  if (date) {
    day = day - week + 1;

    if (day < 1) {
      cls.prev = true;
    }

    if (day > lastDay) {
      cls.next = true;
    }
  }

  var cellDate = (0, _react.useMemo)(function () {
    return new Date(new Date(date).setDate(day));
  }, [day]);

  if (today && today.toDateString() === cellDate.toDateString()) {
    cls.today = true;
  }

  if (selectedDate && selectedDate.toDateString() === cellDate.toDateString()) {
    cls.selected = true;
  }

  var divProps = {
    onClick: function onClick() {
      var cellMonth = cellDate.getMonth();
      onSelectDay && onSelectDay(cellDate, {
        year: cellDate.getFullYear(),
        month: cellMonth === 0 ? 12 : cellMonth + 1,
        day: cellDate.getDate()
      });
    }
  };

  if (disabledDate && disabledDate(cellDate, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), cls))) {
    cls.disabled = true;
    delete divProps.onClick;
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: classnames(cls)
  }, other), divProps), {}, {
    children: renderDay ? renderDay(cellDate.getDate(), (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), cls), {}, {
      date: cellDate
    })) : /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: cellDate.getDate()
    })
  }));
}

var WEEKTITLE = ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
var WEEKDAY = ['日', '一', '二', '三', '四', '五', '六'];

function DatePickerDay(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-datepicker' : _props$prefixCls,
      className = props.className,
      _props$weekday = props.weekday,
      weekday = _props$weekday === void 0 ? WEEKDAY : _props$weekday,
      _props$weekTitle = props.weekTitle,
      weekTitle = _props$weekTitle === void 0 ? WEEKTITLE : _props$weekTitle,
      date = props.date,
      today = props.today,
      panelDate = props.panelDate,
      disabledDate = props.disabledDate,
      renderDay = props.renderDay,
      _onSelectDay = props.onSelectDay,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded2);
  var weekdayLabel = (0, _react.useMemo)(function () {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "".concat(prefixCls, "-weekday"),
      children: (weekday || []).map(function (week, idx) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: classnames({
            end: idx === 0 || idx === 6
          }),
          title: weekTitle && weekTitle[idx],
          children: week
        }, idx);
      })
    });
  }, [prefixCls, weekday, weekTitle]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other), {}, {
    className: [prefixCls ? "".concat(prefixCls, "-body") : null, className].filter(Boolean).join(' ').trim(),
    children: [weekdayLabel, /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: [prefixCls ? "".concat(prefixCls, "-day-body") : null].filter(Boolean).join(' ').trim(),
      children: (0, _toConsumableArray2["default"])(Array(6)).map(function (_, idx) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: "".concat(prefixCls, "-week"),
          children: (0, _toConsumableArray2["default"])(Array(7)).map(function (_, col) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(DayRect, {
              date: date,
              today: today,
              disabledDate: disabledDate,
              renderDay: renderDay,
              panelDate: panelDate,
              col: col,
              row: idx,
              onSelectDay: function onSelectDay(curDate, data) {
                _onSelectDay && _onSelectDay(curDate, data);
              },
              index: idx * 7 + col
            }, col);
          })
        }, idx);
      })
    })]
  }));
}
//# sourceMappingURL=DatePickerDay.js.map