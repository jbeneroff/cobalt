{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "style",
    "size",
    "type",
    "preIcon",
    "addonAfter",
    "otherProps",
    "inputRef",
    "useRef",
    "addonRef",
    "current",
    "cls",
    "disabled",
    "filter",
    "Boolean",
    "join",
    "trim",
    "computedInputPadding",
    "input",
    "window",
    "getComputedStyle",
    "paddingRight",
    "clientWidth",
    "parseInt",
    "right"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;4BAUeA,kBAAMC,UAAN,CACb,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACd,yBASID,KATJ,CACEE,SADF;AAAA,MACEA,SADF,iCACc,SADd;AAAA,MAEEC,SAFF,GASIH,KATJ,CAEEG,SAFF;AAAA,MAGEC,KAHF,GASIJ,KATJ,CAGEI,KAHF;AAAA,oBASIJ,KATJ,CAIEK,IAJF;AAAA,MAIEA,IAJF,4BAIS,SAJT;AAAA,oBASIL,KATJ,CAKEM,IALF;AAAA,MAKEA,IALF,4BAKS,MALT;AAAA,uBASIN,KATJ,CAMEO,OANF;AAAA,MAMEA,OANF,+BAMY,IANZ;AAAA,MAOEC,UAPF,GASIR,KATJ,CAOEQ,UAPF;AAAA,MAQKC,UARL,6CASIT,KATJ;;AAUA,MAAMU,QAAQ,GAAGZ,kBAAMa,MAAN,CAA+B,IAA/B,CAAjB;;AACA,MAAMC,QAAQ,GAAGd,kBAAMa,MAAN,CAA8B,IAA9B,CAAjB;;AACA,kCACEV,GADF,EAEE;AAAA,WAAMS,QAAQ,CAACG,OAAf;AAAA,GAFF;AAIA,MAAMC,GAAG,GAAG,CACVZ,SADU,EAEVC,SAFU,EAGVE,IAAI,aAAMH,SAAN,cAAmBG,IAAnB,IAA4B,IAHtB,EAIVG,UAAU,aAAMN,SAAN,cAA0B,IAJ1B,EAKVF,KAAK,CAACe,QAAN,GAAiB,UAAjB,GAA8B,IALpB,EAOTC,MAPS,CAOFC,OAPE,EAQTC,IARS,CAQJ,GARI,EASTC,IATS,EAAZ;AAWA,wBAAU,YAAM;AACdC,IAAAA,oBAAoB;AACrB,GAFD;;AAIA,WAASA,oBAAT,GAAgC;AAC9B,QAAIR,QAAQ,CAACC,OAAT,IAAoBH,QAAQ,CAACG,OAAjC,EAA0C;AACxC,UAAMQ,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACC,gBAAP,CAAwBX,QAAQ,CAACC,OAAjC,EAA0C,IAA1C,CAAxB;AACAH,MAAAA,QAAQ,CAACG,OAAT,CAAiBT,KAAjB,CAAuBoB,YAAvB,aACEZ,QAAQ,CAACC,OAAT,CAAiBY,WAAjB,GAA+BC,QAAQ,CAACL,KAAK,CAACM,KAAP,EAAwB,EAAxB,CAAR,GAAsC,CADvE;AAGD;AACF;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEb,GAAhB;AAAqB,IAAA,KAAK,EAAEV,KAA5B;AAAA,4BACE,qBAAC,qBAAD;AAAM,MAAA,IAAI,EAAEG;AAAZ,MADF,eAEE;AACE,MAAA,GAAG,EAAEG,QADP;AAEE,MAAA,IAAI,EAAEJ,IAFR;AAGE,MAAA,YAAY,EAAC;AAHf,OAIMG,UAJN;AAKE,MAAA,SAAS,YAAKP,SAAL;AALX,OAFF,EASGM,UAAU,iBACT;AAAM,MAAA,SAAS,YAAKN,SAAL,iBAAf;AAA6C,MAAA,GAAG,EAAEU,QAAlD;AAAA,gBACGJ;AADH,MAVJ;AAAA,IADF;AAiBD,CA1DY,C",
  "sourcesContent": [
    "import React, { useEffect, useImperativeHandle } from 'react';\nimport Icon, { IconProps } from '@uiw/react-icon';\nimport { IProps, HTMLInputProps } from '@uiw/utils';\nimport './style/input.less';\n\nexport interface InputProps<T> extends IProps, Omit<HTMLInputProps, 'size'> {\n  preIcon?: IconProps<T>['type'];\n  addonAfter?: React.ReactNode;\n  size?: 'large' | 'default' | 'small';\n}\n\nexport default React.forwardRef<HTMLInputElement, InputProps<{}>>(\n  (props, ref) => {\n    const {\n      prefixCls = 'w-input',\n      className,\n      style,\n      size = 'default',\n      type = 'text',\n      preIcon = null,\n      addonAfter,\n      ...otherProps\n    } = props;\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const addonRef = React.useRef<HTMLSpanElement>(null);\n    useImperativeHandle<HTMLInputElement | null, HTMLInputElement | null>(\n      ref,\n      () => inputRef.current,\n    );\n    const cls = [\n      prefixCls,\n      className,\n      size ? `${prefixCls}-${size}` : null,\n      addonAfter ? `${prefixCls}-addon` : null,\n      props.disabled ? 'disabled' : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n\n    useEffect(() => {\n      computedInputPadding();\n    });\n\n    function computedInputPadding() {\n      if (addonRef.current && inputRef.current) {\n        const input = window && window.getComputedStyle(addonRef.current, null);\n        inputRef.current.style.paddingRight = `${\n          addonRef.current.clientWidth + parseInt(input.right as string, 10) * 2\n        }px`;\n      }\n    }\n    return (\n      <div className={cls} style={style}>\n        <Icon type={preIcon} />\n        <input\n          ref={inputRef}\n          type={type}\n          autoComplete=\"off\"\n          {...otherProps}\n          className={`${prefixCls}-inner`}\n        />\n        {addonAfter && (\n          <span className={`${prefixCls}-addon-after`} ref={addonRef}>\n            {addonAfter}\n          </span>\n        )}\n      </div>\n    );\n  },\n);\n"
  ]
}