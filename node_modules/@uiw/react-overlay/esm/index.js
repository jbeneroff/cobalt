import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["className", "style", "isOpen", "prefixCls", "usePortal", "maskClosable", "backdropProps", "portalProps", "hasBackdrop", "unmountOnExit", "timeout", "transitionName", "onOpening", "onOpened", "onClosing", "onClosed", "onClose", "children", "dialogProps"];

/**
 * Overlay 组件
 * ---------------
 * 动画库 react-transition-group 文档
 * 老的文档
 * https://facebook.github.io/react/docs/animation.html
 * 新的文档
 * https://reactcommunity.org/react-transition-group/
 * 动画效果
 * https://daneden.github.io/animate.css/
 */
import React, { cloneElement, useEffect, useRef, useState } from 'react';
import { CSSTransition } from 'react-transition-group';
import Portal from '@uiw/react-portal';
import { noop } from '@uiw/utils';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function Overlay(props) {
  var {
    className,
    style,
    isOpen: _ = false,
    prefixCls = 'w-overlay',
    usePortal = true,
    maskClosable = true,
    backdropProps = {},
    portalProps = {},
    hasBackdrop = true,
    unmountOnExit = true,
    // 设置 true 销毁根节点
    timeout = 300,
    transitionName = 'w-overlay',
    // onEnter = noop,
    onOpening = noop,
    onOpened = noop,
    onClosing = noop,
    onClosed = noop,
    onClose = noop,
    children,
    dialogProps = {}
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [isOpen, setIsOpen] = useState(props.isOpen || false);
  var [visible, setVisible] = useState(false);
  var container = useRef(null);
  var overlay = useRef(null);
  useEffect(() => {
    if (isOpen !== props.isOpen && props.isOpen) {
      setVisible(true);
    }

    if (isOpen !== props.isOpen && !props.isOpen) {
      overlayWillClose();
      setIsOpen(false);
    }
  }, [props.isOpen]);
  useEffect(() => {
    if (visible) {
      overlayWillOpen();
      setIsOpen(true);
    }
  }, [visible]);
  var decoratedChild = typeof children === 'object' ? /*#__PURE__*/cloneElement(children, _extends({}, dialogProps, {
    style: _extends({}, children.props.style, dialogProps.style),
    className: [children.props.className, prefixCls + "-content"].filter(Boolean).join(' ').trim(),
    tabIndex: 0
  })) : /*#__PURE__*/_jsx("span", _extends({}, dialogProps, {
    className: prefixCls + "-content",
    children: children
  }));

  function handleClosed(node) {
    setVisible(false);
    onClosed && onClosed(node);
  }

  function handleBackdropMouseDown(e) {
    if (e.target !== container.current && usePortal) {
      return;
    }

    if (maskClosable && hasBackdrop) {
      overlayWillClose();
      setIsOpen(false);
      onClose && onClose(e);
    }

    backdropProps && backdropProps.onMouseDown && backdropProps.onMouseDown(e);
  }

  function overlayWillOpen() {
    if (hasBackdrop && usePortal) {
      document.body.classList.add(prefixCls + "-open");
    }
  }

  function overlayWillClose() {
    if (hasBackdrop && usePortal) {
      document.body.classList.remove(prefixCls + "-open");
    } // if (unmountOnExit) {
    //   setVisible(false)
    // }

  }

  var TransitionGroupComp = /*#__PURE__*/_jsx(CSSTransition, _extends({
    classNames: transitionName,
    unmountOnExit: unmountOnExit,
    timeout: timeout
  }, otherProps, {
    in: isOpen,
    onEntering: onOpening,
    onEntered: onOpened,
    onExiting: onClosing,
    onExited: handleClosed,
    children: status => {
      return /*#__PURE__*/_jsxs("div", {
        style: style,
        ref: overlay,
        className: [prefixCls, className, !usePortal ? prefixCls + "-inline" : null, isOpen ? prefixCls + "-enter-done" : null].filter(Boolean).join(' ').trim(),
        children: [hasBackdrop && /*#__PURE__*/cloneElement( /*#__PURE__*/_jsx("div", {}), _extends({}, backdropProps, {
          onMouseDown: handleBackdropMouseDown,
          className: [prefixCls + "-backdrop", backdropProps.className].filter(Boolean).join(' ').trim(),
          tabIndex: maskClosable ? 0 : null
        })), usePortal ? /*#__PURE__*/_jsx("div", {
          ref: container,
          onMouseDown: handleBackdropMouseDown,
          className: prefixCls + "-container",
          children: /*#__PURE__*/cloneElement(decoratedChild, {
            'data-status': status
          })
        }) : /*#__PURE__*/cloneElement(decoratedChild, {
          'data-status': status
        })]
      });
    }
  }));

  if (visible && usePortal) {
    return /*#__PURE__*/_jsx(Portal, _extends({}, _extends({}, portalProps), {
      children: TransitionGroupComp
    }));
  } else {
    return TransitionGroupComp;
  }
}
//# sourceMappingURL=index.js.map