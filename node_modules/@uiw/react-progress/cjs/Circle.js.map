{
  "version": 3,
  "sources": [
    "../src/Circle.tsx"
  ],
  "names": [
    "Circle",
    "type",
    "elm",
    "props",
    "strokeWidth",
    "percent",
    "parentNode",
    "getBoundingClientRect",
    "width",
    "_strokeWidth",
    "toFixed",
    "radius",
    "parseInt",
    "parseFloat",
    "toString",
    "setAttribute",
    "perimeter",
    "Math",
    "PI",
    "prefixCls",
    "style",
    "className",
    "showText",
    "format",
    "status",
    "resetProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "progressInfo",
    "progressStatus",
    "percentView",
    "fontSize",
    "relativeStrokeWidth",
    "bind",
    "React",
    "Component"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { IconProps } from '@uiw/react-icon';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport { IconProgress } from './utils';\nimport './style/index.less';\nimport './style/circle.less';\n\nexport type Status = 'success' | 'active' | 'exception';\nexport interface ProgressCircleProps<T> extends IProps, HTMLDivProps {\n  type?: IconProps<T>['type'];\n  status?: Status;\n  showText?: boolean; // 是否显示进度条文字内容\n  percent?: number; // 百分比（必填）\n  width?: number; // 圆圈进度条画布宽度\n  strokeWidth?: number; // 进度条大小设置\n  format?: (percent: number) => React.ReactNode;\n}\n\nexport default class Circle<T> extends React.Component<ProgressCircleProps<T>> {\n  public static defaultProps: ProgressCircleProps<{}> = {\n    prefixCls: 'w-progress',\n    showText: true,\n    percent: 0, // 百分比（必填）\n    width: 126, // 圆圈进度条画布宽度\n    strokeWidth: 6, // 进度条大小设置\n  };\n  relativeStrokeWidth(type: 'track' | 'bg' | undefined, elm: SVGPathElement) {\n    const { strokeWidth, percent } = this.props;\n    if (elm && elm.parentNode) {\n      const { width } = (elm.parentNode as SVGAElement).getBoundingClientRect();\n      const _strokeWidth: string = (\n        ((strokeWidth as number) / width) *\n        100\n      ).toFixed(1);\n      const radius = parseInt(\n        (50 - parseFloat(_strokeWidth) / 2).toString(),\n        10,\n      );\n      elm.setAttribute('stroke-width', _strokeWidth);\n      elm.setAttribute(\n        'd',\n        `M 50 50 m 0 -${radius} a ${radius} ${radius} 0 1 1 0 ${\n          radius * 2\n        } a ${radius} ${radius} 0 1 1 0 -${radius * 2}`,\n      );\n      if (type === 'track') {\n        // 计算周长\n        const perimeter = 2 * Math.PI * radius;\n        elm.setAttribute(\n          'style',\n          `stroke-dasharray:${perimeter}px,${perimeter}px;stroke-dashoffset:${\n            (1 - (percent as number) / 100) * perimeter\n          }px;transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;`,\n        );\n      }\n    }\n  }\n  render() {\n    const {\n      prefixCls,\n      style,\n      type,\n      className,\n      showText,\n      percent,\n      format,\n      strokeWidth,\n      width,\n      status,\n      ...resetProps\n    } = this.props;\n    const cls = [\n      prefixCls,\n      className,\n      `${prefixCls}-circle`,\n      showText ? `${prefixCls}-show-text` : null,\n      status ? `${prefixCls}-status-${status}` : null,\n      parseInt((percent as number).toString(), 10) >= 100\n        ? `${prefixCls}-status-success`\n        : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    let progressInfo;\n    const progressStatus =\n      parseInt((percent as number).toString(), 10) >= 100 &&\n      !('status' in this.props)\n        ? 'success'\n        : status;\n    if (showText) {\n      let percentView: React.ReactNode = `${percent}%`;\n      if (progressStatus === 'exception') {\n        percentView = <IconProgress type=\"close\" />;\n      } else if (progressStatus === 'success') {\n        percentView = <IconProgress type=\"check\" />;\n      }\n      progressInfo = (\n        <span\n          className={`${prefixCls}-text`}\n          style={{ fontSize: (width as number) * 0.16 + 6 }}\n        >\n          {format ? format(percent as number) : percentView}\n        </span>\n      );\n    }\n    return (\n      <div className={cls} style={style} {...resetProps}>\n        <svg viewBox=\"0 0 100 100\" width={`${width}`}>\n          <path\n            ref={this.relativeStrokeWidth.bind(this, 'bg')}\n            className={`${prefixCls}-trail`}\n            fill=\"none\"\n          />\n          <path\n            ref={this.relativeStrokeWidth.bind(this, 'track')}\n            strokeLinecap=\"round\"\n            className={`${prefixCls}-stroke`}\n            fill=\"none\"\n          />\n        </svg>\n        {progressInfo}\n      </div>\n    );\n  }\n}\n"
  ]
}