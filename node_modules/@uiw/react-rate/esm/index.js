import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "count", "value", "className", "allowHalf", "character", "readOnly", "disabled", "onChange", "onHoverChange", "color"];
import React, { useState, useMemo } from 'react';
import { noop } from '@uiw/utils';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function Rate(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls = 'w-rate',
    count = 5,
    value: defValue = 0,
    className,
    allowHalf,
    character = 'â˜…',
    readOnly = false,
    disabled,
    onChange = noop,
    onHoverChange = noop,
    color
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [value, setValue] = useState(defValue);
  var [hoverCount, setHoverCount] = useState(-1);
  var cls = [prefixCls, className, disabled ? 'disabled' : null].filter(Boolean).join(' ').trim();
  var [prevValue, setPrevValue] = useState();

  if (defValue !== prevValue) {
    setPrevValue(defValue);
  }

  useMemo(() => {
    if (value !== prevValue) {
      setValue(defValue);
    }
  }, [prevValue]);

  function _onMouseLeave() {
    setHoverCount(-1);
  }

  function getValue(e, key) {
    e.persist();
    var currentValue = key;
    var isLeft = e.clientX - e.currentTarget.getBoundingClientRect().left <= e.currentTarget.getBoundingClientRect().width / 2;

    if (allowHalf) {
      e.persist();
      currentValue = isLeft ? key + 0.5 : key + 1;
    } else {
      currentValue = key + 1;
    }

    return currentValue;
  }

  function onMouseMove(e, key) {
    var currentValue = getValue(e, key);

    if (hoverCount !== currentValue) {
      setHoverCount(currentValue);
      onHoverChange(currentValue);
    }
  }

  function onClick(e, key) {
    if (readOnly) return;
    var currentValue = getValue(e, key);
    setValue(currentValue);
    onChange(currentValue);
  }

  return /*#__PURE__*/_jsx("div", _extends({}, other, {
    className: cls,
    onMouseLeave: () => _onMouseLeave(),
    children: [...Array(count)].map((_, idx) => {
      var halfon = value <= idx + 0.5 && Math.ceil(value) - 1 === idx && hoverCount === -1 || hoverCount === idx + 0.5;
      var activeCls = [prefixCls + "-hight", idx + 1 <= value && hoverCount === -1 ? 'star-on' : null, idx + 1 <= hoverCount ? 'hover-on' : null, halfon ? 'half-on' : null].filter(Boolean).join(' ').trim();
      var props = {};

      if (!readOnly) {
        props.onClick = e => onClick(e, idx);

        props.onMouseMove = e => onMouseMove(e, idx);
      }

      return /*#__PURE__*/_jsxs("span", _extends({}, props, {
        children: [/*#__PURE__*/_jsx("span", {
          style: {
            color
          },
          className: activeCls,
          children: character
        }), /*#__PURE__*/_jsx("span", {
          className: prefixCls + "-bg",
          children: character
        })]
      }), idx);
    })
  }));
}
//# sourceMappingURL=index.js.map