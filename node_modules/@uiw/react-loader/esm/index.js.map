{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useMemo",
    "props",
    "prefixCls",
    "className",
    "size",
    "loading",
    "tip",
    "vertical",
    "color",
    "bgColor",
    "children",
    "indicator",
    "fullscreen",
    "otherProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "indicatorView",
    "tipsView",
    "backgroundColor",
    "cloneElement",
    "Object",
    "assign"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA;;;AAcA,gBAAe,UAACC,KAAD,EAA6B;AAAA,MAA5BA,KAA4B;AAA5BA,IAAAA,KAA4B,GAAP,EAAO;AAAA;;AAC1C,MAAM;AACJC,IAAAA,SAAS,GAAG,UADR;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,IAAI,GAAG,SAHH;AAIJC,IAAAA,OAAO,GAAG,IAJN;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA,KAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA,QATI;AAUJC,IAAAA,SAVI;AAWJC,IAAAA,UAAU,GAAG;AAXT,MAaFX,KAbJ;AAAA,MAYKY,UAZL,iCAaIZ,KAbJ;;AAcA,MAAMa,GAAG,GAAG,CAACZ,SAAD,EAAYC,SAAZ,EAAuBC,IAAI,GAAMF,SAAN,SAAmBE,IAAnB,GAA4B,IAAvD,EACTW,MADS,CACFC,OADE,EAETC,IAFS,CAEJ,GAFI,EAGTC,IAHS,EAAZ;AAKA,MAAMC,aAAa,GAAGnB,OAAO,CAC3B,mBACE;AAAK,IAAA,OAAO,EAAC,aAAb;AAAA,2BACE;AACE,MAAA,EAAE,EAAC,IADL;AAEE,MAAA,EAAE,EAAC,IAFL;AAGE,MAAA,CAAC,EAAC,IAHJ;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,WAAW,EAAC,GALd;AAME,MAAA,gBAAgB,EAAC;AANnB;AADF,IAFyB,EAa3B,EAb2B,CAA7B;AAgBA,MAAMoB,QAAQ,GAAGpB,OAAO,CACtB,mBACE;AACE,IAAA,SAAS,EAAE,CACNE,SADM,YAETU,UAAU,GAAMV,SAAN,mBAA+B,IAFhC,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ,EADb;AAQE,IAAA,KAAK,EAAE;AAAEV,MAAAA,KAAF;AAASa,MAAAA,eAAe,EAAEZ;AAA1B,KART;AAAA,2BAUE;AAAK,MAAA,SAAS,EAAKP,SAAL,iBAAd;AAAA,iBACGS,SAAS,IAAIQ,aADhB,EAEGb,GAAG,iBACF;AACE,QAAA,SAAS,EAAE,CACNJ,SADM,YAETK,QAAQ,GAAML,SAAN,iBAA6B,IAF5B,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ,EADb;AAAA,kBASGZ;AATH,QAHJ;AAAA;AAVF,IAFoB,EA8BtB,CAACM,UAAD,EAAaH,OAAb,EAAsBP,SAAtB,EAAiCK,QAAjC,EAA2CD,GAA3C,CA9BsB,CAAxB;AAiCA,sBACE;AAAK,IAAA,SAAS,EAAEQ;AAAhB,KAAyBD,UAAzB;AAAA,eACG,CAACR,OAAO,IAAIO,UAAZ,KAA2BQ,QAD9B,EAEGV,QAAQ,iBACPX,KAAK,CAACuB,YAAN,CACEZ,QADF,EAEEa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,QAAQ,CAACT,KAA3B,EAAkC;AAChCE,MAAAA,SAAS,EAAE,CACND,SADM,YAETG,OAAO,GAAMH,SAAN,aAAyB,IAFvB,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ;AADqB,KAAlC,CAFF,CAHJ;AAAA,KADF;AAkBD,CAvFD",
  "sourcesContent": [
    "import React, { useMemo } from 'react';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport './style/index.less';\n\nexport interface LoaderProps extends IProps, HTMLDivProps {\n  size?: 'small' | 'default' | 'large';\n  loading?: boolean;\n  fullscreen?: boolean;\n  color?: string;\n  bgColor?: string;\n  vertical?: boolean;\n  tip?: React.ReactNode;\n  indicator?: React.ReactNode;\n  children?: any | React.ReactNode;\n}\n\nexport default (props: LoaderProps = {}) => {\n  const {\n    prefixCls = 'w-loader',\n    className,\n    size = 'default',\n    loading = true,\n    tip,\n    vertical,\n    color,\n    bgColor,\n    children,\n    indicator,\n    fullscreen = false,\n    ...otherProps\n  } = props;\n  const cls = [prefixCls, className, size ? `${prefixCls}-${size}` : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  const indicatorView = useMemo(\n    () => (\n      <svg viewBox=\"25 25 50 50\">\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"20\"\n          fill=\"none\"\n          strokeWidth=\"5\"\n          strokeMiterlimit=\"10\"\n        />\n      </svg>\n    ),\n    [],\n  );\n\n  const tipsView = useMemo(\n    () => (\n      <div\n        className={[\n          `${prefixCls}-tips`,\n          fullscreen ? `${prefixCls}-fullscreen` : null,\n        ]\n          .filter(Boolean)\n          .join(' ')\n          .trim()}\n        style={{ color, backgroundColor: bgColor }}\n      >\n        <div className={`${prefixCls}-tips-nested`}>\n          {indicator || indicatorView}\n          {tip && (\n            <div\n              className={[\n                `${prefixCls}-text`,\n                vertical ? `${prefixCls}-vertical` : null,\n              ]\n                .filter(Boolean)\n                .join(' ')\n                .trim()}\n            >\n              {tip}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    [fullscreen, bgColor, prefixCls, vertical, tip],\n  );\n\n  return (\n    <div className={cls} {...otherProps}>\n      {(loading || fullscreen) && tipsView}\n      {children &&\n        React.cloneElement(\n          children,\n          Object.assign({}, children.props, {\n            className: [\n              `${prefixCls}-warp`,\n              loading ? `${prefixCls}-blur` : null,\n            ]\n              .filter(Boolean)\n              .join(' ')\n              .trim(),\n          }),\n        )}\n    </div>\n  );\n};\n"
  ]
}