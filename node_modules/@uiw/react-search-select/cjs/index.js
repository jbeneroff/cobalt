"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SearchSelect;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactDropdown = _interopRequireDefault(require("@uiw/react-dropdown"));

var _reactIcon = _interopRequireDefault(require("@uiw/react-icon"));

var _reactMenu = _interopRequireDefault(require("@uiw/react-menu"));

var _reactInput = _interopRequireDefault(require("@uiw/react-input"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["allowClear", "disabled", "size", "option", "loading", "prefixCls", "className", "style", "isOpen", "value", "defaultValue", "showSearch", "placeholder", "onSearch", "onChange", "onSelect"];

function SearchSelect(props) {
  var _props$allowClear = props.allowClear,
      allowClear = _props$allowClear === void 0 ? false : _props$allowClear,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$size = props.size,
      size = _props$size === void 0 ? 'default' : _props$size,
      _props$option = props.option,
      option = _props$option === void 0 ? [] : _props$option,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      prefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      isOpen = props.isOpen,
      value = props.value,
      defaultValue = props.defaultValue,
      showSearch = props.showSearch,
      placeholder = props.placeholder,
      onSearch = props.onSearch,
      onChange = props.onChange,
      onSelect = props.onSelect,
      others = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      innerIsOpen = _useState2[0],
      setInnerIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(value),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      selectedValue = _useState4[0],
      setSelectedValue = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      selectedLabel = _useState6[0],
      setSelectedLabel = _useState6[1];

  var _useState7 = (0, _react.useState)(''),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      selectIconType = _useState8[0],
      setSelectIconType = _useState8[1];

  var divRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (defaultValue) {
      var defaultMenuItem = option.find(function (menuItem) {
        return defaultValue === menuItem.value;
      });
      setSelectedValue(defaultValue);
      setSelectedLabel(defaultMenuItem ? defaultMenuItem.label : '');
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (value !== selectedValue) {
      setSelectedValue(value);
    }
  }, [value]);

  function handleItemClick(item) {
    setInnerIsOpen(false);
    setSelectedValue(item.value);
    setSelectedLabel(item.label);
    onSelect && onSelect(item.value); // 支持form组件

    handleSelectChange(item.value);
  } // 渲染icon


  function renderSelectIcon(type) {
    var selectIconType;

    if (type === 'enter' && allowClear && selectedValue) {
      selectIconType = 'close';
    } else {
      selectIconType = '';
    }

    setSelectIconType(selectIconType);
  } // handle change


  function handleInputChange(e) {
    var value = e.target.value;
    setInnerIsOpen(!!value);
    setSelectedLabel(value);
    setSelectIconType(showSearch && value ? 'loading' : '');
    showSearch && onSearch && onSearch(value);
    handleSelectChange(value);
  } // 清除选中的值


  function resetSelectedValue() {
    setInnerIsOpen(false);
    setSelectedValue('');
    setSelectedLabel('');
    setSelectIconType('');
    handleSelectChange('');
  }

  function handleSelectChange(value) {
    onChange && onChange(value);
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDropdown["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    trigger: "focus",
    style: {
      marginTop: 5
    },
    disabled: option && option.length > 0 ? false : true
  }, others), {}, {
    onVisibleChange: function onVisibleChange(open) {
      return setInnerIsOpen(open);
    },
    isOpen: innerIsOpen,
    menu: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactMenu["default"], {
      bordered: true,
      style: {
        minHeight: 25,
        maxHeight: 280,
        overflowY: 'scroll',
        width: divRef.current ? divRef.current.offsetWidth : 'auto'
      },
      children: !option || option.length === 0 ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          color: '#c7c7c7',
          fontSize: 12
        },
        children: loading ? '正在加载数据...' : '没有数据'
      }) : option.map(function (item, idx) {
        var active = selectedValue === item.value;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactMenu["default"].Item, {
          active: active,
          text: item.label,
          onClick: function onClick() {
            return handleItemClick(item);
          }
        }, idx);
      })
    }),
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: divRef,
      onMouseOver: function onMouseOver() {
        return renderSelectIcon('enter');
      },
      onMouseLeave: function onMouseLeave() {
        return renderSelectIcon('leave');
      },
      style: style,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactInput["default"], {
        readOnly: !showSearch,
        size: size,
        disabled: disabled,
        onChange: handleInputChange,
        value: selectedLabel,
        placeholder: placeholder,
        addonAfter: (selectIconType === 'close' || selectIconType === 'loading' && loading) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactIcon["default"], {
          type: selectIconType,
          spin: loading && selectIconType === 'loading',
          onClick: resetSelectedValue
        })
      })
    })
  }));
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map