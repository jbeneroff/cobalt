import React from 'react';
import { IProps, HTMLDivProps } from '@uiw/utils';
import './style/day.less';
export interface DatePickerDayDateSource {
    day?: number;
    month?: number;
    year?: number;
}
export interface DatePickerDayProps extends IProps, HTMLDivProps {
    weekday?: string[];
    weekTitle?: string[];
    panelDate?: Date;
    date?: Date;
    today?: Date;
    prefixCls?: string;
    onSelectDay?: (selectedDate?: Date, dateSource?: DatePickerDayDateSource) => void;
    renderDay?: (day: number, props: DatePickerDayRenderDay & DatePickerDayRenderDayProps) => React.ReactNode;
    disabledDate?: (cellDate: Date, props: DatePickerDayRenderDay & DatePickerDayRenderDayProps) => boolean;
}
export interface PickerDayState {
    selected?: Date;
    panelDate?: Date;
}
export declare type DatePickerDayRenderDay = {
    end: boolean;
    prev: boolean;
    today: boolean;
    selected: boolean;
    next: boolean;
    disabled: boolean;
    date?: Date;
};
export declare type DatePickerDayRenderDayProps = {
    key?: number;
    date?: Date;
    onClick?: (cellDate: Date, event: React.MouseEvent<HTMLDivProps>) => void;
};
export declare type DayRectProps = {
    col: number;
    row: number;
    index: number;
    date?: DatePickerDayProps['date'];
    today?: DatePickerDayProps['today'];
    disabledDate?: DatePickerDayProps['disabledDate'];
    renderDay?: DatePickerDayProps['renderDay'];
    panelDate?: DatePickerDayProps['panelDate'];
    onSelectDay?: DatePickerDayProps['onSelectDay'];
};
export declare function DayRect(props: DayRectProps): JSX.Element;
export declare function DatePickerDay(props: DatePickerDayProps): JSX.Element;
