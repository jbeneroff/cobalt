import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "content", "children", "offsetTop", "fixed", "speed", "showBelow", "clickable"];
import React, { useState, useEffect } from 'react';
import { getScrollPercent, getScrollTop, scrollToAnimate } from './utils';
import "./style/index.css";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-back-top',
    className,
    content,
    children,
    offsetTop = 0,
    fixed = true,
    speed = 100,
    showBelow = 1,
    clickable = true
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var topShowBelow = !fixed ? 0 : showBelow || 0;
  var [percent, setPercent] = useState(0);
  var [current, setCurrent] = useState(0);
  var visible = percent >= topShowBelow;
  var cls = [prefixCls, className, !fixed ? 'no-fixed' : null, visible ? prefixCls + "-show" : null, !visible ? prefixCls + "-hide" : null].filter(Boolean).join(' ').trim();
  useEffect(() => {
    window && window.addEventListener('scroll', onScroll);
    return function () {
      window && window.removeEventListener('scroll', onScroll);
    };
  });

  function onScroll() {
    setPercent(getScrollPercent(offsetTop));
    setCurrent(getScrollTop());
  }

  function scrollToTop() {
    if (typeof offsetTop === 'number' && typeof speed === 'number' && typeof current === 'number') {
      scrollToAnimate(offsetTop, speed, current);
    }
  }

  return /*#__PURE__*/_jsxs("div", _extends({
    onClick: () => clickable && scrollToTop(),
    className: cls
  }, other, {
    ref: ref,
    children: [content, typeof children !== 'function' ? children : children({
      percent,
      current,
      scrollToTop: scrollToTop
    })]
  }));
});
//# sourceMappingURL=index.js.map