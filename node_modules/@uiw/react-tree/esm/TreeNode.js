import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "renderTitle", "icon", "iconAnimation", "isSelected", "openKeys", "selectedKeys", "data", "level", "parent", "onItemClick", "onItemSelected"];
import React, { useCallback, useMemo } from 'react';
import { CSSTransition } from 'react-transition-group';
import Icon from '@uiw/react-icon';
import { noop } from '@uiw/utils';
import { getChildKeys } from './';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

var Label = _ref => {
  var {
    label
  } = _ref;
  return useMemo(() => /*#__PURE__*/_jsx("span", {
    children: label
  }), [label]);
};

export default function TreeNode(props) {
  var {
    prefixCls,
    renderTitle,
    icon,
    iconAnimation,
    isSelected,
    openKeys,
    selectedKeys,
    data,
    level,
    parent,
    onItemClick = noop,
    onItemSelected = noop
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var isOpen = false;

  if (parent && parent.key) {
    isOpen = !!(openKeys && openKeys.indexOf(parent.key) > -1);
  }

  var onExit = useCallback(node => {
    node.style.height = node.scrollHeight + "px";
  }, []);
  var onExiting = useCallback(node => {
    node.style.height = '1px';
  }, []);
  var onEnter = useCallback((node, isAppearing) => {
    node.style.height = '1px';
  }, []);
  var onEntering = useCallback((node, isAppearing) => {
    node.style.height = node.scrollHeight + "px";
  }, []);
  var onEntered = useCallback((node, isAppearing) => {
    node.style.height = 'initial';
  }, []);
  return /*#__PURE__*/_jsx(CSSTransition, {
    classNames: prefixCls,
    in: isOpen,
    timeout: 200,
    onExit: onExit,
    onExiting: onExiting,
    onEnter: onEnter,
    onEntered: onEntered,
    onEntering: onEntering,
    children: /*#__PURE__*/_jsx("ul", {
      className: [level !== 1 && isOpen ? [prefixCls + "-open"] : null, level !== 1 && !isOpen ? [prefixCls + "-close"] : null].filter(Boolean).join(' ').trim(),
      children: data.map((item, idx) => {
        item.parent = parent;
        var selected = !!(selectedKeys && selectedKeys.indexOf(item.key) > -1);
        var noChild = !item.children;
        var itemIsOpen = openKeys && openKeys.indexOf(item.key) > -1 && !!item.children;
        var iconItem = typeof icon === 'function' ? icon(item, {
          isOpen: !!itemIsOpen,
          noChild,
          openKeys,
          selectedKeys
        }) : icon;
        var childKeys = noChild ? [] : getChildKeys(item.children);
        var checkedKeys = selectedKeys ? selectedKeys.filter(key => childKeys.indexOf(key) > -1) : [];
        var isHalfChecked = checkedKeys.length > 0 && childKeys.length !== checkedKeys.length;
        return /*#__PURE__*/_jsxs("li", {
          children: [/*#__PURE__*/_jsxs("div", {
            className: prefixCls + "-label",
            children: [/*#__PURE__*/_jsx("span", {
              className: prefixCls + "-switcher",
              onClick: evn => onItemClick(item, evn),
              children: /*#__PURE__*/_jsx(Icon, {
                type: iconItem || 'caret-right',
                className: [typeof icon === 'function' ? prefixCls + "-switcher-noop" : null, noChild ? 'no-child' : null, !iconAnimation ? 'no-animation' : null, itemIsOpen ? 'open' : null].filter(Boolean).join(' ').trim()
              })
            }), /*#__PURE__*/_jsx("div", {
              onClick: evn => onItemSelected(item, evn),
              className: [prefixCls + "-title", selected && isSelected ? 'selected' : null, item.disabled ? 'disabled' : null].filter(Boolean).join(' ').trim(),
              children: renderTitle ? renderTitle(item, {
                selected,
                noChild,
                openKeys,
                isHalfChecked,
                selectedKeys
              }) : /*#__PURE__*/_jsx(Label, {
                label: item.label
              })
            })]
          }), item.children && /*#__PURE__*/_jsx(TreeNode, _extends({}, other, {
            prefixCls,
            icon,
            iconAnimation,
            isSelected,
            openKeys,
            selectedKeys,
            onItemClick,
            onItemSelected,
            renderTitle,
            prefixCls: prefixCls,
            data: item.children,
            level: level + 1,
            parent: item
          }))]
        }, idx);
      })
    })
  });
}
//# sourceMappingURL=TreeNode.js.map