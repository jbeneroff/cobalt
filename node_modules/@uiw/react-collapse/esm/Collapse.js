import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "children", "accordion", "bordered", "showArrow", "activeKey", "onChange"];
import React, { useState, useMemo } from 'react';
import Panel from './Panel';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";

function toArray(activeKey) {
  var currentActiveKey = activeKey;

  if (!Array.isArray(currentActiveKey)) {
    currentActiveKey = currentActiveKey ? [currentActiveKey] : [];
  }

  return currentActiveKey;
}

function InternalCollapse(props, ref) {
  var {
    prefixCls = 'w-collapse',
    className,
    children,
    accordion = false,
    bordered,
    showArrow = true,
    activeKey: propsActiveKey,
    onChange
  } = props,
      resetProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [activeKey, setActiveKey] = useState(toArray(propsActiveKey));
  var cls = [prefixCls, className, bordered ? 'w-noborder' : null].filter(Boolean).join(' ').trim();

  function onItemClick(key) {
    var keys = activeKey;

    if (accordion) {
      keys = keys[0] === key ? [] : [key];
    } else {
      keys = [...keys];
      var index = keys.indexOf(key);
      var isActive = index > -1;

      if (isActive) {
        keys.splice(index, 1);
      } else {
        keys.push(key);
      }
    }

    setActiveKey(keys);
  }

  useMemo(() => {
    if (propsActiveKey !== activeKey) {
      setActiveKey(toArray(propsActiveKey));
    }
  }, [propsActiveKey]);
  useMemo(() => {
    if (propsActiveKey !== activeKey) {
      onChange && onChange(activeKey);
    }
  }, [activeKey, propsActiveKey]);
  return /*#__PURE__*/_jsx("div", _extends({
    className: cls
  }, resetProps, {
    ref: ref,
    children: React.Children.map(children, (child, index) => {
      // 如果没有密钥提供，请使用面板顺序作为默认密钥
      var key = child.key || String(index);
      var {
        disabled
      } = child.props;
      var isActive = false;

      if (accordion) {
        // 手风琴模式下默认选择第一个
        isActive = activeKey[0] === key;
      } else {
        isActive = activeKey.indexOf(key) > -1;
      }

      var childProps = _extends({
        prefixCls,
        isActive,
        disabled,
        showArrow,
        onItemClick: disabled ? () => {} : () => onItemClick(key)
      }, child.props);

      return /*#__PURE__*/React.cloneElement(child, childProps);
    })
  }));
}

var Collapse = /*#__PURE__*/React.forwardRef(InternalCollapse);
Collapse.Panel = Panel;
export default Collapse;
//# sourceMappingURL=Collapse.js.map