import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "style", "size", "type", "preIcon", "addonAfter"];
import React, { useEffect, useImperativeHandle } from 'react';
import Icon from '@uiw/react-icon';
import "./style/input.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-input',
    className,
    style,
    size = 'default',
    type = 'text',
    preIcon = null,
    addonAfter
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  var inputRef = React.useRef(null);
  var addonRef = React.useRef(null);
  useImperativeHandle(ref, () => inputRef.current);
  var cls = [prefixCls, className, size ? prefixCls + "-" + size : null, addonAfter ? prefixCls + "-addon" : null, props.disabled ? 'disabled' : null].filter(Boolean).join(' ').trim();
  useEffect(() => {
    computedInputPadding();
  });

  function computedInputPadding() {
    if (addonRef.current && inputRef.current) {
      var input = window && window.getComputedStyle(addonRef.current, null);
      inputRef.current.style.paddingRight = addonRef.current.clientWidth + parseInt(input.right, 10) * 2 + "px";
    }
  }

  return /*#__PURE__*/_jsxs("div", {
    className: cls,
    style: style,
    children: [/*#__PURE__*/_jsx(Icon, {
      type: preIcon
    }), /*#__PURE__*/_jsx("input", _extends({
      ref: inputRef,
      type: type,
      autoComplete: "off"
    }, otherProps, {
      className: prefixCls + "-inner"
    })), addonAfter && /*#__PURE__*/_jsx("span", {
      className: prefixCls + "-addon-after",
      ref: addonRef,
      children: addonAfter
    })]
  });
});
//# sourceMappingURL=index.js.map