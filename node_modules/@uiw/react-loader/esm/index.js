import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "size", "loading", "tip", "vertical", "color", "bgColor", "children", "indicator", "fullscreen"];
import React, { useMemo } from 'react';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default (function (props) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls = 'w-loader',
    className,
    size = 'default',
    loading = true,
    tip,
    vertical,
    color,
    bgColor,
    children,
    indicator,
    fullscreen = false
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = [prefixCls, className, size ? prefixCls + "-" + size : null].filter(Boolean).join(' ').trim();
  var indicatorView = useMemo(() => /*#__PURE__*/_jsx("svg", {
    viewBox: "25 25 50 50",
    children: /*#__PURE__*/_jsx("circle", {
      cx: "50",
      cy: "50",
      r: "20",
      fill: "none",
      strokeWidth: "5",
      strokeMiterlimit: "10"
    })
  }), []);
  var tipsView = useMemo(() => /*#__PURE__*/_jsx("div", {
    className: [prefixCls + "-tips", fullscreen ? prefixCls + "-fullscreen" : null].filter(Boolean).join(' ').trim(),
    style: {
      color,
      backgroundColor: bgColor
    },
    children: /*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-tips-nested",
      children: [indicator || indicatorView, tip && /*#__PURE__*/_jsx("div", {
        className: [prefixCls + "-text", vertical ? prefixCls + "-vertical" : null].filter(Boolean).join(' ').trim(),
        children: tip
      })]
    })
  }), [fullscreen, bgColor, prefixCls, vertical, tip]);
  return /*#__PURE__*/_jsxs("div", _extends({
    className: cls
  }, otherProps, {
    children: [(loading || fullscreen) && tipsView, children && /*#__PURE__*/React.cloneElement(children, Object.assign({}, children.props, {
      className: [prefixCls + "-warp", loading ? prefixCls + "-blur" : null].filter(Boolean).join(' ').trim()
    }))]
  }));
});
//# sourceMappingURL=index.js.map