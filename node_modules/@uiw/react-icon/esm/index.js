import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["className", "prefixCls", "verticalAlign", "tagName", "color", "type", "spin"];
import React, { useMemo } from 'react';
import svgPaths from '@uiw/icons/fonts/w-icon.json';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
var Icon = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    className,
    prefixCls = 'w-icon',
    verticalAlign = 'middle',
    tagName: TagName = 'span',
    color,
    type,
    spin = false
  } = props,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var renderSVGPaths = useMemo(() => {
    if (!type) {
      return null;
    }

    var svgPathsData = svgPaths;
    var pathStrings = svgPathsData[type] || [];
    return pathStrings.map((d, i) => /*#__PURE__*/_jsx("path", {
      d: d,
      fillRule: "evenodd"
    }, i));
  }, [type]);
  var svg = null;

  if (typeof type === 'string') {
    svg = /*#__PURE__*/_jsx("svg", {
      fill: color,
      viewBox: "0 0 20 20",
      children: renderSVGPaths
    });
  } else if ( /*#__PURE__*/React.isValidElement(type)) {
    svg = /*#__PURE__*/React.cloneElement(type, {
      fill: color
    });
  } else {
    return null;
  }

  others.style = _extends({
    fill: 'currentColor'
  }, others.style);

  var propps = _extends({}, others, {
    className: [prefixCls, className, prefixCls && verticalAlign ? prefixCls + "-" + verticalAlign : null, spin && prefixCls ? prefixCls + "-spin" : null].filter(Boolean).join(' ').trim()
  });

  return /*#__PURE__*/_jsx(TagName, _extends({}, propps, {
    children: svg
  }));
});
export default Icon;
//# sourceMappingURL=index.js.map