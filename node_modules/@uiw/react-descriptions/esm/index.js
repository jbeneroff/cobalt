import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "title", "bordered", "column", "size", "colon", "children", "layout"];
import React from 'react';
import DescriptionsItem from './DescriptionsItem';
import Row from './Row';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from './DescriptionsItem';

var generateChildrenRows = (children, column) => {
  var rows = [];
  var columns = null;
  var leftSpans;
  children.forEach((node, index) => {
    var itemNode = node;

    if (!columns) {
      leftSpans = column;
      columns = [];
      rows.push(columns);
    } // Always set last span to align the end of Descriptions


    var lastItem = index === children.length - 1;

    if (lastItem) {
      itemNode = /*#__PURE__*/React.cloneElement(itemNode, {
        span: leftSpans
      });
    } // Calculate left fill span


    var {
      span = 1
    } = itemNode.props;
    columns.push(itemNode);
    leftSpans -= span;

    if (leftSpans <= 0) {
      columns = null;
    }
  });
  return rows;
};

function InternalDescriptions(props, ref) {
  var {
    prefixCls = 'w-descriptions',
    className,
    title,
    bordered,
    column = 3,
    size,
    colon = true,
    children,
    layout = 'horizontal'
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = [prefixCls, className, prefixCls && layout ? prefixCls + "-" + layout : null, bordered ? prefixCls + "-bordered" : null, size ? prefixCls + "-" + size : null].filter(Boolean).join(' ').trim();
  var cloneChildren = React.Children.toArray(children);
  var childs = generateChildrenRows(cloneChildren, column);
  return /*#__PURE__*/_jsx("div", {
    className: cls,
    ref: ref,
    children: /*#__PURE__*/_jsxs("table", _extends({}, other, {
      children: [title && /*#__PURE__*/_jsx("caption", {
        className: prefixCls + "-title",
        children: title
      }), /*#__PURE__*/_jsx("tbody", {
        children: childs.map((child, index) => /*#__PURE__*/_jsx(Row, {
          prefixCls: prefixCls,
          bordered: bordered,
          colon: colon,
          column: column,
          layout: layout,
          children: child
        }, index))
      })]
    }))
  });
}

var Descriptions = /*#__PURE__*/React.forwardRef(InternalDescriptions);
Descriptions.Item = DescriptionsItem;
export default Descriptions;
//# sourceMappingURL=index.js.map