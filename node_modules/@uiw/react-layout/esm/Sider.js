import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "style", "children", "width", "collapsedWidth", "collapsed", "siderHook"];
import React, { useEffect, useState, useMemo } from 'react';
import { randomid } from '@uiw/utils';
import { LayoutContext } from './Layout';
import { jsx as _jsx } from "react/jsx-runtime";

function Sider(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls = 'w-layout-sider',
    className,
    style,
    children,
    width = 200,
    collapsedWidth = 80,
    collapsed = false,
    siderHook
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [sliderId] = useState("w-layout-" + randomid());
  var [rawWidth, setRawWidth] = useState(collapsed ? collapsedWidth : width);
  useEffect(() => {
    if (siderHook && !!siderHook.addSider) {
      siderHook.addSider(sliderId);
    }

    return () => {
      if (siderHook && !!siderHook.removeSider) {
        siderHook.removeSider(sliderId);
      }
    };
  }, []);
  useMemo(() => {
    setRawWidth(collapsed ? collapsedWidth : width);
  }, [collapsed]);

  var divStyle = _extends({}, style, {
    flex: "0 0 " + rawWidth,
    maxWidth: rawWidth,
    minWidth: rawWidth,
    width: rawWidth
  });

  return /*#__PURE__*/_jsx("div", _extends({
    className: [prefixCls, className].filter(Boolean).join(' ').trim(),
    style: divStyle
  }, other, {
    children: children
  }));
}

export default (function (props) {
  if (props === void 0) {
    props = {};
  }

  return /*#__PURE__*/_jsx(LayoutContext.Consumer, {
    children: context => /*#__PURE__*/_jsx(Sider, _extends({}, props, context))
  });
});
//# sourceMappingURL=Sider.js.map