"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePickerCaption = DatePickerCaption;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("@uiw/utils");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "panelDate", "monthLabel", "onSelected", "todayButton"];

function classnames() {
  for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
    arg[_key] = arguments[_key];
  }

  return [].concat(arg).filter(Boolean).join(' ').trim();
}

function DatePickerCaption(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-datepicker' : _props$prefixCls,
      className = props.className,
      _props$panelDate = props.panelDate,
      panelDate = _props$panelDate === void 0 ? new Date() : _props$panelDate,
      monthLabel = props.monthLabel,
      _props$onSelected = props.onSelected,
      onSelected = _props$onSelected === void 0 ? _utils.noop : _props$onSelected,
      todayButton = props.todayButton,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var renderMonth = (0, _react.useMemo)(function () {
    var month = panelDate.getMonth();
    return monthLabel && monthLabel[month] || month + 1;
  }, [panelDate.toDateString(), monthLabel]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: classnames(prefixCls ? "".concat(prefixCls, "-caption") : null, className)
  }, other), {}, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classnames(prefixCls ? "".concat(prefixCls, "-caption-pane") : null, 'prev'),
      onClick: function onClick() {
        return onSelected('prev');
      }
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classnames(prefixCls ? "".concat(prefixCls, "-caption-pane") : null, 'month'),
      onClick: function onClick() {
        return onSelected('month');
      },
      children: renderMonth
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classnames(prefixCls ? "".concat(prefixCls, "-caption-pane") : null, 'year'),
      onClick: function onClick() {
        return onSelected('year');
      },
      children: panelDate.getFullYear()
    }), todayButton && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classnames(prefixCls ? "".concat(prefixCls, "-caption-today") : null),
      onClick: function onClick() {
        return onSelected('today');
      },
      title: todayButton
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: classnames(prefixCls ? "".concat(prefixCls, "-caption-pane") : null, 'next'),
      onClick: function onClick() {
        return onSelected('next');
      }
    })]
  }));
}
//# sourceMappingURL=DatePickerCaption.js.map