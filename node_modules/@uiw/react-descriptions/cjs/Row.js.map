{
  "version": 3,
  "sources": [
    "../src/Row.tsx"
  ],
  "names": [
    "Row",
    "props",
    "prefixCls",
    "layout",
    "bordered",
    "column",
    "colon",
    "children",
    "handleCell",
    "isHead",
    "map",
    "child",
    "index",
    "length",
    "label",
    "cls"
  ],
  "mappings": ";;;;;;;;;;;;;AAAA;;AAGA;;;;AAUe,SAASA,GAAT,GAAmC;AAAA,MAAtBC,KAAsB,uEAAJ,EAAI;AAChD,MAAQC,SAAR,GAAsED,KAAtE,CAAQC,SAAR;AAAA,MAAmBC,MAAnB,GAAsEF,KAAtE,CAAmBE,MAAnB;AAAA,MAA2BC,QAA3B,GAAsEH,KAAtE,CAA2BG,QAA3B;AAAA,MAAqCC,MAArC,GAAsEJ,KAAtE,CAAqCI,MAArC;AAAA,MAA6CC,KAA7C,GAAsEL,KAAtE,CAA6CK,KAA7C;AAAA,wBAAsEL,KAAtE,CAAoDM,QAApD;AAAA,MAAoDA,QAApD,gCAA+D,EAA/D;;AACA,WAASC,UAAT,CAAoBC,MAApB,EAAsC;AACpC,WAAOF,QAAQ,CAACG,GAAT,CAAa,UAACC,KAAD,EAAQC,KAAR;AAAA,0BAClB,0BAAC,gBAAD,oEACMD,KAAK,CAACV,KADZ;AAEE,QAAA,SAAS,EAAEC,SAFb;AAGE,QAAA,GAAG,EAAEU,KAHP;AAIE,QAAA,MAAM,EAAEP,MAJV;AAKE,QAAA,OAAO,EAAEI,MAAM,GAAG,IAAH,GAAU,IAL3B;AAME,QAAA,UAAU,EAAEF,QAAQ,CAACM,MAAT,GAAkB,CAAlB,KAAwBD,KANtC;AAOE,QAAA,MAAM,EAAET,MAPV;AAQE,QAAA,KAAK,EAAEG,KART;AASE,QAAA,QAAQ,EAAEF;AATZ,UAWGK,MAAM,GAAGE,KAAK,CAACV,KAAN,CAAYa,KAAf,GAAuBH,KAAK,CAACV,KAAN,CAAYM,QAX5C,CADkB;AAAA,KAAb,CAAP;AAeD;;AACD,MAAMQ,GAAG,GAAGb,SAAS,aAAMA,SAAN,YAAwB,EAA7C;AACA,sBACE,sBAAC,eAAD;AAAA,eACGC,MAAM,KAAK,UAAX,iBAAyB;AAAI,MAAA,SAAS,EAAEY,GAAf;AAAA,gBAAqBP,UAAU,CAAC,IAAD;AAA/B,MAD5B,eAEE;AAAI,MAAA,SAAS,EAAEO,GAAf;AAAA,gBAAqBP,UAAU;AAA/B,MAFF;AAAA,IADF;AAMD",
  "sourcesContent": [
    "import React, { Fragment } from 'react';\nimport { IProps } from '@uiw/utils';\nimport { DescriptionsItemProps } from './DescriptionsItem';\nimport Cell from './Cell';\n\nexport interface RowProps extends IProps {\n  children?: React.ReactElement<DescriptionsItemProps>[];\n  bordered?: boolean;\n  layout?: 'horizontal' | 'vertical';\n  colon?: boolean;\n  column?: number;\n}\n\nexport default function Row(props: RowProps = {}) {\n  const { prefixCls, layout, bordered, column, colon, children = [] } = props;\n  function handleCell(isHead?: boolean) {\n    return children.map((child, index) => (\n      <Cell\n        {...child.props}\n        prefixCls={prefixCls}\n        key={index}\n        column={column}\n        tagName={isHead ? 'th' : 'td'}\n        isLastCell={children.length - 1 === index}\n        layout={layout}\n        colon={colon}\n        bordered={bordered}\n      >\n        {isHead ? child.props.label : child.props.children}\n      </Cell>\n    ));\n  }\n  const cls = prefixCls ? `${prefixCls}-row` : '';\n  return (\n    <Fragment>\n      {layout === 'vertical' && <tr className={cls}>{handleCell(true)}</tr>}\n      <tr className={cls}>{handleCell()}</tr>\n    </Fragment>\n  );\n}\n"
  ]
}