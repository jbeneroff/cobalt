import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "disabled", "overlayProps", "children", "collapse", "inlineIndent", "inlineCollapsed"];
import React, { useMemo, useState } from 'react';
import OverlayTrigger from '@uiw/react-overlay-trigger';
import Icon from '@uiw/react-icon';
import MenuItem from './MenuItem';
import Menu from './Menu';
import "./style/submenu.css";
import { jsx as _jsx } from "react/jsx-runtime";

function checkedMenuItem(node) {
  var isCheck = false;

  if (node) {
    // eslint-disable-next-line
    do {
      if (!node.dataset.menu) {
        isCheck = true;
      }

      if (node.dataset.menu && /^(subitem|divider)$/.test(node.dataset.menu)) {
        isCheck = false;
      }
    } while (!node.dataset.menu && (node = node.parentNode));
  }

  return isCheck;
}

function IconView(_ref) {
  var {
    prefixCls,
    collapse,
    isOpen
  } = _ref;
  return useMemo(() => /*#__PURE__*/_jsx(Icon, {
    type: "caret-right",
    className: [prefixCls ? prefixCls + "-collapse-icon" : null, !collapse && isOpen ? 'w-open' : null, !collapse && !isOpen ? 'w-close' : null].filter(Boolean).join(' ').trim()
  }), [prefixCls, collapse, isOpen]);
}

var SubMenu = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-menu-subitem',
    className,
    disabled,
    overlayProps = {},
    children,
    collapse = false,
    inlineIndent
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var overlayTriggerProps = {};
  var menuProps = {
    bordered: true,
    children,
    inlineIndent,
    className: [prefixCls ? prefixCls + "-overlay" : null].filter(Boolean).join(' ').trim()
  };
  var popupRef = React.useRef(null);
  var [isOpen, setIsOpen] = useState(false);
  useMemo(() => {
    setIsOpen(false);
  }, [collapse]);

  function onClick(e) {
    var target = e.currentTarget;
    var related = e.relatedTarget || e.nativeEvent.target;
    if (target.children.length < 1) return;

    if (checkedMenuItem(related)) {
      if (popupRef.current) {
        popupRef.current.hide();
      }
    }
  }

  function onExit(node) {
    node.style.height = node.scrollHeight + "px";
    setIsOpen(false);
  }

  function onExiting(node) {
    node.style.height = '0px';
  }

  function onEnter(node) {
    node.style.height = '1px';
    setIsOpen(true);
  }

  function onEntering(node) {
    node.style.height = node.scrollHeight + "px";
  }

  function onEntered(node) {
    node.style.height = 'initial';
  }

  if (!collapse) {
    delete menuProps.onClick;
    menuProps.bordered = false;
    overlayTriggerProps.className = prefixCls + "-collapse";
    overlayTriggerProps.appear = false;
    overlayTriggerProps.isOutside = true;
    overlayTriggerProps.isClickOutside = false;
    overlayTriggerProps.unmountOnExit = false;
    overlayTriggerProps.trigger = 'click';
    overlayTriggerProps.transitionName = "" + prefixCls;
    overlayTriggerProps.onExit = onExit;
    overlayTriggerProps.onExiting = onExiting; // overlayTriggerProps.onEnter = onEnter;

    overlayTriggerProps.onEntered = onEntered;
    overlayTriggerProps.onEntering = onEntering;
  } else {
    overlayTriggerProps.className = prefixCls + "-popup";
    overlayTriggerProps.trigger = 'hover'; // overlayTriggerProps.usePortal = true;

    menuProps.onClick = onClick;
  }

  return /*#__PURE__*/_jsx("li", {
    "data-menu": "subitem",
    ref: ref,
    children: /*#__PURE__*/_jsx(OverlayTrigger, _extends({
      placement: "rightTop",
      autoAdjustOverflow: true,
      disabled: disabled,
      isOpen: isOpen,
      usePortal: false,
      isOutside: true
    }, overlayTriggerProps, overlayProps, {
      ref: popupRef,
      overlay: /*#__PURE__*/_jsx(Menu, _extends({}, menuProps, {
        style: !collapse ? {
          paddingLeft: inlineIndent
        } : {}
      })),
      children: /*#__PURE__*/_jsx(MenuItem, _extends({}, other, {
        ref: null,
        disabled: disabled,
        isSubMenuItem: true,
        addonAfter: /*#__PURE__*/_jsx(IconView, {
          collapse: collapse,
          prefixCls: prefixCls,
          isOpen: isOpen
        }),
        className: [prefixCls ? prefixCls + "-title" : null, !collapse ? prefixCls + "-collapse-title" : null, className].filter(Boolean).join(' ').trim()
      }))
    }))
  });
});
SubMenu.displayName = 'uiw.SubMenu';
export default SubMenu;
//# sourceMappingURL=SubMenu.js.map