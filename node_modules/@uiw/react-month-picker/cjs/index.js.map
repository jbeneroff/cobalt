{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "MONTH_LABEL",
    "MonthPicker",
    "props",
    "prefixCls",
    "format",
    "onChange",
    "className",
    "popoverProps",
    "pickerCaptionProps",
    "allowClear",
    "monthLabel",
    "inputProps",
    "isOpen",
    "setIsOpen",
    "Date",
    "panelDate",
    "setPanelDate",
    "type",
    "setType",
    "value",
    "date",
    "setDate",
    "addonAfter",
    "size",
    "handleSelectedDate",
    "num",
    "paging",
    "curPanelDate",
    "curDate",
    "open",
    "captionType",
    "test",
    "year",
    "getFullYear",
    "setFullYear",
    "month",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport Input, { InputProps } from '@uiw/react-input';\nimport Popover, { PopoverProps } from '@uiw/react-popover';\nimport { IProps } from '@uiw/utils';\nimport Button from '@uiw/react-button';\nimport formatter from '@uiw/formatter';\nimport {\n  DatePickerMonth,\n  DatePickerYear,\n  DatePickerCaption,\n  DatePickerCaptionProps,\n} from '@uiw/react-date-picker';\nimport './style/index.less';\n\nexport interface MonthPickerProps<T>\n  extends IProps,\n    Omit<InputProps<T>, 'value' | 'onChange'> {\n  popoverProps?: PopoverProps;\n  pickerCaptionProps?: DatePickerCaptionProps;\n  value?: Date | string;\n  format?: string;\n  monthLabel?: string[];\n  allowClear?: boolean;\n  onChange?: (date?: Date, formatDate?: string) => void;\n}\n\nconst MONTH_LABEL = [\n  '一月',\n  '二月',\n  '三月',\n  '四月',\n  '五月',\n  '六月',\n  '七月',\n  '八月',\n  '九月',\n  '十月',\n  '十一月',\n  '十二月',\n];\n\nexport default function MonthPicker<T>(props: MonthPickerProps<T>) {\n  const {\n    prefixCls = 'w-monthpicker',\n    format = 'YYYY/MM',\n    onChange = () => {},\n    className,\n    popoverProps,\n    pickerCaptionProps = {},\n    allowClear = true,\n    monthLabel = MONTH_LABEL,\n    ...inputProps\n  } = props;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [panelDate, setPanelDate] = useState(new Date());\n  const [type, setType] = useState('month');\n  const [date, setDate] = useState(props.value);\n\n  useEffect(() => setDate(props.value), [props.value]);\n\n  inputProps.value = useMemo(\n    () =>\n      typeof date === 'string' ? date : date ? formatter(format, date) : '',\n    [format, date],\n  );\n\n  if (allowClear && inputProps.value) {\n    inputProps.addonAfter = (\n      <Button\n        className={`${prefixCls}-close-btn`}\n        icon=\"close\"\n        onClick={() => {\n          setDate('');\n          onChange && onChange();\n        }}\n        size={inputProps.size}\n        basic\n        type=\"light\"\n      />\n    );\n  }\n\n  function handleSelectedDate(\n    type: 'setMonth' | 'setFullYear',\n    num: number,\n    paging?: boolean,\n  ) {\n    const curPanelDate = new Date(new Date(panelDate)[type](num));\n    if (!paging) {\n      setType('month');\n    }\n    const curDate = formatter(format, new Date(curPanelDate));\n    setDate(curDate);\n    setPanelDate(curPanelDate);\n    onChange && onChange(curPanelDate, curDate);\n    if (type === 'setMonth') {\n      setIsOpen(false);\n    }\n  }\n\n  return (\n    <Popover\n      trigger=\"focus\"\n      placement=\"bottomLeft\"\n      autoAdjustOverflow\n      isOpen={isOpen}\n      {...popoverProps}\n      onVisibleChange={(open) => setIsOpen(open)}\n      content={\n        <div className={`${prefixCls}-popover`}>\n          <DatePickerCaption\n            panelDate={panelDate}\n            monthLabel={monthLabel}\n            {...pickerCaptionProps}\n            onSelected={(captionType) => {\n              if (/^(month|year)$/.test(captionType as string)) {\n                setType(captionType);\n              } else {\n                const year = new Date(panelDate).getFullYear();\n                const curPanelDate = new Date(\n                  new Date(panelDate).setFullYear(\n                    type === 'next' ? year + 1 : year - 1,\n                  ),\n                );\n                setPanelDate(curPanelDate);\n              }\n            }}\n          />\n          {type === 'month' && (\n            <DatePickerMonth\n              panelDate={panelDate}\n              monthLabel={monthLabel}\n              onSelected={(month, paging) =>\n                handleSelectedDate('setMonth', month, paging)\n              }\n            />\n          )}\n          {type === 'year' && (\n            <DatePickerYear\n              panelDate={panelDate}\n              onSelected={(year, paging) =>\n                handleSelectedDate('setFullYear', year, paging)\n              }\n            />\n          )}\n        </div>\n      }\n    >\n      <Input\n        placeholder=\"请输入日期\"\n        readOnly\n        {...(inputProps as any)}\n        className={[prefixCls, className].filter(Boolean).join(' ').trim()}\n      />\n    </Popover>\n  );\n}\n"
  ]
}