"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Tree;
exports.getChildKeys = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("@uiw/utils");

var _TreeNode = _interopRequireDefault(require("./TreeNode"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "icon", "data", "openKeys", "selectedKeys", "defaultExpandAll", "showLine", "iconAnimation", "isSelected", "checkStrictly", "multiple", "onExpand", "onSelected", "className", "autoExpandParent", "renderTitle"];

/**
 * a contains b
 * @param {Array} a
 * @param {Array} b
 */
var isContained = function isContained(a, b) {
  if (!(a instanceof Array) || !(b instanceof Array)) return false;
  if (a.length < b.length) return false;
  var aStr = a.toString();

  for (var i = 0, len = b.length; i < len; i += 1) {
    if (aStr.indexOf(b[i]) === -1) return false;
  }

  return true;
};

var getChildKeys = function getChildKeys() {
  var childs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  childs.forEach(function (item) {
    result.push(item.key);

    if (item.children && item.children.length > 0) {
      result = result.concat(getChildKeys(item.children));
    }
  });
  return result;
};

exports.getChildKeys = getChildKeys;

var getParentKeys = function getParentKeys() {
  var childs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (childs.key) {
    result.push(childs.key);
  }

  if (childs.parent) {
    result = getParentKeys(childs.parent, result);
  }

  return result;
};

var getParentSelectKeys = function getParentSelectKeys() {
  var childs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var selectedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (childs.key && childs.children && isContained(selectedKeys, getChildKeys(childs.children))) {
    result.push(childs.key);

    if (childs.parent && !childs.parent.parent) {
      if (isContained(selectedKeys, getChildKeys(childs.children))) {
        selectedKeys = selectedKeys.concat(result);
      }

      if (isContained(selectedKeys, getChildKeys(childs.parent.children))) {
        result.push(childs.parent.key);
      }
    }
  }

  if (childs.parent) {
    result = getParentSelectKeys(childs.parent, selectedKeys, result);
  }

  return result;
};

function Tree(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-tree' : _props$prefixCls,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? 'caret-right' : _props$icon,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$openKeys = props.openKeys,
      openKeys = _props$openKeys === void 0 ? [] : _props$openKeys,
      _props$selectedKeys = props.selectedKeys,
      selectedKeys = _props$selectedKeys === void 0 ? [] : _props$selectedKeys,
      _props$defaultExpandA = props.defaultExpandAll,
      defaultExpandAll = _props$defaultExpandA === void 0 ? false : _props$defaultExpandA,
      _props$showLine = props.showLine,
      showLine = _props$showLine === void 0 ? false : _props$showLine,
      _props$iconAnimation = props.iconAnimation,
      iconAnimation = _props$iconAnimation === void 0 ? true : _props$iconAnimation,
      _props$isSelected = props.isSelected,
      isSelected = _props$isSelected === void 0 ? true : _props$isSelected,
      _props$checkStrictly = props.checkStrictly,
      checkStrictly = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
      _props$multiple = props.multiple,
      multiple = _props$multiple === void 0 ? false : _props$multiple,
      _props$onExpand = props.onExpand,
      onExpand = _props$onExpand === void 0 ? _utils.noop : _props$onExpand,
      _props$onSelected = props.onSelected,
      onSelected = _props$onSelected === void 0 ? _utils.noop : _props$onSelected,
      className = props.className,
      autoExpandParent = props.autoExpandParent,
      renderTitle = props.renderTitle,
      elementProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(openKeys),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      curOpenKeys = _useState2[0],
      setCurOpenKeys = _useState2[1];

  var _useState3 = (0, _react.useState)(selectedKeys),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      curSelectedKeys = _useState4[0],
      setCurSelectedKeys = _useState4[1]; // useEffect(() => setCurOpenKeys(openKeys), [openKeys]);
  // useEffect(() => setCurSelectedKeys(selectedKeys), [selectedKeys]);


  (0, _react.useEffect)(function () {
    var arrOpenKeys = getChildKeys(data);

    if (defaultExpandAll) {
      setCurOpenKeys(arrOpenKeys);
    }
  }, []);
  var cls = [className, prefixCls, showLine ? "".concat(prefixCls, "-line") : null].filter(Boolean).join(' ').trim();

  function onItemClick(item, evn) {
    if (!item.children) {
      return;
    } // const { onExpand } = this.props;
    // const { openKeys } = this.state;


    var currentKeys = (0, _toConsumableArray2["default"])(curOpenKeys);
    var key = currentKeys.find(function (v) {
      return v === item.key;
    });
    var cls = evn.currentTarget.className.replace(/(\s)open/g, '');
    var expanded = false;

    if (!key && item.key) {
      currentKeys.push(item.key);
      evn.currentTarget.className = [cls, 'open'].filter(Boolean).join(' ').trim();
      expanded = true;
    } else {
      currentKeys = currentKeys.filter(function (v) {
        return v !== item.key;
      });
      evn.currentTarget.className = cls;
    }

    setCurOpenKeys(currentKeys);
    onExpand && onExpand(item.key, expanded, item, evn);
  }

  function onItemSelected(item, evn) {
    // const { onSelected, multiple, checkStrictly } = this.props;
    var selKeys = (0, _toConsumableArray2["default"])(curSelectedKeys);
    var findKey = selKeys.find(function (v) {
      return v === item.key;
    });
    var selected = false;

    if (!findKey) {
      selected = true;
      selKeys.push(item.key);
    } else {
      selKeys = selKeys.filter(function (v) {
        return v !== item.key;
      });
    }

    if (checkStrictly) {
      if (!findKey) {
        selKeys = selKeys.concat(getChildKeys(item.children).filter(function (val) {
          return selKeys.indexOf(val) === -1;
        }));
        selKeys = selKeys.concat(getParentSelectKeys(item, selKeys));
        selKeys = Array.from(new Set(selKeys)); // Remove duplicates.
      } else {
        selKeys = selKeys.filter(function (val) {
          return getChildKeys(item.children).indexOf(val) === -1;
        });
        selKeys = selKeys.filter(function (val) {
          return getParentKeys(item.parent).indexOf(val) === -1;
        });
      }
    }

    if (!multiple) {
      selKeys = !findKey ? [item.key] : [];
    }

    setCurSelectedKeys(selKeys);
    onSelected && onSelected(selKeys, item.key, selected, item, evn);
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: cls
  }, elementProps), {}, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TreeNode["default"], {
      icon: icon,
      iconAnimation: iconAnimation,
      isSelected: isSelected,
      openKeys: curOpenKeys,
      selectedKeys: curSelectedKeys,
      prefixCls: prefixCls,
      renderTitle: renderTitle,
      onItemClick: onItemClick,
      onItemSelected: onItemSelected,
      data: data,
      level: 1
    })
  }));
}
//# sourceMappingURL=index.js.map