{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useState",
    "Popover",
    "Input",
    "Button",
    "formatter",
    "TimePickerTime",
    "TimePicker",
    "props",
    "prefixCls",
    "className",
    "disabled",
    "format",
    "popoverProps",
    "allowClear",
    "onChange",
    "disabledHours",
    "disabledMinutes",
    "disabledSeconds",
    "hideDisabled",
    "precision",
    "inputProps",
    "date",
    "setDate",
    "value",
    "timeProps",
    "inputValue",
    "datePickerTime",
    "Date",
    "_props",
    "addonAfter",
    "undefined",
    "size",
    "type",
    "num",
    "disableds",
    "currentDate",
    "dataStr",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useState } from 'react';\nimport Popover, { PopoverProps } from '@uiw/react-popover';\nimport Input, { InputProps } from '@uiw/react-input';\nimport Button from '@uiw/react-button';\nimport { IProps } from '@uiw/utils';\nimport formatter from '@uiw/formatter';\nimport { TimePickerTime, TimePickerTimeProps } from './Time';\nimport './style/index.less';\n\nexport * from './Panel';\nexport * from './Time';\n\nexport interface TimePickerProps<T>\n  extends IProps,\n    Omit<InputProps<T>, 'onChange' | 'value'> {\n  value?: Date;\n  format?: string;\n  popoverProps?: PopoverProps;\n  disabledHours?: TimePickerTimeProps['disabledHours'];\n  precision?: TimePickerTimeProps['precision'];\n  disabledMinutes?: TimePickerTimeProps['disabledMinutes'];\n  disabledSeconds?: TimePickerTimeProps['disabledSeconds'];\n  hideDisabled?: TimePickerTimeProps['hideDisabled'];\n  allowClear?: boolean;\n  disabled?: boolean;\n  onChange?: (\n    dataStr?: string,\n    date?: Date | '',\n    type?: TimePickerTimeProps['type'],\n    num?: number,\n    disableds?: number[],\n  ) => void;\n}\n\nexport default function TimePicker<T>(props: TimePickerProps<T>) {\n  const {\n    prefixCls = 'w-timepicker',\n    className,\n    disabled,\n    value,\n    format = 'HH:mm:ss',\n    popoverProps,\n    allowClear = true,\n    onChange,\n    disabledHours,\n    disabledMinutes,\n    disabledSeconds,\n    hideDisabled,\n    precision,\n    ...inputProps\n  } = props;\n  const [date, setDate] = useState(props.value);\n  useEffect(() => setDate(props.value), [props.value]);\n  const timeProps = {\n    disabledHours,\n    disabledMinutes,\n    disabledSeconds,\n    hideDisabled,\n    precision,\n  };\n  const inputValue = date ? formatter(format, date) : '';\n  const datePickerTime = date || new Date();\n  const _props: InputProps<T> = { ...inputProps, value: inputValue };\n  if (allowClear && inputValue !== '' && !!inputValue) {\n    _props.addonAfter = (\n      <Button\n        className={`${prefixCls}-close-btn`}\n        icon=\"close\"\n        disabled={props.disabled}\n        onClick={() => {\n          setDate(undefined);\n          onChange && onChange();\n        }}\n        size={props.size}\n        basic\n        type=\"light\"\n      />\n    );\n  }\n  return (\n    <Popover\n      trigger=\"focus\"\n      placement=\"bottomLeft\"\n      autoAdjustOverflow\n      visibleArrow={false}\n      {...popoverProps}\n      content={\n        <TimePickerTime\n          className={`${prefixCls}-popover`}\n          {...timeProps}\n          date={datePickerTime}\n          onSelected={(type, num, disableds, currentDate) => {\n            setDate(new Date(currentDate!));\n            const dataStr = currentDate ? formatter(format, currentDate) : '';\n            onChange && onChange(dataStr, currentDate, type, num, disableds);\n          }}\n        />\n      }\n    >\n      <Input\n        placeholder=\"请选择时间\"\n        readOnly\n        disabled={disabled}\n        {..._props}\n        className={[`${prefixCls}-input`, className]\n          .filter(Boolean)\n          .join(' ')\n          .trim()}\n      />\n    </Popover>\n  );\n}\n"
  ]
}