{
  "version": 3,
  "sources": [
    "../src/Panel.tsx"
  ],
  "names": [
    "React",
    "CSSTransition",
    "Icon",
    "Panel",
    "props",
    "prefixCls",
    "className",
    "icon",
    "children",
    "isActive",
    "onItemClick",
    "disabled",
    "showArrow",
    "header",
    "extra",
    "resetProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "iconRender",
    "childStyle",
    "child",
    "Object",
    "assign",
    "style",
    "transitionDuration",
    "getInstance",
    "status",
    "instance",
    "height",
    "scrollHeight",
    "cloneElement",
    "ref",
    "e"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAGA,OAAOC,IAAP,MAAgC,iBAAhC;;;AAYA,eAAe,SAASC,KAAT,CAAkBC,KAAlB,EAAqD;AAAA,MAAnCA,KAAmC;AAAnCA,IAAAA,KAAmC,GAAJ,EAAI;AAAA;;AAClE,MAAM;AACJC,IAAAA,SAAS,GAAG,YADR;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,IAAI,GAAG,MAHH;AAIJC,IAAAA,QAAQ,EAARA,SAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,QAAQ,GAAG,KAPP;AAQJC,IAAAA,SARI;AASJC,IAAAA,MATI;AAUJC,IAAAA;AAVI,MAYFV,KAZJ;AAAA,MAWKW,UAXL,iCAYIX,KAZJ;;AAaA,MAAMY,GAAG,GAAG,CACVX,SAAS,GAAMA,SAAN,aAAyB,IADxB,EAEVC,SAFU,EAGVG,QAAQ,GAAMJ,SAAN,eAA2B,IAHzB,EAIVM,QAAQ,GAAMN,SAAN,iBAA6B,IAJ3B,EAMTY,MANS,CAMFC,OANE,EAOTC,IAPS,CAOJ,GAPI,EAQTC,IARS,EAAZ;AASA,MAAMC,UAAU,GAAG,OAAOd,IAAP,KAAgB,QAAhB,gBAA2B,KAAC,IAAD;AAAM,IAAA,IAAI,EAAEA;AAAZ,IAA3B,GAAkDA,IAArE;;AAEA,MAAMe,UAAU,GAAIC,KAAD,IAA+B;AAChD,WAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAK,IAAIA,KAAK,CAACnB,KAAf,GAAuBmB,KAAK,CAACnB,KAAN,CAAYsB,KAAnC,GAA2C,EAA7D,EAAiE;AACtEC,MAAAA,kBAAkB,EAAE;AADkD,KAAjE,CAAP;AAGD,GAJD;;AAKA,WAASC,WAAT,CAAqBC,MAArB,EAA+CC,QAA/C,EAA8D;AAC5D,QAAI,CAACA,QAAL,EAAe;AACb;AACD;;AACD,QAAID,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,SAAtC,EAAiD;AAC/CC,MAAAA,QAAQ,CAACJ,KAAT,CAAeK,MAAf,GAAwB,KAAxB;AACD;;AACD,QAAIF,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,UAAvC,EAAmD;AACjDC,MAAAA,QAAQ,CAACJ,KAAT,CAAeK,MAAf,GAA2BD,QAAQ,CAACE,YAApC;AACD;AACF;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEhB;AAAhB,KAAyBD,UAAzB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAKV,SAAL,YAAd;AAAuC,MAAA,OAAO,EAAEK,WAAhD;AAAA,iBACGE,SAAS,IAAIS,UADhB,eAEE;AAAM,QAAA,SAAS,EAAKhB,SAAL,WAAf;AAAA,kBAAwCQ;AAAxC,QAFF,EAGGC,KAAK,iBAAI;AAAK,QAAA,SAAS,EAAKT,SAAL,WAAd;AAAA,kBAAuCS;AAAvC,QAHZ;AAAA,MADF,eAME,KAAC,aAAD;AACE,MAAA,EAAE,EAAEL,QADN;AAEE,MAAA,aAAa,EAAE,KAFjB;AAGE,MAAA,OAAO,EAAE,GAHX;AAIE,MAAA,UAAU,EAAKJ,SAAL,WAJZ;AAAA,gBAMIwB,MAAD,iBACC7B,KAAK,CAACiC,YAAN,eAAmB;AAAA,kBAAMzB;AAAN,QAAnB,EAA0C;AACxCF,QAAAA,SAAS,EAAKD,SAAL,WAD+B;AAExCqB,QAAAA,KAAK,EAAEJ,UAAU,CAACd,SAAD,CAFuB;AAGxC0B,QAAAA,GAAG,EAAGC,CAAD,IAAYP,WAAW,CAACC,MAAD,EAASM,CAAT;AAHY,OAA1C;AAPJ,MANF;AAAA,KADF;AAuBD",
  "sourcesContent": [
    "import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { TransitionStatus } from 'react-transition-group/Transition';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport Icon, { IconProps } from '@uiw/react-icon';\n\nexport interface CollapsePanelProps<T> extends IProps, HTMLDivProps {\n  disabled?: boolean;\n  showArrow?: boolean;\n  isActive?: boolean;\n  header?: React.ReactNode;\n  icon?: IconProps<T>['type'];\n  extra?: React.ReactNode;\n  onItemClick?: (evn: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport default function Panel<T>(props: CollapsePanelProps<T> = {}) {\n  const {\n    prefixCls = 'w-collapse',\n    className,\n    icon = 'down',\n    children,\n    isActive,\n    onItemClick,\n    disabled = false,\n    showArrow,\n    header,\n    extra,\n    ...resetProps\n  } = props;\n  const cls = [\n    prefixCls ? `${prefixCls}-item` : null,\n    className,\n    isActive ? `${prefixCls}-active` : null,\n    disabled ? `${prefixCls}-disabled` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  const iconRender = typeof icon === 'string' ? <Icon type={icon} /> : icon;\n\n  const childStyle = (child: React.ReactElement) => {\n    return Object.assign({}, child && child.props ? child.props.style : {}, {\n      transitionDuration: '300ms',\n    });\n  };\n  function getInstance(status: TransitionStatus, instance: any) {\n    if (!instance) {\n      return;\n    }\n    if (status === 'exited' || status === 'exiting') {\n      instance.style.height = '1px';\n    }\n    if (status === 'entered' || status === 'entering') {\n      instance.style.height = `${instance.scrollHeight}px`;\n    }\n  }\n  return (\n    <div className={cls} {...resetProps}>\n      <div className={`${prefixCls}-header`} onClick={onItemClick}>\n        {showArrow && iconRender}\n        <span className={`${prefixCls}-title`}>{header}</span>\n        {extra && <div className={`${prefixCls}-extra`}>{extra}</div>}\n      </div>\n      <CSSTransition\n        in={isActive}\n        unmountOnExit={false}\n        timeout={300}\n        classNames={`${prefixCls}-panel`}\n      >\n        {(status: TransitionStatus) =>\n          React.cloneElement(<div>{children}</div>, {\n            className: `${prefixCls}-panel`,\n            style: childStyle(children as React.ReactElement),\n            ref: (e: any) => getInstance(status, e),\n          })\n        }\n      </CSSTransition>\n    </div>\n  );\n}\n"
  ]
}