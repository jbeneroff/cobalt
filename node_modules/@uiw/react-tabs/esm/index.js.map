{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useState",
    "useRef",
    "Pane",
    "Tabs",
    "props",
    "prefixCls",
    "className",
    "children",
    "type",
    "onTabClick",
    "elementProps",
    "activeKey",
    "setActiveKey",
    "slideStyle",
    "setSlideStyle",
    "width",
    "left",
    "activeItem",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "calcSlideStyle",
    "current",
    "clientWidth",
    "offsetLeft",
    "Children",
    "map",
    "item",
    "key",
    "divProps",
    "disabled",
    "label",
    "onClick",
    "e",
    "node",
    "cloneElement",
    "Object",
    "assign"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useState, useRef } from 'react';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport Pane from './Pane';\nimport './style/index.less';\n\nexport * from './Pane';\n\nTabs.Pane = Pane;\n\nexport interface TabsProps extends IProps, HTMLDivProps {\n  prefixCls?: string;\n  activeKey?: string;\n  type?: 'default' | 'line' | 'card';\n  children?: React.ReactNode;\n  onTabClick?: (\n    key: string,\n    item: React.ReactElement,\n    e: React.MouseEvent,\n  ) => void;\n}\n\nexport default function Tabs(props: TabsProps) {\n  const {\n    prefixCls = 'w-tabs',\n    className,\n    children,\n    type = 'default',\n    activeKey: _,\n    onTabClick,\n    ...elementProps\n  } = props;\n  const [activeKey, setActiveKey] = useState(props.activeKey);\n  const [slideStyle, setSlideStyle] = useState({ width: 0, left: 0 });\n  const activeItem = useRef<HTMLDivElement | undefined>();\n  const cls = [prefixCls, className, type ? `${prefixCls}-${type}` : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useEffect(() => setActiveKey(props.activeKey), [props.activeKey]);\n  useEffect(() => calcSlideStyle(), [activeKey]);\n\n  function calcSlideStyle() {\n    if (activeItem.current && type === 'line') {\n      setSlideStyle({\n        width: activeItem.current.clientWidth,\n        left: activeItem.current.offsetLeft,\n      });\n    }\n  }\n\n  return (\n    <div className={cls} {...elementProps}>\n      <div className={`${prefixCls}-bar`}>\n        <div className={`${prefixCls}-nav`}>\n          {React.Children.map(\n            children as React.ReactElement[],\n            (item: React.ReactElement, key: number) => {\n              if (!item) {\n                return null;\n              }\n              const divProps: HTMLDivProps = {\n                className: [\n                  `${prefixCls}-item`,\n                  item.key === activeKey ? 'active' : null,\n                  item.props.disabled ? 'disabled' : null,\n                ]\n                  .filter(Boolean)\n                  .join(' ')\n                  .trim(),\n                children: item.props.label,\n              };\n              if (!item.props.disabled) {\n                divProps.onClick = (e: React.MouseEvent) => {\n                  setActiveKey(item.key as string);\n                  onTabClick && onTabClick(item.key as string, item, e);\n                  calcSlideStyle();\n                };\n              }\n              return (\n                <div\n                  key={key}\n                  ref={(node) => {\n                    if (node && item.key === activeKey) {\n                      activeItem.current = node;\n                    }\n                  }}\n                  {...divProps}\n                />\n              );\n            },\n          )}\n        </div>\n        <div style={slideStyle} className={`${prefixCls}-slide`} />\n      </div>\n      {React.Children.map(children, (item: any) => {\n        if (!item || activeKey !== item.key) {\n          return null;\n        }\n        return React.cloneElement(item, Object.assign({}, item.props, {}));\n      })}\n    </div>\n  );\n}\n"
  ]
}