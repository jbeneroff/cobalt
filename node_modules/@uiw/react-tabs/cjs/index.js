"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports["default"] = Tabs;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _Pane = _interopRequireWildcard(require("./Pane"));

Object.keys(_Pane).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Pane[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Pane[key];
    }
  });
});

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "children", "type", "activeKey", "onTabClick"];
Tabs.Pane = _Pane["default"];

function Tabs(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-tabs' : _props$prefixCls,
      className = props.className,
      children = props.children,
      _props$type = props.type,
      type = _props$type === void 0 ? 'default' : _props$type,
      _ = props.activeKey,
      onTabClick = props.onTabClick,
      elementProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(props.activeKey),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      activeKey = _useState2[0],
      setActiveKey = _useState2[1];

  var _useState3 = (0, _react.useState)({
    width: 0,
    left: 0
  }),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      slideStyle = _useState4[0],
      setSlideStyle = _useState4[1];

  var activeItem = (0, _react.useRef)();
  var cls = [prefixCls, className, type ? "".concat(prefixCls, "-").concat(type) : null].filter(Boolean).join(' ').trim();
  (0, _react.useEffect)(function () {
    return setActiveKey(props.activeKey);
  }, [props.activeKey]);
  (0, _react.useEffect)(function () {
    return calcSlideStyle();
  }, [activeKey]);

  function calcSlideStyle() {
    if (activeItem.current && type === 'line') {
      setSlideStyle({
        width: activeItem.current.clientWidth,
        left: activeItem.current.offsetLeft
      });
    }
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: cls
  }, elementProps), {}, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "".concat(prefixCls, "-bar"),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "".concat(prefixCls, "-nav"),
        children: _react["default"].Children.map(children, function (item, key) {
          if (!item) {
            return null;
          }

          var divProps = {
            className: ["".concat(prefixCls, "-item"), item.key === activeKey ? 'active' : null, item.props.disabled ? 'disabled' : null].filter(Boolean).join(' ').trim(),
            children: item.props.label
          };

          if (!item.props.disabled) {
            divProps.onClick = function (e) {
              setActiveKey(item.key);
              onTabClick && onTabClick(item.key, item, e);
              calcSlideStyle();
            };
          }

          return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])({
            ref: function ref(node) {
              if (node && item.key === activeKey) {
                activeItem.current = node;
              }
            }
          }, divProps), key);
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: slideStyle,
        className: "".concat(prefixCls, "-slide")
      })]
    }), _react["default"].Children.map(children, function (item) {
      if (!item || activeKey !== item.key) {
        return null;
      }

      return /*#__PURE__*/_react["default"].cloneElement(item, Object.assign({}, item.props, {}));
    })]
  }));
}
//# sourceMappingURL=index.js.map