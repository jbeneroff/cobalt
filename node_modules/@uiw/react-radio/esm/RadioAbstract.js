import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "type", "disabled", "value", "className", "style", "children", "size", "checked", "onChange"];
import React, { useState, useMemo } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var RadioAbstract = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-radio',
    type = 'radio',
    disabled = false,
    value = '',
    className,
    style,
    children,
    size,
    checked: prChecked = false,
    onChange
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [checked, setChecked] = useState(prChecked);
  var [prevChecked, setPrevChecked] = useState();

  if (prChecked !== prevChecked) {
    setPrevChecked(prChecked);
  }

  useMemo(() => {
    if (prChecked !== prevChecked) {
      setChecked(prChecked);
    }
  }, [prevChecked]);
  var cls = [prefixCls, className, disabled ? 'disabled' : null, size ? prefixCls + "-" + size : null].filter(Boolean).join(' ').trim();
  useMemo(() => {
    if (checked !== props.checked) {
      setChecked(!!props.checked);
    }
  }, [props.checked]);

  function handleChange(e) {
    e.persist();
    setChecked(e.target.checked);
    onChange && onChange(e);
  }

  var label = children || value;
  return /*#__PURE__*/_jsxs("label", {
    className: cls,
    style,
    children: [/*#__PURE__*/_jsx("input", _extends({}, _extends({}, other, {
      type,
      disabled,
      value
    }), {
      checked: checked,
      onChange: handleChange,
      ref: ref
    })), label && /*#__PURE__*/_jsx("div", {
      className: prefixCls + "-text",
      children: label
    })]
  });
});
//# sourceMappingURL=RadioAbstract.js.map