import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["className", "prefixCls", "alignment", "size", "total", "pageSize", "current", "onChange", "divider"];
import React, { useEffect, useMemo, useState } from 'react';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
export default function Pagination(props) {
  var {
    className,
    prefixCls = 'w-pagination',
    alignment = 'left',
    size = 'default',
    total = 0,
    pageSize = 10,
    // The number of pages displayed.
    current: currentNumber = 1,
    onChange = () => null,
    divider
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [current, setCurrent] = useState(currentNumber);
  useEffect(() => setCurrent(currentNumber), [currentNumber]);
  var cls = [prefixCls, className, divider ? 'divider' : null, size].filter(Boolean).join(' ').trim();
  var initPageSoure = useMemo(() => {
    var data = [{
      type: 'prev',
      disabled: current === 1
    }];
    var count = Math.ceil(total / pageSize);
    var itemCount = count <= 5 ? count : 5;
    var num = 0;
    var basic = 0;

    if (current > 3 && count > 5) {
      data.push({
        label: 1
      });
    }

    if (current > 4 && count > 6) {
      data.push({
        type: 'jumpPrev',
        label: '•••',
        goto: 5
      });
    }

    while (num < itemCount) {
      num += 1;

      if (current > 3 && count > 5) {
        basic = current - 3;
      }

      var label = num + basic;

      if (count - current === 0 && count > 5) {
        label -= 2;
      }

      if (count - current === 1 && count > 5) {
        label -= 1;
      }

      if (label <= count) {
        data.push({
          label,
          active: current === label
        });
      }
    }

    if (current + 3 < count && count > 6) {
      data.push({
        type: 'jumpNext',
        label: '•••',
        goto: 5
      });
    }

    if (current + 2 < count && count > 5) {
      data.push({
        label: count
      });
    }

    data.push({
      type: 'next',
      disabled: current === count
    });
    return data; // return [
    //   { type: 'prev', disabled: true },
    //   { type: 'jumpPrev', label: '•••', goto: 5 },
    //   { label: 1 },
    //   { label: 2, active: true },
    //   { label: 3 },
    //   { label: 4 },
    //   { type: 'jumpPrev', label: '•••', goto: 5 },
    //   { type: 'next' },
    // ];
  }, [current, total, pageSize]);

  function handleClick(item) {
    if (item.active || item.disabled) {
      return;
    }

    var count = Math.ceil(total / pageSize);
    var state = {};

    if (item.label) {
      state.current = item.label;
    }

    if (item.type === 'prev') {
      state.current = current - 1 > 0 ? current - 1 : 1;
    }

    if (item.type === 'next') {
      state.current = current + 1 <= count ? current + 1 : count;
    }

    if (/^(jumpPrev|jumpNext)/.test(item.type) && item.goto) {
      state.current = item.type === 'jumpPrev' ? current - item.goto : current + item.goto;

      if (state.current > count) {
        state.current = count;
      }

      if (state.current < 1) {
        state.current = 1;
      }
    }

    setCurrent(state.current);
    onChange && onChange(state.current, total, pageSize);
  }

  return /*#__PURE__*/_jsx("ul", _extends({
    className: cls
  }, other, {
    children: initPageSoure.map((item, idx) => {
      // eslint-disable-next-line jsx-a11y/anchor-is-valid
      var label = /*#__PURE__*/_jsx("a", {
        children: item.label
      });

      if (/^(prev|next)$/.test(item.type)) {
        // eslint-disable-next-line jsx-a11y/anchor-is-valid
        label = /*#__PURE__*/_jsx("a", {
          className: "arrow " + item.type
        });
      }

      return /*#__PURE__*/_jsx("li", {
        className: [item.active ? 'active' : null, item.disabled ? 'disabled' : null].filter(Boolean).join(' ').trim(),
        onClick: () => handleClick(item),
        children: label
      }, idx);
    })
  }));
}
//# sourceMappingURL=index.js.map