"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Overlay;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _reactPortal = _interopRequireDefault(require("@uiw/react-portal"));

var _utils = require("@uiw/utils");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["className", "style", "isOpen", "prefixCls", "usePortal", "maskClosable", "backdropProps", "portalProps", "hasBackdrop", "unmountOnExit", "timeout", "transitionName", "onOpening", "onOpened", "onClosing", "onClosed", "onClose", "children", "dialogProps"];

function Overlay(props) {
  var className = props.className,
      style = props.style,
      _props$isOpen = props.isOpen,
      _ = _props$isOpen === void 0 ? false : _props$isOpen,
      _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-overlay' : _props$prefixCls,
      _props$usePortal = props.usePortal,
      usePortal = _props$usePortal === void 0 ? true : _props$usePortal,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      _props$backdropProps = props.backdropProps,
      backdropProps = _props$backdropProps === void 0 ? {} : _props$backdropProps,
      _props$portalProps = props.portalProps,
      portalProps = _props$portalProps === void 0 ? {} : _props$portalProps,
      _props$hasBackdrop = props.hasBackdrop,
      hasBackdrop = _props$hasBackdrop === void 0 ? true : _props$hasBackdrop,
      _props$unmountOnExit = props.unmountOnExit,
      unmountOnExit = _props$unmountOnExit === void 0 ? true : _props$unmountOnExit,
      _props$timeout = props.timeout,
      timeout = _props$timeout === void 0 ? 300 : _props$timeout,
      _props$transitionName = props.transitionName,
      transitionName = _props$transitionName === void 0 ? 'w-overlay' : _props$transitionName,
      _props$onOpening = props.onOpening,
      onOpening = _props$onOpening === void 0 ? _utils.noop : _props$onOpening,
      _props$onOpened = props.onOpened,
      onOpened = _props$onOpened === void 0 ? _utils.noop : _props$onOpened,
      _props$onClosing = props.onClosing,
      onClosing = _props$onClosing === void 0 ? _utils.noop : _props$onClosing,
      _props$onClosed = props.onClosed,
      onClosed = _props$onClosed === void 0 ? _utils.noop : _props$onClosed,
      _props$onClose = props.onClose,
      onClose = _props$onClose === void 0 ? _utils.noop : _props$onClose,
      children = props.children,
      _props$dialogProps = props.dialogProps,
      dialogProps = _props$dialogProps === void 0 ? {} : _props$dialogProps,
      otherProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(props.isOpen || false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      visible = _useState4[0],
      setVisible = _useState4[1];

  var container = (0, _react.useRef)(null);
  var overlay = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (isOpen !== props.isOpen && props.isOpen) {
      setVisible(true);
    }

    if (isOpen !== props.isOpen && !props.isOpen) {
      overlayWillClose();
      setIsOpen(false);
    }
  }, [props.isOpen]);
  (0, _react.useEffect)(function () {
    if (visible) {
      overlayWillOpen();
      setIsOpen(true);
    }
  }, [visible]);
  var decoratedChild = (0, _typeof2["default"])(children) === 'object' ? /*#__PURE__*/(0, _react.cloneElement)(children, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, dialogProps), {}, {
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, children.props.style), dialogProps.style),
    className: [children.props.className, "".concat(prefixCls, "-content")].filter(Boolean).join(' ').trim(),
    tabIndex: 0
  })) : /*#__PURE__*/(0, _jsxRuntime.jsx)("span", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, dialogProps), {}, {
    className: "".concat(prefixCls, "-content"),
    children: children
  }));

  function handleClosed(node) {
    setVisible(false);
    onClosed && onClosed(node);
  }

  function handleBackdropMouseDown(e) {
    if (e.target !== container.current && usePortal) {
      return;
    }

    if (maskClosable && hasBackdrop) {
      overlayWillClose();
      setIsOpen(false);
      onClose && onClose(e);
    }

    backdropProps && backdropProps.onMouseDown && backdropProps.onMouseDown(e);
  }

  function overlayWillOpen() {
    if (hasBackdrop && usePortal) {
      document.body.classList.add("".concat(prefixCls, "-open"));
    }
  }

  function overlayWillClose() {
    if (hasBackdrop && usePortal) {
      document.body.classList.remove("".concat(prefixCls, "-open"));
    } // if (unmountOnExit) {
    //   setVisible(false)
    // }

  }

  var TransitionGroupComp = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactTransitionGroup.CSSTransition, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    classNames: transitionName,
    unmountOnExit: unmountOnExit,
    timeout: timeout
  }, otherProps), {}, {
    "in": isOpen,
    onEntering: onOpening,
    onEntered: onOpened,
    onExiting: onClosing,
    onExited: handleClosed,
    children: function children(status) {
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        style: style,
        ref: overlay,
        className: [prefixCls, className, !usePortal ? "".concat(prefixCls, "-inline") : null, isOpen ? "".concat(prefixCls, "-enter-done") : null].filter(Boolean).join(' ').trim(),
        children: [hasBackdrop && /*#__PURE__*/(0, _react.cloneElement)( /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {}), (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, backdropProps), {}, {
          onMouseDown: handleBackdropMouseDown,
          className: ["".concat(prefixCls, "-backdrop"), backdropProps.className].filter(Boolean).join(' ').trim(),
          tabIndex: maskClosable ? 0 : null
        })), usePortal ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          ref: container,
          onMouseDown: handleBackdropMouseDown,
          className: "".concat(prefixCls, "-container"),
          children: /*#__PURE__*/(0, _react.cloneElement)(decoratedChild, {
            'data-status': status
          })
        }) : /*#__PURE__*/(0, _react.cloneElement)(decoratedChild, {
          'data-status': status
        })]
      });
    }
  }));

  if (visible && usePortal) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactPortal["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, (0, _objectSpread2["default"])({}, portalProps)), {}, {
      children: TransitionGroupComp
    }));
  } else {
    return TransitionGroupComp;
  }
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map