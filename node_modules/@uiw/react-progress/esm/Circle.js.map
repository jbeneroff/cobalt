{
  "version": 3,
  "sources": [
    "../src/Circle.tsx"
  ],
  "names": [
    "React",
    "IconProgress",
    "Circle",
    "Component",
    "relativeStrokeWidth",
    "type",
    "elm",
    "strokeWidth",
    "percent",
    "props",
    "parentNode",
    "width",
    "getBoundingClientRect",
    "_strokeWidth",
    "toFixed",
    "radius",
    "parseInt",
    "parseFloat",
    "toString",
    "setAttribute",
    "perimeter",
    "Math",
    "PI",
    "render",
    "prefixCls",
    "style",
    "className",
    "showText",
    "format",
    "status",
    "resetProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "progressInfo",
    "progressStatus",
    "percentView",
    "fontSize",
    "bind",
    "defaultProps"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { IconProps } from '@uiw/react-icon';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport { IconProgress } from './utils';\nimport './style/index.less';\nimport './style/circle.less';\n\nexport type Status = 'success' | 'active' | 'exception';\nexport interface ProgressCircleProps<T> extends IProps, HTMLDivProps {\n  type?: IconProps<T>['type'];\n  status?: Status;\n  showText?: boolean; // 是否显示进度条文字内容\n  percent?: number; // 百分比（必填）\n  width?: number; // 圆圈进度条画布宽度\n  strokeWidth?: number; // 进度条大小设置\n  format?: (percent: number) => React.ReactNode;\n}\n\nexport default class Circle<T> extends React.Component<ProgressCircleProps<T>> {\n  public static defaultProps: ProgressCircleProps<{}> = {\n    prefixCls: 'w-progress',\n    showText: true,\n    percent: 0, // 百分比（必填）\n    width: 126, // 圆圈进度条画布宽度\n    strokeWidth: 6, // 进度条大小设置\n  };\n  relativeStrokeWidth(type: 'track' | 'bg' | undefined, elm: SVGPathElement) {\n    const { strokeWidth, percent } = this.props;\n    if (elm && elm.parentNode) {\n      const { width } = (elm.parentNode as SVGAElement).getBoundingClientRect();\n      const _strokeWidth: string = (\n        ((strokeWidth as number) / width) *\n        100\n      ).toFixed(1);\n      const radius = parseInt(\n        (50 - parseFloat(_strokeWidth) / 2).toString(),\n        10,\n      );\n      elm.setAttribute('stroke-width', _strokeWidth);\n      elm.setAttribute(\n        'd',\n        `M 50 50 m 0 -${radius} a ${radius} ${radius} 0 1 1 0 ${\n          radius * 2\n        } a ${radius} ${radius} 0 1 1 0 -${radius * 2}`,\n      );\n      if (type === 'track') {\n        // 计算周长\n        const perimeter = 2 * Math.PI * radius;\n        elm.setAttribute(\n          'style',\n          `stroke-dasharray:${perimeter}px,${perimeter}px;stroke-dashoffset:${\n            (1 - (percent as number) / 100) * perimeter\n          }px;transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;`,\n        );\n      }\n    }\n  }\n  render() {\n    const {\n      prefixCls,\n      style,\n      type,\n      className,\n      showText,\n      percent,\n      format,\n      strokeWidth,\n      width,\n      status,\n      ...resetProps\n    } = this.props;\n    const cls = [\n      prefixCls,\n      className,\n      `${prefixCls}-circle`,\n      showText ? `${prefixCls}-show-text` : null,\n      status ? `${prefixCls}-status-${status}` : null,\n      parseInt((percent as number).toString(), 10) >= 100\n        ? `${prefixCls}-status-success`\n        : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    let progressInfo;\n    const progressStatus =\n      parseInt((percent as number).toString(), 10) >= 100 &&\n      !('status' in this.props)\n        ? 'success'\n        : status;\n    if (showText) {\n      let percentView: React.ReactNode = `${percent}%`;\n      if (progressStatus === 'exception') {\n        percentView = <IconProgress type=\"close\" />;\n      } else if (progressStatus === 'success') {\n        percentView = <IconProgress type=\"check\" />;\n      }\n      progressInfo = (\n        <span\n          className={`${prefixCls}-text`}\n          style={{ fontSize: (width as number) * 0.16 + 6 }}\n        >\n          {format ? format(percent as number) : percentView}\n        </span>\n      );\n    }\n    return (\n      <div className={cls} style={style} {...resetProps}>\n        <svg viewBox=\"0 0 100 100\" width={`${width}`}>\n          <path\n            ref={this.relativeStrokeWidth.bind(this, 'bg')}\n            className={`${prefixCls}-trail`}\n            fill=\"none\"\n          />\n          <path\n            ref={this.relativeStrokeWidth.bind(this, 'track')}\n            strokeLinecap=\"round\"\n            className={`${prefixCls}-stroke`}\n            fill=\"none\"\n          />\n        </svg>\n        {progressInfo}\n      </div>\n    );\n  }\n}\n"
  ]
}