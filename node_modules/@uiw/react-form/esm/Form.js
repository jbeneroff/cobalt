import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["prefixCls", "className", "fields", "children", "resetOnSubmit", "onSubmitError", "onChange", "onSubmit", "afterSubmit"],
    _excluded2 = ["children", "validator", "name", "help", "label", "labelFor", "labelClassName", "labelStyle", "inline", "initialValue"];
import React, { useState } from 'react';
import FormItem from './FormItem';
import "./style/form.css";
import { jsx as _jsx } from "react/jsx-runtime";

function newFormState(fields, cb) {
  var state = {
    initial: {},
    current: {},
    submitting: false,
    errors: {}
  };

  for (var name in fields) {
    var props = fields[name];
    if (!props) continue;
    var {
      initialValue,
      currentValue: _currentValue
    } = cb(_extends({}, props, {
      name
    }));
    state.initial[name] = initialValue;
    state.current[name] = _currentValue;
  }

  return state;
}

function newInitialValue(value) {
  return value === null || value === undefined ? '' : value;
}

var isPromise = promise => promise && typeof promise.then === 'function';

function Form(_ref, ref) {
  var {
    prefixCls = 'w-form',
    className,
    fields,
    children,
    resetOnSubmit,
    onSubmitError,
    onChange,
    onSubmit,
    afterSubmit
  } = _ref,
      others = _objectWithoutPropertiesLoose(_ref, _excluded);

  var initData = newFormState(fields, _ref2 => {
    var {
      initialValue
    } = _ref2;
    initialValue = newInitialValue(initialValue);
    return {
      initialValue,
      currentValue: initialValue
    };
  });
  var [data, setData] = useState(initData);
  var formUnits = {};

  for (var name in fields) {
    var props = fields[name];
    if (!props) continue;
    var error = data.errors[name];

    if (typeof props.initialValue === 'boolean') {
      props.checked = props.initialValue;
    }

    var childField = controlField(_extends({}, props, {
      name
    }));
    var help = error || props.help;
    var labelFor = props.labelFor;
    formUnits[name] = /*#__PURE__*/_jsx(FormItem, _extends({}, _extends({}, props, {
      key: name,
      children: childField,
      help,
      labelFor,
      state: data,
      name,
      hasError: !!error
    })));
  }

  function handleChange(name, validator, element, cb) {
    return (env, list) => {
      var value = env && env.target && 'value' in env.target ? env.target.value : env; // 控件 Checkbox.Group 多选值的处理

      value = list || value; // 控件 Checkbox 值的处理

      if (!list && element && env && env.target && /(radio)/.test(env.target.type)) {
        // 控件 Switch/Radio/Checkbox 值的处理
        value = env.target.value ? env.target.value : env.target.checked;
      }

      if (!list && element && env && env.target && /(checkbox)/.test(env.target.type)) {
        // 控件 Switch/Radio/Checkbox 值的处理
        value = env.target.checked;
      }

      var nextState = {
        current: _extends({}, data.current, {
          [name]: value
        })
      };
      var error = validator && validator(value);

      if (!error) {
        nextState.errors = _extends({}, data.errors);
        delete nextState.errors[name];
      }

      if (env && env.persist && typeof env.persist === 'function') env.persist();
      setData(_extends({}, data, nextState));

      if (cb) {
        cb(env);
      }

      onChange && onChange(_extends({}, data, nextState));
    };
  }

  function handleSubmit(e) {
    e && e.preventDefault();
    var {
      initial,
      current
    } = data;
    setData(_extends({}, data, {
      submitting: true
    }));
    var nextState = {
      submitting: false
    };

    var onError = evn => setData(_extends({}, data, nextState, {
      errors: onSubmitError && onSubmitError(evn) || {}
    }));

    var onSuccess = response => {
      if (resetOnSubmit) {
        nextState.current = initial;
      }

      setData(_extends({}, data, nextState, {
        errors: {}
      }));
      return () => afterSubmit({
        state: data,
        response,
        reset: handleReset
      });
    };

    try {
      var afterSubmitPromise = onSubmit({
        initial,
        current
      });

      if (isPromise(afterSubmitPromise)) {
        return afterSubmitPromise.then(onSuccess).catch(onError);
      } else {
        return onSuccess(afterSubmitPromise);
      }
    } catch (evn) {
      onError(evn);
    }
  }

  function canSubmit() {
    var {
      submitting,
      current = {}
    } = data;
    var passesValidators = true;

    for (var _name in fields) {
      if (Object.prototype.hasOwnProperty.call(fields, _name)) {
        var _props = fields[_name];
        if (!_props) continue;

        if (_props.validator && _props.validator(current[_name])) {
          passesValidators = false;
          break;
        }
      }
    }

    return !submitting && passesValidators;
  }

  function handleReset() {
    var {
      initial
    } = data;
    setData(_extends({}, data, {
      current: initial,
      errors: {}
    }));
  }

  function controlField(_ref3) {
    var {
      children,
      validator,
      name
    } = _ref3,
        other = _objectWithoutPropertiesLoose(_ref3, _excluded2);

    var element = typeof children !== 'function' ? children : children({
      onChange: handleChange(name, validator),
      onSubmit: handleSubmit,
      canSubmit: canSubmit
    });
    if (!element || React.Children.count(element) !== 1 || !name) return element;

    var props = _extends({
      name: element.props.name || name
    }, other);

    var hasCurrentValue = Object.prototype.hasOwnProperty.call(data.current, name);
    props.id = element.props.id;
    props.value = hasCurrentValue ? data.current && data.current[name] : props.value; // : element.props.value;

    var type = element.props.type;

    if (type === 'checkbox' || type === 'switch') {
      props.checked = !!props.checked;
      delete props.value;
    }

    props.onChange = handleChange(name, validator, element, element.props.onChange);
    return /*#__PURE__*/React.cloneElement(element, props);
  }

  return /*#__PURE__*/_jsx("form", _extends({}, _extends({}, others, {
    className: [prefixCls, className].filter(Boolean).join(' ').trim(),
    onSubmit: handleSubmit
  }), {
    children: /*#__PURE__*/_jsx("fieldset", {
      disabled: data.submitting,
      children: typeof children === 'function' ? children({
        fields: formUnits,
        state: data,
        resetForm: handleReset,
        canSubmit: canSubmit
      }) : children
    })
  }));
}

export default /*#__PURE__*/React.forwardRef(Form);
//# sourceMappingURL=Form.js.map