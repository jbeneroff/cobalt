{
  "version": 3,
  "sources": [
    "../src/Dots.tsx"
  ],
  "names": [
    "React",
    "Dots",
    "props",
    "prefixCls",
    "data",
    "step",
    "min",
    "vertical",
    "marks",
    "markRender",
    "map",
    "val",
    "idx",
    "stepValue",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": "AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAcA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAmC;AAChD,MAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA,GAAzB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,KAAxC;AAA+CC,IAAAA;AAA/C,MAA8DP,KAApE;AACA,sBACE;AAAK,IAAA,SAAS,EAAKC,SAAL,UAAd;AAAA,cACGC,IAAI,CAACM,GAAL,CAAS,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtB,UAAMC,SAAS,GAAGD,GAAG,GAAGP,IAAN,GAAaC,GAA/B;AACA,0BACE;AAEE,QAAA,KAAK,EAAE;AACL,WAACC,QAAQ,GAAG,KAAH,GAAW,MAApB,GAAgCI,GAAhC;AADK,SAFT;AAKE,QAAA,SAAS,EAAE,CACNR,SADM,YAETK,KAAK,IAAIA,KAAK,KAAK,IAAnB,IAA2B,CAACA,KAAK,CAACK,SAAD,CAAjC,GAA+C,UAA/C,GAA4D,IAFnD,EAIRC,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ,EALb;AAAA,mBAaGT,KAAK,KAAK,IAAV,IAAkBC,UAAlB,IAAgCA,UAAU,CAACI,SAAD,CAb7C,EAcGL,KAAK,KAAK,IAAV,IACCA,KADD,IAECA,KAAK,CAACK,SAAD,CAFN,IAGCJ,UAHD,IAICA,UAAU,CAACI,SAAD,EAAYL,KAAK,CAACK,SAAD,CAAjB,CAlBd;AAAA,SACOD,GADP,CADF;AAsBD,KAxBA;AADH,IADF;AA6BD",
  "sourcesContent": [
    "import React from 'react';\nimport { HTMLDivProps } from '@uiw/utils';\nimport { SliderProps, SliderMarks } from './index';\n\ninterface TooltipProps extends HTMLDivProps {\n  prefixCls: string;\n  data: number[];\n  step: number;\n  min: number;\n  vertical: boolean;\n  marks: SliderProps['marks'];\n  markRender: (stepValue: number, mark?: SliderMarks) => React.ReactNode;\n}\n\nexport default function Dots(props: TooltipProps) {\n  const { prefixCls, data, step, min, vertical, marks, markRender } = props;\n  return (\n    <div className={`${prefixCls}-dots`}>\n      {data.map((val, idx) => {\n        const stepValue = idx * step + min;\n        return (\n          <div\n            key={idx}\n            style={{\n              [vertical ? 'top' : 'left']: `${val}%`,\n            }}\n            className={[\n              `${prefixCls}-mark`,\n              marks && marks !== true && !marks[stepValue] ? 'no-marks' : null,\n            ]\n              .filter(Boolean)\n              .join(' ')\n              .trim()}\n          >\n            {marks === true && markRender && markRender(stepValue)}\n            {marks !== true &&\n              marks &&\n              marks[stepValue] &&\n              markRender &&\n              markRender(stepValue, marks[stepValue])}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"
  ]
}