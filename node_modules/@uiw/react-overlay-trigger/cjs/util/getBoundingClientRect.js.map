{
  "version": 3,
  "sources": [
    "../../src/util/getBoundingClientRect.ts"
  ],
  "names": [
    "getBoundingClientRect",
    "element",
    "rect",
    "scrollTop",
    "scrollLeft",
    "top",
    "left",
    "bottom",
    "right",
    "e",
    "result",
    "width",
    "height",
    "sizes",
    "nodeName",
    "ownerDocument",
    "clientWidth",
    "clientHeight",
    "horizScrollbar",
    "offsetWidth",
    "vertScrollbar",
    "offsetHeight",
    "offsetLeft",
    "offsetTop",
    "styles"
  ],
  "mappings": ";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,qBAAT,CAA+BC,OAA/B,EAAqD;AAClE,MAAIC,IAAI,GAAG,EAAX,CADkE,CAGlE;AACA;AACA;;AACA,MAAI;AACF,QAAI,sBAAK,EAAL,CAAJ,EAAc;AACZA,MAAAA,IAAI,GAAGD,OAAO,CAACD,qBAAR,EAAP;AACA,UAAMG,SAAS,GAAG,sBAAUF,OAAV,EAAmB,IAAnB,CAAlB;AACA,UAAMG,UAAU,GAAG,sBAAUH,OAAV,CAAnB;AACAC,MAAAA,IAAI,CAACG,GAAL,IAAYF,SAAZ;AACAD,MAAAA,IAAI,CAACI,IAAL,IAAaF,UAAb;AACAF,MAAAA,IAAI,CAACK,MAAL,IAAeJ,SAAf;AACAD,MAAAA,IAAI,CAACM,KAAL,IAAcJ,UAAd;AACD,KARD,MAQO;AACLF,MAAAA,IAAI,GAAGD,OAAO,CAACD,qBAAR,EAAP;AACD,KAXC,CAYF;;AACD,GAbD,CAaE,OAAOS,CAAP,EAAU,CAAE;;AAEd,MAAMC,MAAM,GAAG;AACbJ,IAAAA,IAAI,EAAEJ,IAAI,CAACI,IADE;AAEbD,IAAAA,GAAG,EAAEH,IAAI,CAACG,GAFG;AAGbM,IAAAA,KAAK,EAAET,IAAI,CAACM,KAAL,GAAaN,IAAI,CAACI,IAHZ;AAIbM,IAAAA,MAAM,EAAEV,IAAI,CAACK,MAAL,GAAcL,IAAI,CAACG;AAJd,GAAf,CArBkE,CA4BlE;;AACA,MAAMQ,KAAiB,GACrBZ,OAAO,CAACa,QAAR,KAAqB,MAArB,GAA8B,gCAAeb,OAAO,CAACc,aAAvB,CAA9B,GAAuE,EADzE;AAEA,MAAMJ,KAAK,GACTE,KAAK,CAACF,KAAN,IAAeV,OAAO,CAACe,WAAvB,IAAsCN,MAAM,CAACF,KAAP,GAAeE,MAAM,CAACJ,IAD9D;AAEA,MAAMM,MAAM,GACVC,KAAK,CAACD,MAAN,IAAgBX,OAAO,CAACgB,YAAxB,IAAwCP,MAAM,CAACH,MAAP,GAAgBG,MAAM,CAACL,GADjE;AAGA,MAAIa,cAAc,GAAGjB,OAAO,CAACkB,WAAR,GAAsBR,KAA3C;AACA,MAAIS,aAAa,GAAGnB,OAAO,CAACoB,YAAR,GAAuBT,MAA3C;AAEAF,EAAAA,MAAM,CAACY,UAAP,GAAoBrB,OAAO,CAACqB,UAAR,IAAsBrB,OAAO,CAACG,UAA9B,IAA4C,CAAhE;AACAM,EAAAA,MAAM,CAACa,SAAP,GAAmBtB,OAAO,CAACsB,SAAR,IAAqBtB,OAAO,CAACsB,SAA7B,IAA0C,CAA7D,CAxCkE,CA0ClE;AACA;;AACA,MAAIL,cAAc,IAAIE,aAAtB,EAAqC;AACnC,QAAMI,MAAM,GAAG,0CAAyBvB,OAAzB,CAAf;AACAiB,IAAAA,cAAc,IAAI,gCAAeM,MAAf,EAAuB,GAAvB,CAAlB;AACAJ,IAAAA,aAAa,IAAI,gCAAeI,MAAf,EAAuB,GAAvB,CAAjB;AAEAd,IAAAA,MAAM,CAACC,KAAP,IAAgBO,cAAhB;AACAR,IAAAA,MAAM,CAACE,MAAP,IAAiBQ,aAAjB;AACD;;AAED,SAAO,+BAAcV,MAAd,CAAP;AACD",
  "sourcesContent": [
    "import { getScroll } from '@uiw/utils';\nimport getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes, { WindowSize } from './getWindowSizes';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\nexport interface IBoundingClientRect {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  width: number;\n  height: number;\n  offsetLeft?: number;\n  offsetTop?: number;\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element: HTMLElement) {\n  let rect = {} as IBoundingClientRect;\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, true);\n      const scrollLeft = getScroll(element);\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n    // eslint-disable-next-line\n  } catch (e) {}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  } as IBoundingClientRect;\n\n  // subtract scrollbar size from sizes\n  const sizes: WindowSize =\n    element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument!) : {};\n  const width =\n    sizes.width || element.clientWidth || result.right - result.left;\n  const height =\n    sizes.height || element.clientHeight || result.bottom - result.top;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  result.offsetLeft = element.offsetLeft || element.scrollLeft || 0;\n  result.offsetTop = element.offsetTop || element.offsetTop || 0;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result) as IBoundingClientRect;\n}\n"
  ]
}