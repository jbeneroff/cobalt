import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "name", "value", "onChange"];
import React, { useMemo, useRef } from 'react';
import "./style/group.css";
import { jsx as _jsx } from "react/jsx-runtime";
export var CheckboxGroup = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-checkbox-group',
    className,
    name,
    value,
    onChange: _onChange
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var valueRef = useRef([]);
  var cls = [prefixCls, className].filter(Boolean).join(' ').trim();
  var childs = React.Children.toArray(props.children);
  useMemo(() => valueRef.current = value || [], [value]);
  return /*#__PURE__*/_jsx("div", _extends({}, other, {
    className: cls,
    ref: ref,
    children: React.Children.map(childs, element => {
      if (! /*#__PURE__*/React.isValidElement(element)) return;

      if (Array.isArray(value) && element && element.props && element.props.value && value.includes(element.props.value)) {
        if (!valueRef.current.includes(element.props.value)) {
          valueRef.current.push(element.props.value);
        }
      }

      return /*#__PURE__*/React.cloneElement(element, Object.assign({}, element.props, {
        name,
        checked: valueRef.current.includes(element.props.value),
        onChange: e => {
          if (e.target.type && e.target.type !== 'checkbox') return;
          var checked = e.target.checked;
          var include = valueRef.current.includes(element.props.value);

          if (!include && checked) {
            valueRef.current.push(element.props.value);
          } else if (include && !checked) {
            valueRef.current = valueRef.current.filter(val => val !== element.props.value);
          }

          _onChange && _onChange(e, valueRef.current);
        }
      }));
    })
  }));
});
//# sourceMappingURL=Group.js.map