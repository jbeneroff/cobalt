import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "style", "type", "className", "showText", "percent", "format", "strokeWidth", "width", "status"];
import React from 'react';
import { IconProgress } from './utils';
import "./style/index.css";
import "./style/circle.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default class Circle extends React.Component {
  relativeStrokeWidth(type, elm) {
    var {
      strokeWidth,
      percent
    } = this.props;

    if (elm && elm.parentNode) {
      var {
        width
      } = elm.parentNode.getBoundingClientRect();

      var _strokeWidth = (strokeWidth / width * 100).toFixed(1);

      var radius = parseInt((50 - parseFloat(_strokeWidth) / 2).toString(), 10);
      elm.setAttribute('stroke-width', _strokeWidth);
      elm.setAttribute('d', "M 50 50 m 0 -" + radius + " a " + radius + " " + radius + " 0 1 1 0 " + radius * 2 + " a " + radius + " " + radius + " 0 1 1 0 -" + radius * 2);

      if (type === 'track') {
        // 计算周长
        var perimeter = 2 * Math.PI * radius;
        elm.setAttribute('style', "stroke-dasharray:" + perimeter + "px," + perimeter + "px;stroke-dashoffset:" + (1 - percent / 100) * perimeter + "px;transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease;");
      }
    }
  }

  render() {
    var _this$props = this.props,
        {
      prefixCls,
      style,
      className,
      showText,
      percent,
      format,
      width,
      status
    } = _this$props,
        resetProps = _objectWithoutPropertiesLoose(_this$props, _excluded);

    var cls = [prefixCls, className, prefixCls + "-circle", showText ? prefixCls + "-show-text" : null, status ? prefixCls + "-status-" + status : null, parseInt(percent.toString(), 10) >= 100 ? prefixCls + "-status-success" : null].filter(Boolean).join(' ').trim();
    var progressInfo;
    var progressStatus = parseInt(percent.toString(), 10) >= 100 && !('status' in this.props) ? 'success' : status;

    if (showText) {
      var percentView = percent + "%";

      if (progressStatus === 'exception') {
        percentView = /*#__PURE__*/_jsx(IconProgress, {
          type: "close"
        });
      } else if (progressStatus === 'success') {
        percentView = /*#__PURE__*/_jsx(IconProgress, {
          type: "check"
        });
      }

      progressInfo = /*#__PURE__*/_jsx("span", {
        className: prefixCls + "-text",
        style: {
          fontSize: width * 0.16 + 6
        },
        children: format ? format(percent) : percentView
      });
    }

    return /*#__PURE__*/_jsxs("div", _extends({
      className: cls,
      style: style
    }, resetProps, {
      children: [/*#__PURE__*/_jsxs("svg", {
        viewBox: "0 0 100 100",
        width: "" + width,
        children: [/*#__PURE__*/_jsx("path", {
          ref: this.relativeStrokeWidth.bind(this, 'bg'),
          className: prefixCls + "-trail",
          fill: "none"
        }), /*#__PURE__*/_jsx("path", {
          ref: this.relativeStrokeWidth.bind(this, 'track'),
          strokeLinecap: "round",
          className: prefixCls + "-stroke",
          fill: "none"
        })]
      }), progressInfo]
    }));
  }

}
Circle.defaultProps = {
  prefixCls: 'w-progress',
  showText: true,
  percent: 0,
  // 百分比（必填）
  width: 126,
  // 圆圈进度条画布宽度
  strokeWidth: 6 // 进度条大小设置

};
//# sourceMappingURL=Circle.js.map