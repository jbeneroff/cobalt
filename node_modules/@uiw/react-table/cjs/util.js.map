{
  "version": 3,
  "sources": [
    "../src/util.ts"
  ],
  "names": [
    "getColspanNum",
    "data",
    "num",
    "childs",
    "i",
    "length",
    "children",
    "concat",
    "getRowspanNum",
    "child",
    "push",
    "getLevelItems",
    "result",
    "header",
    "render",
    "levelTop",
    "key",
    "ellipsis",
    "colSpan",
    "map",
    "item",
    "rowSpan",
    "getAllColumnsKeys",
    "keys"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { TableColumns } from './';\n\n/**\n * Get colspan number\n * @param {Array} date\n */\nfunction getColspanNum(data: TableColumns[] = [], num = 1) {\n  let childs: TableColumns[] = [];\n  for (let i = 0; i < data.length; i += 1) {\n    if (data[i].children) {\n      childs = childs.concat(data[i].children || []);\n    }\n  }\n  if (childs && childs.length > 0) {\n    num = getColspanNum(childs, num + 1);\n  }\n  return num;\n}\n\n/**\n * Get rowspan number\n * @param {Array} date\n */\nfunction getRowspanNum(data: TableColumns[] = [], child = []) {\n  let childs: TableColumns[] = [];\n  for (let i = 0; i < data.length; i += 1) {\n    if (!data[i].children) {\n      childs.push(data[i]);\n    } else if (data[i].children && data[i].children!.length > 0) {\n      childs = childs.concat(getRowspanNum(data[i].children, child));\n    }\n  }\n  return childs;\n}\n\nexport interface ILevelItems {\n  header: TableColumns[][];\n  ellipsis?: Record<string, boolean>;\n  render: {\n    [key: string]: any;\n  };\n}\n\n/**\n * JSON Array => Array\n * @param {Array} date\n */\nexport const getLevelItems = (\n  data: TableColumns[],\n  result?: ILevelItems,\n): ILevelItems => {\n  if (!result) {\n    result = { header: [], render: {} };\n  }\n  if (result && !result.header) {\n    result.header = [];\n  }\n  if (result && !result.render) {\n    result.render = {};\n  }\n  let child: TableColumns[] = [];\n  const levelTop: TableColumns[] = [];\n  for (let i = 0; i < data.length; i += 1) {\n    if (data[i].render && data[i].key) {\n      result.render[data[i].key as string] = data[i].render;\n    }\n    if (data[i].ellipsis && data[i].key) {\n      if (!result.ellipsis) result.ellipsis = {};\n      result.ellipsis[data[i].key!] = true;\n    }\n    if (result.header.length === 0) {\n      // Calculation rowspan\n      if (\n        data[i].children &&\n        data[i].children &&\n        data[i].children!.length > 0\n      ) {\n        data[i].colSpan = getRowspanNum(\n          data[i].children as TableColumns[],\n        ).length;\n      }\n      levelTop.push(data[i]);\n    }\n    if (data[i] && data[i].children) {\n      child = child.concat(\n        data[i].children!.map((item: TableColumns) => {\n          // Calculation rowspan\n          if (item.children && item.children.length > 0) {\n            item.colSpan = getRowspanNum(item.children).length;\n          }\n          return item;\n        }),\n      );\n    }\n  }\n  // level 1\n  if (result.header.length === 0) {\n    const num = getColspanNum(levelTop);\n    result.header.push(\n      levelTop.map((item) => {\n        if (num === 1) return item;\n        if (!item.children || (item.children && item.children.length === 0)) {\n          item.rowSpan = num;\n        }\n        return item;\n      }),\n    );\n  }\n  if (child && child.length > 0) {\n    const num = getColspanNum(child);\n    result.header.push(\n      child.map((item: TableColumns) => {\n        if (num === 1) return item;\n        if (!item.children || (item.children && item.children.length === 0)) {\n          item.rowSpan = num;\n        }\n        return item;\n      }),\n    );\n    result = getLevelItems(child, result);\n  }\n  return result;\n};\n\n/**\n * Get all columns keys\n * @param {Array} data\n */\nexport const getAllColumnsKeys = (\n  data: TableColumns[],\n  keys: any[] = [],\n): string[] => {\n  for (let i = 0; i < data.length; i += 1) {\n    if (data[i].children) {\n      keys = keys.concat(getAllColumnsKeys(data[i].children || []));\n    } else if (data[i].key) {\n      keys.push(data[i].key);\n    }\n  }\n  return keys;\n};\n"
  ]
}