"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Slider;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _Dots = _interopRequireDefault(require("./Dots"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "value", "min", "max", "dots", "step", "disabled", "progress", "tooltip", "className", "marks", "renderMarks", "vertical", "onChange"];

function Slider(props) {
  var _objectSpread2;

  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-slider' : _props$prefixCls,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      _props$min = props.min,
      min = _props$min === void 0 ? 0 : _props$min,
      _props$max = props.max,
      max = _props$max === void 0 ? 100 : _props$max,
      _props$dots = props.dots,
      dots = _props$dots === void 0 ? false : _props$dots,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$progress = props.progress,
      progress = _props$progress === void 0 ? true : _props$progress,
      _props$tooltip = props.tooltip,
      tooltip = _props$tooltip === void 0 ? false : _props$tooltip,
      className = props.className,
      marks = props.marks,
      renderMarks = props.renderMarks,
      vertical = props.vertical,
      onChange = props.onChange,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var bar = _react["default"].useRef(null);

  var slider = _react["default"].useRef(null);

  var indexBar = _react["default"].useRef();

  var startX = _react["default"].useRef();

  var curValue = _react["default"].useRef();

  var barWidth = _react["default"].useRef();

  var barOffsetLeft = _react["default"].useRef();

  var move = _react["default"].useRef();

  var _useState = (0, _react.useState)(Array.isArray(value) ? value : [value]),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      arrValue = _useState2[0],
      setArrValue = _useState2[1];

  (0, _react.useEffect)(function () {
    return setArrValue(Array.isArray(value) ? value : [value]);
  }, [value]);

  other.onClick = function (evn) {
    if (move.current !== undefined) {
      return;
    }

    var markOffset = slider.current.getBoundingClientRect();
    var vals = getWidthToValue(evn[vertical ? 'clientY' : 'clientX'] - markOffset[vertical ? 'y' : 'x']);
    var curr = getRangeValue(vals);
    handleChange(curr);
  };

  function getRangeValue(val) {
    if (!Array.isArray(value)) {
      return Array.isArray(val) ? val : [val];
    }

    var newData = (0, _toConsumableArray2["default"])(arrValue);
    var val1 = newData[0];
    var val2 = newData[1];

    if (val1 < val2 && val1 > val || val1 > val2 && val1 < val) {
      newData[0] = val;
    }

    if (val1 < val2 && val2 < val || val1 > val2 && val2 > val) {
      newData[1] = val;
    }

    if (val1 > val && val2 < val) {
      var half = val2 + (val1 - val2) / 2;

      if (half >= val) {
        newData[1] = val;
      }

      if (half < val) {
        newData[0] = val;
      }
    }

    if (val2 > val && val1 < val) {
      var _half = val1 + (val2 - val1) / 2;

      if (_half >= val) {
        newData[0] = val;
      }

      if (_half < val) {
        newData[1] = val;
      }
    }

    return newData;
  }

  function handleChange(val) {
    setArrValue((0, _toConsumableArray2["default"])(val));
    onChange && onChange(arrValue.length === 1 ? val[0] : val);
  }

  function getWidthToValue(width) {
    var equal = (max - min) / step;
    var percent = 0;

    if (slider.current) {
      percent = width / slider.current[vertical ? 'clientHeight' : 'clientWidth'] * 100;
    }

    if (percent <= 0) {
      percent = 0;
    }

    if (percent >= 100) {
      percent = 100;
    }

    var num = equal * (percent / 100) + 0.5;
    var numFloor = Math.floor(num);
    var vals = numFloor * step + min;
    return vals;
  }

  function onHandleBtnDown(idx, env) {
    if (disabled) {
      return;
    }

    indexBar.current = idx;
    move.current = true;
    startX.current = env[vertical ? 'clientY' : 'clientX'];

    if (bar.current) {
      barWidth.current = bar.current[vertical ? 'clientHeight' : 'clientWidth'];
      barOffsetLeft.current = bar.current[vertical ? 'offsetTop' : 'offsetLeft'];
    }

    var vals = (0, _toConsumableArray2["default"])(arrValue);

    if (Array.isArray(value)) {
      barWidth.current = indexBar.current === 1 && vals[1] > vals[0] || indexBar.current !== 1 && vals[0] > vals[1] ? barWidth.current + barOffsetLeft.current : barOffsetLeft.current;
    }

    window.addEventListener('mousemove', onDragging);
    window.addEventListener('mouseup', onDragEnd);
  }

  function onDragging(env) {
    if (!move.current) {
      return;
    }

    var vals = (0, _toConsumableArray2["default"])(arrValue);
    var valueToWidth = getWidthToValue(env[vertical ? 'clientY' : 'clientX'] - startX.current + barWidth.current);

    if (valueToWidth !== curValue.current) {
      vals[indexBar.current] = valueToWidth;

      var _barStyl = getStyle(vals);

      if (bar.current) {
        bar.current.style[vertical ? 'top' : 'left'] = _barStyl.left;
        bar.current.style[vertical ? 'bottom' : 'right'] = _barStyl.right;
      }

      handleChange(vals);
      curValue.current = valueToWidth;
    }
  }

  function onDragEnd() {
    move.current = undefined;
    window.removeEventListener('mousemove', onDragging, false);
    window.removeEventListener('mouseup', onDragEnd, false);
  }

  var stepArray = function stepArray() {
    var equal = (max - min) / step;
    var stepWidth = 100 * step / (max - min);
    var result = [0];

    for (var i = 1; i < equal; i += 1) {
      result.push(i * stepWidth);
    }

    result.push(100);
    return result;
  };

  function getValueToPercent(vals) {
    return (vals - min) * 100 / (max - min);
  }

  function getStyle(val) {
    val = val || arrValue;
    var barStyl = {
      left: '0%',
      right: '100%'
    };

    if (!Array.isArray(value)) {
      barStyl.right = "".concat(100 - getValueToPercent(val[0]), "%");
    } else {
      var leftValue = val[0] > val[1] ? val[1] : val[0];
      var rightValue = val[0] > val[1] ? val[0] : val[1];
      barStyl.left = "".concat(getValueToPercent(leftValue), "%");
      barStyl.right = "".concat(100 - getValueToPercent(rightValue), "%");
    }

    return barStyl;
  }

  function getLabelValue(val) {
    if (marks && marks !== true && marks[val] && marks[val].label) {
      return marks[val].label;
    } else if (marks && marks !== true && marks[val] && typeof marks[val] === 'string') {
      return marks[val];
    } else if (renderMarks && typeof renderMarks === 'function' && renderMarks(val)) {
      return renderMarks(val);
    }

    return val;
  }

  var barStyl = getStyle();

  if (disabled) {
    delete other.onClick;
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread3["default"])((0, _objectSpread3["default"])({
    ref: slider,
    className: [prefixCls, className, disabled ? 'disabled' : null, marks ? "".concat(prefixCls, "-with-marks") : null, vertical ? "".concat(prefixCls, "-vertical") : null].filter(Boolean).join(' ').trim()
  }, other), {}, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: bar,
      className: "".concat(prefixCls, "-bar"),
      style: (0, _objectSpread3["default"])((_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, vertical ? 'top' : 'left', barStyl.left), (0, _defineProperty2["default"])(_objectSpread2, vertical ? 'bottom' : 'right', barStyl.right), _objectSpread2), progress !== true ? {
        backgroundColor: progress || 'initial'
      } : {})
    }), (0, _toConsumableArray2["default"])(arrValue).map(function (item, idx) {
      var lleftPostion = getValueToPercent(item);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "".concat(prefixCls, "-handle"),
        onMouseDown: function onMouseDown(evn) {
          return onHandleBtnDown(idx, evn);
        },
        style: (0, _defineProperty2["default"])({}, vertical ? 'top' : 'left', "".concat(lleftPostion, "%")),
        children: (tooltip || tooltip === false) && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          className: ["".concat(prefixCls, "-tooltip"), tooltip ? 'open' : null].filter(Boolean).join(' ').trim(),
          children: getLabelValue(item)
        })
      }, idx);
    }), dots && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dots["default"], {
      prefixCls: prefixCls,
      min: min,
      step: step,
      marks: marks,
      vertical: !!vertical,
      data: stepArray(),
      markRender: function markRender(stepValue) {
        var mark = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!mark) {
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            children: [" ", getLabelValue(stepValue), " "]
          });
        }

        var other = (0, _typeof2["default"])(mark) === 'object' ? mark : {};
        delete other.label;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, other), {}, {
          children: [" ", getLabelValue(stepValue), " "]
        }));
      }
    })]
  }));
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map