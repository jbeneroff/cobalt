{
  "version": 3,
  "sources": [
    "../src/Line.tsx"
  ],
  "names": [
    "Line",
    "props",
    "prefixCls",
    "style",
    "className",
    "showText",
    "percent",
    "format",
    "strokeWidth",
    "width",
    "status",
    "resetProps",
    "cls",
    "parseInt",
    "toString",
    "filter",
    "Boolean",
    "join",
    "trim",
    "progressInfo",
    "progressStatus",
    "percentView",
    "percentStyle",
    "height",
    "React",
    "Component"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAOqBA,I;;;;;;;;;;;;WAQnB,kBAAS;AACP,wBAWI,KAAKC,KAXT;AAAA,UACEC,SADF,eACEA,SADF;AAAA,UAEEC,KAFF,eAEEA,KAFF;AAAA,UAGEC,SAHF,eAGEA,SAHF;AAAA,UAIEC,QAJF,eAIEA,QAJF;AAAA,UAKEC,OALF,eAKEA,OALF;AAAA,UAMEC,MANF,eAMEA,MANF;AAAA,UAOEC,WAPF,eAOEA,WAPF;AAAA,UAQEC,KARF,eAQEA,KARF;AAAA,UASEC,MATF,eASEA,MATF;AAAA,UAUKC,UAVL;AAYA,UAAMC,GAAG,GAAG,CACVV,SADU,EAEVE,SAFU,YAGPF,SAHO,YAIVG,QAAQ,aAAMH,SAAN,kBAA8B,IAJ5B,EAKVQ,MAAM,aAAMR,SAAN,qBAA0BQ,MAA1B,IAAqC,IALjC,EAMVG,QAAQ,CAAEP,OAAD,CAAoBQ,QAApB,EAAD,EAAiC,EAAjC,CAAR,IAAgD,GAAhD,aACOZ,SADP,uBAEI,IARM,EAUTa,MAVS,CAUFC,OAVE,EAWTC,IAXS,CAWJ,GAXI,EAYTC,IAZS,EAAZ;AAaA,UAAIC,YAAJ;;AACA,UAAId,QAAJ,EAAc;AACZ,YAAMe,cAAc,GAClBP,QAAQ,CAAEP,OAAD,CAAoBQ,QAApB,EAAD,EAAiC,EAAjC,CAAR,IAAgD,GAAhD,IACA,EAAE,YAAY,KAAKb,KAAnB,CADA,GAEI,SAFJ,GAGIS,MAJN;AAKA,YAAIW,WAA4B,aAAMf,OAAN,MAAhC;;AACA,YAAIc,cAAc,KAAK,WAAvB,EAAoC;AAClCC,UAAAA,WAAW,gBAAG,qBAAC,mBAAD;AAAc,YAAA,IAAI,EAAC;AAAnB,YAAd;AACD,SAFD,MAEO,IAAID,cAAc,KAAK,SAAvB,EAAkC;AACvCC,UAAAA,WAAW,gBAAG,qBAAC,mBAAD;AAAc,YAAA,IAAI,EAAC;AAAnB,YAAd;AACD;;AACDF,QAAAA,YAAY,gBACV;AAAM,UAAA,SAAS,YAAKjB,SAAL,UAAf;AAAA,oBACGK,MAAM,GAAGA,MAAM,CAACD,OAAD,CAAT,GAA+Be;AADxC,UADF;AAKD;;AACD,UAAMC,YAAY,GAAG;AACnBb,QAAAA,KAAK,YAAKH,OAAL,MADc;AAEnBiB,QAAAA,MAAM,EAAEf;AAFW,OAArB;AAIA,0BACE;AAAK,QAAA,SAAS,EAAEI,GAAhB;AAAqB,QAAA,KAAK,EAAET;AAA5B,SAAuCQ,UAAvC;AAAA,gCACE;AAAK,UAAA,SAAS,YAAKT,SAAL,SAAd;AAAA,iCACE;AAAK,YAAA,SAAS,YAAKA,SAAL,WAAd;AAAA,mCACE;AAAK,cAAA,SAAS,YAAKA,SAAL,QAAd;AAAmC,cAAA,KAAK,EAAEoB;AAA1C;AADF;AADF,UADF,EAMGH,YANH;AAAA,SADF;AAUD;;;EAnEkCK,kBAAMC,S;;;iCAAtBzB,I,kBACgC;AACjDE,EAAAA,SAAS,EAAE,YADsC;AAEjDG,EAAAA,QAAQ,EAAE,IAFuC;AAEjC;AAChBC,EAAAA,OAAO,EAAE,CAHwC;AAGrC;AACZG,EAAAA,KAAK,EAAE,GAJ0C;AAIrC;AACZD,EAAAA,WAAW,EAAE,CALoC,CAKjC;;AALiC,C",
  "sourcesContent": [
    "import React from 'react';\nimport { IconProgress } from './utils';\nimport { ProgressCircleProps } from './Circle';\nimport './style/index.less';\nimport './style/line.less';\n\nexport interface ProgressLineProp<T> extends ProgressCircleProps<T> {}\n\nexport default class Line<T> extends React.Component<ProgressLineProp<T>> {\n  public static defaultProps: ProgressLineProp<{}> = {\n    prefixCls: 'w-progress',\n    showText: true, // 是否显示进度条文字内容\n    percent: 0, // 百分比（必填）\n    width: 126, // 圆圈进度条画布宽度\n    strokeWidth: 6, // 进度条大小设置\n  };\n  render() {\n    const {\n      prefixCls,\n      style,\n      className,\n      showText,\n      percent,\n      format,\n      strokeWidth,\n      width,\n      status,\n      ...resetProps\n    } = this.props;\n    const cls = [\n      prefixCls,\n      className,\n      `${prefixCls}-line`,\n      showText ? `${prefixCls}-show-text` : null,\n      status ? `${prefixCls}-status-${status}` : null,\n      parseInt((percent as number).toString(), 10) >= 100\n        ? `${prefixCls}-status-success`\n        : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    let progressInfo;\n    if (showText) {\n      const progressStatus =\n        parseInt((percent as number).toString(), 10) >= 100 &&\n        !('status' in this.props)\n          ? 'success'\n          : status;\n      let percentView: React.ReactNode = `${percent}%`;\n      if (progressStatus === 'exception') {\n        percentView = <IconProgress type=\"circle-close\" />;\n      } else if (progressStatus === 'success') {\n        percentView = <IconProgress type=\"circle-check\" />;\n      }\n      progressInfo = (\n        <span className={`${prefixCls}-text`}>\n          {format ? format(percent as number) : percentView}\n        </span>\n      );\n    }\n    const percentStyle = {\n      width: `${percent}%`,\n      height: strokeWidth,\n    };\n    return (\n      <div className={cls} style={style} {...resetProps}>\n        <div className={`${prefixCls}-bar`}>\n          <div className={`${prefixCls}-inner`}>\n            <div className={`${prefixCls}-bg`} style={percentStyle} />\n          </div>\n        </div>\n        {progressInfo}\n      </div>\n    );\n  }\n}\n"
  ]
}