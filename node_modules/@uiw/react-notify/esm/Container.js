import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["description", "isOpen"];
import React from 'react';
import Alert from '@uiw/react-alert';
import { jsx as _jsx } from "react/jsx-runtime";
var notifys = {};
var timer = {};
export default class Container extends React.Component {
  constructor() {
    super(...arguments);
    this.state = {
      notifys: {}
    };
  }

  create(props) {
    var {
      placement,
      key
    } = props;

    if (!notifys[placement]) {
      notifys[placement] = {};
    }

    props.isOpen = false;
    notifys[placement][key] = props;

    if (props.duration) {
      timer[key] = setTimeout(() => {
        this.closed(key, placement);
      }, props.duration);
    }

    this.setState({
      notifys,
      placement
    }, () => {
      notifys[placement][key].isOpen = true;
      this.setState({
        notifys
      });
    });
  }

  closed(key, placement) {
    if (!key || !placement || !notifys[placement][key]) {
      return;
    }

    notifys[placement][key].isOpen = false;
    var props = notifys[placement][key];
    this.setState({
      notifys
    }, () => {
      clearTimeout(timer[key]);
      delete timer[key];
      delete notifys[placement][key];

      if (props && props.willUnmount) {
        props.willUnmount(props, notifys);
      }
    });
  }

  render() {
    var {
      prefixCls
    } = this.props;
    var {
      placement
    } = this.state;
    return /*#__PURE__*/_jsx(React.Fragment, {
      children: placement && Object.keys(this.state.notifys[placement]).map(key => {
        var _this$state$notifys$p = this.state.notifys[placement][key],
            {
          description,
          isOpen
        } = _this$state$notifys$p,
            alertProps = _objectWithoutPropertiesLoose(_this$state$notifys$p, _excluded);

        if (alertProps.type === 'open') {
          delete alertProps.type;
        }

        return /*#__PURE__*/_jsx(Alert, _extends({
          className: prefixCls,
          useButton: false,
          width: 320
        }, alertProps, {
          usePortal: false,
          hasBackdrop: false,
          isOpen: isOpen,
          content: description
        }), key);
      })
    });
  }

}
Container.defaultProps = {
  prefixCls: 'w-notify',
  placement: 'topRight'
};
//# sourceMappingURL=Container.js.map