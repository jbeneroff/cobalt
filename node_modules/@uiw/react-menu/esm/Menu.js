import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "children", "bordered", "theme", "inlineIndent", "inlineCollapsed"];
import React, { useMemo } from 'react';
import MenuItem from './MenuItem';
import Divider from './Divider';
import SubMenu from './SubMenu';
import "./style/menu.css";
import { jsx as _jsx } from "react/jsx-runtime";
var Menu = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-menu',
    className,
    children,
    bordered,
    theme = 'light',
    inlineIndent = 10,
    inlineCollapsed
  } = props,
      htmlProps = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = useMemo(() => [prefixCls, bordered ? 'w-bordered' : null, inlineCollapsed ? prefixCls + "-inline-collapsed" : null, theme ? prefixCls + "-" + theme : null, className].filter(Boolean).join(' ').trim(), [prefixCls, bordered, inlineCollapsed, theme, className]);
  return /*#__PURE__*/_jsx("ul", _extends({}, htmlProps, {
    ref: ref,
    className: cls,
    "data-menu": "menu",
    children: React.Children.map(children, (child, key) => {
      if (! /*#__PURE__*/React.isValidElement(child)) return child;
      var props = {}; // Sub Menu

      if (child.props.children && child.type === SubMenu) {
        props.inlineIndent = inlineIndent;
      }

      return /*#__PURE__*/React.cloneElement(child, Object.assign(_extends({}, props), child.props, {
        key: "" + key
      }));
    })
  }));
});
Menu.Item = MenuItem;
Menu.SubMenu = SubMenu;
Menu.Divider = Divider;
Menu.displayName = 'uiw.Menu';
export default Menu;
//# sourceMappingURL=Menu.js.map