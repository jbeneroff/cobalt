import React from 'react';
import { IProps } from '@uiw/utils';
import { FormItemProps } from './FormItem';
import './style/form.less';
export interface FormProps<T> extends IProps, Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onChange' | 'onSubmit'> {
    prefixCls?: string;
    fields?: Record<string, FormFieldsProps<T>>;
    onSubmit?: (state: FormSubmitProps) => any;
    afterSubmit?: (result: FormAfterSubmitProps) => any;
    onChange?: (state: FormState) => void;
    onSubmitError?: (evn: any) => any;
    resetOnSubmit?: boolean;
    children?: (handle: FormChildrenProps) => JSX.Element | JSX.Element | undefined;
}
export interface FormState {
    submitting: boolean;
    initial: Record<string, any>;
    current: FormState['initial'];
    errors: Record<string, any>;
}
export interface FormFieldsProps<T> extends FormItemProps<T> {
    name?: string;
    children?: React.ReactNode;
    help?: React.ReactNode;
    labelFor?: string;
    inline?: boolean;
    checked?: boolean;
    initialValue?: string | number | T;
    validator?: (currentValue: any) => any;
}
export interface FormSubmitProps {
    initial: FormState['initial'];
    current: FormState['current'];
}
export interface FormAfterSubmitProps {
    state: FormState;
    response: any;
    reset: () => void;
}
export interface FormChildrenProps {
    fields: Record<string, React.ReactElement>;
    resetForm: () => void;
    canSubmit: () => boolean;
    state: FormState;
}
export declare type FormElementProps = {
    id?: string;
    name?: string;
    value?: string;
    checked?: boolean;
    onChange?: (env: React.BaseSyntheticEvent<HTMLInputElement>, list?: string[]) => void;
};
declare const _default: React.ForwardRefExoticComponent<FormProps<{}> & React.RefAttributes<HTMLInputElement>>;
export default _default;
