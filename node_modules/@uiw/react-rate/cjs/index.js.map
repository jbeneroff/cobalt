{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Rate",
    "props",
    "prefixCls",
    "count",
    "value",
    "defValue",
    "className",
    "allowHalf",
    "character",
    "readOnly",
    "disabled",
    "onChange",
    "noop",
    "onHoverChange",
    "color",
    "other",
    "setValue",
    "hoverCount",
    "setHoverCount",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "prevValue",
    "setPrevValue",
    "onMouseLeave",
    "getValue",
    "e",
    "key",
    "persist",
    "currentValue",
    "isLeft",
    "clientX",
    "currentTarget",
    "getBoundingClientRect",
    "left",
    "width",
    "onMouseMove",
    "onClick",
    "Array",
    "map",
    "_",
    "idx",
    "halfon",
    "Math",
    "ceil",
    "activeCls"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useState, useMemo } from 'react';\nimport { IProps, HTMLDivProps, HTMLSpanProps, noop } from '@uiw/utils';\nimport './style/index.less';\n\nexport interface RateProps extends IProps, Omit<HTMLDivProps, 'onChange'> {\n  value?: number;\n  readOnly?: boolean;\n  allowHalf?: boolean;\n  count?: number;\n  color?: string;\n  disabled?: boolean;\n  character?: React.ReactNode;\n  onChange?: (key: number) => void;\n  onHoverChange?: (key: number) => void;\n}\n\nexport default function Rate(props: RateProps = {}) {\n  const {\n    prefixCls = 'w-rate',\n    count = 5,\n    value: defValue = 0,\n    className,\n    allowHalf,\n    character = 'â˜…',\n    readOnly = false,\n    disabled,\n    onChange = noop,\n    onHoverChange = noop,\n    color,\n    ...other\n  } = props;\n  const [value, setValue] = useState(defValue);\n  const [hoverCount, setHoverCount] = useState(-1);\n  const cls = [prefixCls, className, disabled ? 'disabled' : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  const [prevValue, setPrevValue] = useState<number>();\n  if (defValue !== prevValue) {\n    setPrevValue(defValue);\n  }\n\n  useMemo(() => {\n    if (value !== prevValue) {\n      setValue(defValue);\n    }\n  }, [prevValue]);\n\n  function onMouseLeave() {\n    setHoverCount(-1);\n  }\n\n  function getValue(e: React.MouseEvent<HTMLElement>, key: number) {\n    e.persist();\n    let currentValue = key;\n    const isLeft =\n      e.clientX - e.currentTarget.getBoundingClientRect().left <=\n      e.currentTarget.getBoundingClientRect().width / 2;\n    if (allowHalf) {\n      e.persist();\n      currentValue = isLeft ? key + 0.5 : key + 1;\n    } else {\n      currentValue = key + 1;\n    }\n    return currentValue;\n  }\n\n  function onMouseMove(e: React.MouseEvent<HTMLElement>, key: number) {\n    const currentValue = getValue(e, key);\n    if (hoverCount !== currentValue) {\n      setHoverCount(currentValue);\n      onHoverChange(currentValue);\n    }\n  }\n  function onClick(e: React.MouseEvent<HTMLElement>, key: number) {\n    if (readOnly) return;\n    const currentValue = getValue(e, key);\n    setValue(currentValue);\n    onChange(currentValue);\n  }\n  return (\n    <div {...other} className={cls} onMouseLeave={() => onMouseLeave()}>\n      {[...Array(count)].map((_, idx) => {\n        const halfon =\n          (value <= idx + 0.5 &&\n            Math.ceil(value) - 1 === idx &&\n            hoverCount === -1) ||\n          hoverCount === idx + 0.5;\n        const activeCls = [\n          `${prefixCls}-hight`,\n          idx + 1 <= value && hoverCount === -1 ? 'star-on' : null,\n          idx + 1 <= hoverCount ? 'hover-on' : null,\n          halfon ? 'half-on' : null,\n        ]\n          .filter(Boolean)\n          .join(' ')\n          .trim();\n        const props: HTMLSpanProps = {};\n        if (!readOnly) {\n          props.onClick = (e) => onClick(e, idx);\n          props.onMouseMove = (e) => onMouseMove(e, idx);\n        }\n        return (\n          <span key={idx} {...props}>\n            <span style={{ color }} className={activeCls}>\n              {character}\n            </span>\n            <span className={`${prefixCls}-bg`}>{character}</span>\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n"
  ]
}