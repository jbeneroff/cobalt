import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "style", "today", "date", "data", "monthLabel", "titleFormat", "todayLabel", "panelDate", "onPaging", "onSelectDay"];
import React, { useEffect, useMemo, useState } from 'react';
import { DatePickerDay } from '@uiw/react-date-picker';
import Icon from '@uiw/react-icon';
import formatter from '@uiw/formatter';
import RenderDay from './DayLabel';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var MONTH_LABEL = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
export default function Calendar(props) {
  var {
    prefixCls = 'w-calendar',
    className,
    style,
    today = new Date(),
    date,
    data,
    monthLabel = MONTH_LABEL,
    titleFormat = 'YYYY/MM',
    todayLabel = '今天',
    onPaging,
    onSelectDay: _onSelectDay
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = [prefixCls, className].filter(Boolean).join(' ').trim();
  var [panelDate, setPanelDate] = useState(props.panelDate || new Date());
  useEffect(() => {
    if (props.panelDate !== panelDate) {
      setPanelDate(panelDate);
    }
  }, [props.panelDate]);

  function handlePaging(type) {
    var currentDate = new Date();

    if (type === 'today') {
      currentDate = today || new Date();
    } else {
      var _month = panelDate.getMonth();

      if (panelDate && type === 'prev') {
        panelDate.setMonth(_month - 1);
      }

      if (panelDate && type === 'next') {
        panelDate.setMonth(_month + 1);
      }

      currentDate = panelDate;
    }

    setPanelDate(new Date(currentDate));
    onPaging && onPaging(type, currentDate.getMonth() + 1, currentDate);
  }

  var titleLable = useMemo(() => /*#__PURE__*/_jsx("div", {
    className: prefixCls + "-title",
    children: formatter(titleFormat, panelDate)
  }), [prefixCls, titleFormat, panelDate]);
  var btngroup = useMemo(() => /*#__PURE__*/_jsxs("div", {
    className: prefixCls + "-btn-group",
    children: [/*#__PURE__*/_jsx(Icon, {
      type: "down",
      onClick: () => handlePaging('prev')
    }), /*#__PURE__*/_jsx("span", {
      className: prefixCls + "-btn",
      onClick: () => handlePaging('today'),
      children: todayLabel
    }), /*#__PURE__*/_jsx(Icon, {
      type: "down",
      onClick: () => handlePaging('next')
    })]
  }), [prefixCls, todayLabel]);
  return /*#__PURE__*/_jsxs("div", {
    className: cls,
    style: style,
    children: [/*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-caption",
      children: [titleLable, btngroup]
    }), /*#__PURE__*/_jsx(DatePickerDay, _extends({
      onSelectDay: (currentDate, dateSource) => {
        setPanelDate(currentDate);
        _onSelectDay && _onSelectDay(currentDate, dateSource);
      },
      renderDay: (day, propsNext) => /*#__PURE__*/_jsx(RenderDay, {
        prefixCls: prefixCls,
        day: day,
        data: data,
        currentDate: propsNext.date
      }),
      date: date,
      today: today,
      panelDate: panelDate || new Date()
    }, otherProps))]
  });
}
//# sourceMappingURL=index.js.map