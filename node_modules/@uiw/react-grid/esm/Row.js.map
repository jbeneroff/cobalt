{
  "version": 3,
  "sources": [
    "../src/Row.tsx"
  ],
  "names": [
    "React",
    "Row",
    "props",
    "prefixCls",
    "className",
    "gutter",
    "justify",
    "align",
    "other",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "gutterStyl",
    "paddingLeft",
    "paddingRight",
    "Children",
    "toArray",
    "children",
    "map",
    "child",
    "isValidElement",
    "cloneElement",
    "Object",
    "assign",
    "style"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;AAeA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAmC;AAAA,MAAtBA,KAAsB;AAAtBA,IAAAA,KAAsB,GAAJ,EAAI;AAAA;;AACxC,MAAM;AACJC,IAAAA,SAAS,GAAG,OADR;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,MAAM,GAAG,CAHL;AAIJC,IAAAA,OAJI;AAKJC,IAAAA;AALI,MAOFL,KAPJ;AAAA,MAMKM,KANL,iCAOIN,KAPJ;;AAQA,MAAMO,GAAG,GAAG,CACVN,SADU,EAEVC,SAFU,EAGVG,KAAK,GAAMJ,SAAN,eAAyBI,KAAzB,GAAmC,IAH9B,EAIVD,OAAO,GAAMH,SAAN,iBAA2BG,OAA3B,GAAuC,IAJpC,EAMTI,MANS,CAMFC,OANE,EAOTC,IAPS,CAOJ,GAPI,EAQTC,IARS,EAAZ;AASA,MAAMC,UAAU,GAAG,CAACT,MAAD,GACf,EADe,GAEf;AAAEU,IAAAA,WAAW,EAAEV,MAAM,GAAG,CAAxB;AAA2BW,IAAAA,YAAY,EAAEX,MAAM,GAAG;AAAlD,GAFJ;AAGA,sBACE,yBAASG,KAAT;AAAgB,IAAA,SAAS,EAAEC,GAA3B;AAAA,cACGT,KAAK,CAACiB,QAAN,CAAeC,OAAf,CAAuBhB,KAAK,CAACiB,QAA7B,EAAuCC,GAAvC,CAA4CC,KAAD,IAAW;AACrD,UAAI,eAACrB,KAAK,CAACsB,cAAN,CAAqBD,KAArB,CAAL,EAAkC,OAAOA,KAAP;AAClC,0BAAOrB,KAAK,CAACuB,YAAN,CACLF,KADK,EAELG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAK,CAACnB,KAAxB,EAA+B;AAC7BwB,QAAAA,KAAK,eAAOL,KAAK,CAACnB,KAAN,CAAYwB,KAAnB,EAA6BZ,UAA7B;AADwB,OAA/B,CAFK,CAAP;AAMD,KARA;AADH,KADF;AAaD",
  "sourcesContent": [
    "import React from 'react';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport './style/row.less';\n\nexport interface RowProps extends IProps, HTMLDivProps {\n  fixed?: boolean;\n  gutter?: number;\n  justify?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly';\n  align?: 'top' | 'middle' | 'bottom' | 'baseline';\n}\n\nexport function Row(props: RowProps = {}) {\n  const {\n    prefixCls = 'w-row',\n    className,\n    gutter = 0,\n    justify,\n    align,\n    ...other\n  } = props;\n  const cls = [\n    prefixCls,\n    className,\n    align ? `${prefixCls}-align-${align}` : null,\n    justify ? `${prefixCls}-justify-${justify}` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  const gutterStyl = !gutter\n    ? {}\n    : { paddingLeft: gutter / 2, paddingRight: gutter / 2 };\n  return (\n    <div {...other} className={cls}>\n      {React.Children.toArray(props.children).map((child) => {\n        if (!React.isValidElement(child)) return child;\n        return React.cloneElement(\n          child,\n          Object.assign({}, child.props, {\n            style: { ...child.props.style, ...gutterStyl },\n          }),\n        );\n      })}\n    </div>\n  );\n}\n"
  ]
}