{
  "version": 3,
  "sources": [
    "../../src/util/getWindowSizes.ts"
  ],
  "names": [
    "isIE",
    "getSize",
    "axis",
    "body",
    "html",
    "computedStyle",
    "Math",
    "max",
    "parseInt",
    "getWindowSizes",
    "document",
    "documentElement",
    "getComputedStyle",
    "height",
    "width"
  ],
  "mappings": "AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAcA,SAASC,OAAT,CACEC,IADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,aAJF,EAKE;AACA,SAAOC,IAAI,CAACC,GAAL,CACLJ,IAAI,YAAUD,IAAV,CADC,EAELC,IAAI,YAAUD,IAAV,CAFC,EAGLE,IAAI,YAAUF,IAAV,CAHC,EAILE,IAAI,YAAUF,IAAV,CAJC,EAKLE,IAAI,YAAUF,IAAV,CALC,EAMLF,IAAI,CAAC,EAAD,CAAJ,GACIQ,QAAQ,CAACJ,IAAI,YAAUF,IAAV,CAAL,EAAwB,EAAxB,CAAR,GACEM,QAAQ,CACNH,aAAa,aAAUH,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,MAAtC,EADP,EAEN,EAFM,CADV,GAKEM,QAAQ,CACNH,aAAa,aAAUH,IAAI,KAAK,QAAT,GAAoB,QAApB,GAA+B,OAAzC,EADP,EAEN,EAFM,CANd,GAUI,CAhBC,CAAP;AAkBD;;AAID,eAAe,SAASO,cAAT,CAAwBC,QAAxB,EAA4D;AACzE,MAAMP,IAAI,GAAGO,QAAQ,CAACP,IAAtB;AACA,MAAMC,IAAI,GAAGM,QAAQ,CAACC,eAAtB;AACA,MAAMN,aAAa,GAAGO,gBAAgB,CAACR,IAAD,CAAtC;AAEA,SAAO;AACLS,IAAAA,MAAM,EAAEZ,OAAO,CAAC,QAAD,EAAWE,IAAX,EAAiBC,IAAjB,EAAuBC,aAAvB,CADV;AAELS,IAAAA,KAAK,EAAEb,OAAO,CAAC,OAAD,EAAUE,IAAV,EAAgBC,IAAhB,EAAsBC,aAAtB;AAFT,GAAP;AAID",
  "sourcesContent": [
    "import isIE from './isIE';\n\ninterface BodyElement extends HTMLBodyElement {\n  [key: string]: any;\n}\n\ninterface IHTMLElement extends HTMLElement {\n  [key: string]: any;\n}\n\ninterface ComputedStyle extends CSSStyleDeclaration {\n  [key: string]: any;\n}\n\nfunction getSize(\n  axis: 'Height' | 'Width',\n  body: BodyElement,\n  html: IHTMLElement,\n  computedStyle: ComputedStyle,\n) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? parseInt(html[`offset${axis}`], 10) +\n          parseInt(\n            computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`],\n            10,\n          ) +\n          parseInt(\n            computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`],\n            10,\n          )\n      : 0,\n  );\n}\n\nexport type WindowSize = { height?: number; width?: number };\n\nexport default function getWindowSizes(document: HTMLDocument): WindowSize {\n  const body = document.body as HTMLBodyElement;\n  const html = document.documentElement as HTMLElement;\n  const computedStyle = getComputedStyle(html) as CSSStyleDeclaration;\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n"
  ]
}