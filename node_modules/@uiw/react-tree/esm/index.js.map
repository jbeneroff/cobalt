{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useState",
    "noop",
    "TreeNode",
    "isContained",
    "a",
    "b",
    "Array",
    "length",
    "aStr",
    "toString",
    "i",
    "len",
    "indexOf",
    "getChildKeys",
    "childs",
    "result",
    "forEach",
    "item",
    "push",
    "key",
    "children",
    "concat",
    "getParentKeys",
    "parent",
    "getParentSelectKeys",
    "selectedKeys",
    "Tree",
    "props",
    "prefixCls",
    "icon",
    "data",
    "openKeys",
    "defaultExpandAll",
    "showLine",
    "iconAnimation",
    "isSelected",
    "checkStrictly",
    "multiple",
    "onExpand",
    "onSelected",
    "className",
    "renderTitle",
    "elementProps",
    "curOpenKeys",
    "setCurOpenKeys",
    "curSelectedKeys",
    "setCurSelectedKeys",
    "arrOpenKeys",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "onItemClick",
    "evn",
    "currentKeys",
    "find",
    "v",
    "currentTarget",
    "replace",
    "expanded",
    "onItemSelected",
    "selKeys",
    "findKey",
    "selected",
    "val",
    "from",
    "Set"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useState } from 'react';\nimport { IconProps } from '@uiw/react-icon';\nimport { IProps, HTMLDivProps, noop } from '@uiw/utils';\nimport TreeNode from './TreeNode';\nimport './style/index.less';\n\nexport type TreeRenderTitleNode<T> = {\n  selected?: boolean;\n  noChild?: boolean;\n  isHalfChecked?: boolean;\n  openKeys?: TreeProps<T>['openKeys'];\n  selectedKeys?: TreeProps<T>['selectedKeys'];\n};\n\nexport interface TreeProps<T> extends IProps, HTMLDivProps {\n  icon?: IconProps<T>['type'];\n  data?: TreeData[];\n  openKeys?: TreeData['key'][];\n  selectedKeys?: TreeData['key'][];\n  defaultExpandAll?: boolean;\n  /**\n   * 是否自动展开父节点\n   */\n  autoExpandParent?: boolean;\n  /**\n   * 是否展示连接线\n   */\n  showLine?: boolean;\n  iconAnimation?: boolean;\n  isSelected?: boolean;\n  /**\n   * 子节点受父节点控制设置 `true`，需要配合 `multiple` 参数使用。\n   */\n  checkStrictly?: boolean;\n  /**\n   * 支持点选多个节点\n   */\n  multiple?: boolean;\n  renderTitle?: (\n    item: TreeData,\n    node: TreeRenderTitleNode<T>,\n  ) => React.ReactElement;\n  onExpand?: (\n    key: TreeData['key'],\n    expanded: boolean,\n    item: TreeData,\n    evn: React.MouseEvent<HTMLElement>,\n  ) => void;\n  onSelected?: (\n    keys: TreeData['key'][],\n    key: TreeData['key'],\n    selected: boolean,\n    item: TreeData,\n    evn: React.MouseEvent<HTMLElement>,\n  ) => void;\n}\n\nexport interface TreeData {\n  label?: React.ReactNode;\n  children?: TreeData[];\n  key?: string | number;\n  [keyName: string]: any;\n}\n\n/**\n * a contains b\n * @param {Array} a\n * @param {Array} b\n */\nconst isContained = (a: any[], b: any[]) => {\n  if (!(a instanceof Array) || !(b instanceof Array)) return false;\n  if (a.length < b.length) return false;\n  const aStr = a.toString();\n  for (let i = 0, len = b.length; i < len; i += 1) {\n    if (aStr.indexOf(b[i]) === -1) return false;\n  }\n  return true;\n};\n\nexport const getChildKeys = (\n  childs: TreeData[] = [],\n  result: TreeData['key'][] = [],\n): TreeData['key'][] => {\n  childs.forEach((item) => {\n    result.push(item.key as string | number);\n    if (item.children && item.children.length > 0) {\n      result = result.concat(getChildKeys(item.children));\n    }\n  });\n  return result;\n};\n\nconst getParentKeys = (\n  childs: TreeData = {},\n  result: TreeData['key'][] = [],\n) => {\n  if (childs.key) {\n    result.push(childs.key);\n  }\n  if (childs.parent) {\n    result = getParentKeys(childs.parent, result);\n  }\n  return result;\n};\n\nconst getParentSelectKeys = (\n  childs: TreeData = {},\n  selectedKeys: TreeData['key'][] = [],\n  result: TreeData['key'][] = [],\n) => {\n  if (\n    childs.key &&\n    childs.children &&\n    isContained(selectedKeys, getChildKeys(childs.children))\n  ) {\n    result.push(childs.key);\n    if (childs.parent && !childs.parent.parent) {\n      if (isContained(selectedKeys, getChildKeys(childs.children))) {\n        selectedKeys = selectedKeys.concat(result);\n      }\n      if (isContained(selectedKeys, getChildKeys(childs.parent.children))) {\n        result.push(childs.parent.key);\n      }\n    }\n  }\n  if (childs.parent) {\n    result = getParentSelectKeys(childs.parent, selectedKeys, result);\n  }\n  return result;\n};\n\nexport default function Tree<T>(props: TreeProps<T>) {\n  const {\n    prefixCls = 'w-tree',\n    icon = 'caret-right',\n    data = [],\n    openKeys = [],\n    selectedKeys = [],\n    defaultExpandAll = false,\n    showLine = false,\n    iconAnimation = true,\n    isSelected = true,\n    checkStrictly = false,\n    multiple = false,\n    onExpand = noop,\n    onSelected = noop,\n\n    className,\n    autoExpandParent,\n    renderTitle,\n    ...elementProps\n  } = props;\n\n  const [curOpenKeys, setCurOpenKeys] = useState(openKeys);\n  const [curSelectedKeys, setCurSelectedKeys] = useState(selectedKeys);\n\n  // useEffect(() => setCurOpenKeys(openKeys), [openKeys]);\n  // useEffect(() => setCurSelectedKeys(selectedKeys), [selectedKeys]);\n\n  useEffect(() => {\n    const arrOpenKeys = getChildKeys(data);\n    if (defaultExpandAll) {\n      setCurOpenKeys(arrOpenKeys);\n    }\n  }, []);\n\n  const cls = [className, prefixCls, showLine ? `${prefixCls}-line` : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  function onItemClick(item: TreeData, evn: React.MouseEvent<HTMLElement>) {\n    if (!item.children) {\n      return;\n    }\n    // const { onExpand } = this.props;\n    // const { openKeys } = this.state;\n    let currentKeys = [...(curOpenKeys as TreeData['key'][])];\n    const key = currentKeys.find((v) => v === item.key);\n    const cls = evn.currentTarget.className.replace(/(\\s)open/g, '');\n    let expanded = false;\n    if (!key && item.key) {\n      currentKeys.push(item.key);\n      evn.currentTarget.className = [cls, 'open']\n        .filter(Boolean)\n        .join(' ')\n        .trim();\n      expanded = true;\n    } else {\n      currentKeys = currentKeys.filter((v) => v !== item.key);\n      evn.currentTarget.className = cls;\n    }\n    setCurOpenKeys(currentKeys);\n    onExpand && onExpand(item.key, expanded, item, evn);\n  }\n  function onItemSelected(item: TreeData, evn: React.MouseEvent<HTMLElement>) {\n    // const { onSelected, multiple, checkStrictly } = this.props;\n    let selKeys = [...(curSelectedKeys as TreeData['key'][])];\n    const findKey = selKeys.find((v) => v === item.key);\n    let selected = false;\n    if (!findKey) {\n      selected = true;\n      selKeys.push(item.key);\n    } else {\n      selKeys = selKeys.filter((v) => v !== item.key);\n    }\n    if (checkStrictly) {\n      if (!findKey) {\n        selKeys = selKeys.concat(\n          getChildKeys(item.children).filter(\n            (val) => selKeys.indexOf(val) === -1,\n          ),\n        );\n        selKeys = selKeys.concat(getParentSelectKeys(item, selKeys));\n        selKeys = Array.from(new Set(selKeys)); // Remove duplicates.\n      } else {\n        selKeys = selKeys.filter(\n          (val) => getChildKeys(item.children).indexOf(val) === -1,\n        );\n        selKeys = selKeys.filter(\n          (val) => getParentKeys(item.parent).indexOf(val) === -1,\n        );\n      }\n    }\n    if (!multiple) {\n      selKeys = !findKey ? [item.key] : [];\n    }\n    setCurSelectedKeys(selKeys);\n    onSelected && onSelected(selKeys, item.key, selected, item, evn);\n  }\n  return (\n    <div className={cls} {...elementProps}>\n      <TreeNode\n        {...{\n          icon,\n          iconAnimation,\n          isSelected,\n          openKeys: curOpenKeys,\n          selectedKeys: curSelectedKeys,\n          prefixCls,\n          renderTitle,\n        }}\n        onItemClick={onItemClick}\n        onItemSelected={onItemSelected}\n        data={data}\n        level={1}\n      />\n    </div>\n  );\n}\n"
  ]
}