"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports["default"] = DatePicker;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _formatter = _interopRequireDefault(require("@uiw/formatter"));

var _utils = require("@uiw/utils");

var _reactTimePicker = require("@uiw/react-time-picker");

var _DatePickerDay = require("./DatePickerDay");

Object.keys(_DatePickerDay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _DatePickerDay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DatePickerDay[key];
    }
  });
});

var _DatePickerMonth = require("./DatePickerMonth");

Object.keys(_DatePickerMonth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _DatePickerMonth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DatePickerMonth[key];
    }
  });
});

var _DatePickerYear = require("./DatePickerYear");

Object.keys(_DatePickerYear).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _DatePickerYear[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DatePickerYear[key];
    }
  });
});

var _DatePickerCaption = require("./DatePickerCaption");

Object.keys(_DatePickerCaption).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _DatePickerCaption[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DatePickerCaption[key];
    }
  });
});

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "weekday", "weekTitle", "monthLabel", "date", "today", "todayButton", "panelDate", "disabledDate", "renderDay", "onChange", "showTime"];
var MONTH_LABEL = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];

function DatePicker(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-datepicker' : _props$prefixCls,
      className = props.className,
      weekday = props.weekday,
      weekTitle = props.weekTitle,
      _props$monthLabel = props.monthLabel,
      monthLabel = _props$monthLabel === void 0 ? MONTH_LABEL : _props$monthLabel,
      date = props.date,
      _props$today = props.today,
      today = _props$today === void 0 ? new Date() : _props$today,
      todayButton = props.todayButton,
      _props$panelDate = props.panelDate,
      panelDate = _props$panelDate === void 0 ? new Date() : _props$panelDate,
      disabledDate = props.disabledDate,
      renderDay = props.renderDay,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? _utils.noop : _props$onChange,
      showTime = props.showTime,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)('day'),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      type = _useState2[0],
      setType = _useState2[1];

  var _useState3 = (0, _react.useState)(date),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      selectDate = _useState4[0],
      setSelectDate = _useState4[1];

  var _useState5 = (0, _react.useState)(panelDate),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      selectPanelDate = _useState6[0],
      setSelectPanelDate = _useState6[1];

  (0, _react.useEffect)(function () {
    if (date) {
      setSelectDate(date);
      setSelectPanelDate(date);
    }
  }, [date]);
  var format = (0, _react.useMemo)(function () {
    return showTime && showTime.format ? showTime.format : 'HH:mm:ss';
  }, [showTime]);

  function handleSelected(curType) {
    if (curType && /^(year|month|time)$/.test(curType)) {
      if (type === 'time') {
        curType = 'day';
      }

      setType(curType);
    } else {
      var currentDate = new Date(selectDate || selectPanelDate);
      var month = currentDate.getMonth();

      if (curType === 'prev') {
        month -= 1;
      }

      if (curType === 'next') {
        month += 1;
      }

      currentDate.setMonth(month);
      setSelectPanelDate(curType === 'today' ? today : currentDate);
      setSelectDate(curType === 'today' ? today : currentDate);
      setType('day');
    }
  }

  function onSelectedTime(type, num) {
    (selectPanelDate || new Date())["set".concat(type)](num);
    setSelectPanelDate(new Date(selectPanelDate));
    onChange && onChange(new Date(selectPanelDate));
  }

  function onSelectedDate(type, month, paging) {
    (selectPanelDate || new Date())[type](month);
    setSelectPanelDate(new Date(selectPanelDate));
    setType('day');
    onChange && onChange(new Date(selectPanelDate));
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: [prefixCls, className].filter(Boolean).join(' ').trim()
  }, other), {}, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePickerCaption.DatePickerCaption, {
      todayButton: todayButton,
      panelDate: selectPanelDate,
      monthLabel: monthLabel,
      onSelected: handleSelected
    }), type === 'day' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePickerDay.DatePickerDay, {
      prefixCls: prefixCls,
      disabledDate: disabledDate,
      onSelectDay: function onSelectDay(selectedDate, dateSource) {
        setSelectPanelDate(selectedDate);
        onChange(selectedDate, dateSource);
      },
      renderDay: renderDay,
      date: selectDate,
      today: today || new Date(),
      panelDate: selectPanelDate,
      weekday: weekday,
      weekTitle: weekTitle
    }), type === 'month' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePickerMonth.DatePickerMonth, {
      panelDate: selectPanelDate,
      monthLabel: monthLabel,
      prefixCls: prefixCls,
      onSelected: function onSelected(num) {
        return onSelectedDate('setMonth', num);
      }
    }), type === 'year' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePickerYear.DatePickerYear, {
      prefixCls: prefixCls,
      panelDate: selectDate || selectPanelDate,
      onSelected: function onSelected(num) {
        return onSelectedDate('setFullYear', num);
      }
    }), type === 'time' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactTimePicker.TimePickerTime, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      date: selectPanelDate
    }, showTime), {}, {
      className: "".concat(prefixCls, "-timepicker"),
      onSelected: onSelectedTime
    })), showTime && format && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "".concat(prefixCls, "-time-btn"),
      onClick: function onClick() {
        return handleSelected('time');
      },
      children: (0, _formatter["default"])(format, selectDate || selectPanelDate)
    })]
  }));
}
//# sourceMappingURL=index.js.map