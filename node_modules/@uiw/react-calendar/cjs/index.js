"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Calendar;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactDatePicker = require("@uiw/react-date-picker");

var _reactIcon = _interopRequireDefault(require("@uiw/react-icon"));

var _formatter = _interopRequireDefault(require("@uiw/formatter"));

var _DayLabel = _interopRequireDefault(require("./DayLabel"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "style", "today", "date", "data", "monthLabel", "titleFormat", "todayLabel", "panelDate", "onPaging", "onSelectDay"];
var MONTH_LABEL = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];

function Calendar(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-calendar' : _props$prefixCls,
      className = props.className,
      style = props.style,
      _props$today = props.today,
      today = _props$today === void 0 ? new Date() : _props$today,
      date = props.date,
      data = props.data,
      _props$monthLabel = props.monthLabel,
      monthLabel = _props$monthLabel === void 0 ? MONTH_LABEL : _props$monthLabel,
      _props$titleFormat = props.titleFormat,
      titleFormat = _props$titleFormat === void 0 ? 'YYYY/MM' : _props$titleFormat,
      _props$todayLabel = props.todayLabel,
      todayLabel = _props$todayLabel === void 0 ? '今天' : _props$todayLabel,
      _ = props.panelDate,
      onPaging = props.onPaging,
      _onSelectDay = props.onSelectDay,
      otherProps = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var cls = [prefixCls, className].filter(Boolean).join(' ').trim();

  var _useState = (0, _react.useState)(props.panelDate || new Date()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      panelDate = _useState2[0],
      setPanelDate = _useState2[1];

  (0, _react.useEffect)(function () {
    if (props.panelDate !== panelDate) {
      setPanelDate(panelDate);
    }
  }, [props.panelDate]);

  function handlePaging(type) {
    var currentDate = new Date();

    if (type === 'today') {
      currentDate = today || new Date();
    } else {
      var _month = panelDate.getMonth();

      if (panelDate && type === 'prev') {
        panelDate.setMonth(_month - 1);
      }

      if (panelDate && type === 'next') {
        panelDate.setMonth(_month + 1);
      }

      currentDate = panelDate;
    }

    setPanelDate(new Date(currentDate));
    onPaging && onPaging(type, currentDate.getMonth() + 1, currentDate);
  }

  var titleLable = (0, _react.useMemo)(function () {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "".concat(prefixCls, "-title"),
      children: (0, _formatter["default"])(titleFormat, panelDate)
    });
  }, [prefixCls, titleFormat, panelDate]);
  var btngroup = (0, _react.useMemo)(function () {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "".concat(prefixCls, "-btn-group"),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactIcon["default"], {
        type: "down",
        onClick: function onClick() {
          return handlePaging('prev');
        }
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "".concat(prefixCls, "-btn"),
        onClick: function onClick() {
          return handlePaging('today');
        },
        children: todayLabel
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactIcon["default"], {
        type: "down",
        onClick: function onClick() {
          return handlePaging('next');
        }
      })]
    });
  }, [prefixCls, todayLabel]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: cls,
    style: style,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "".concat(prefixCls, "-caption"),
      children: [titleLable, btngroup]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDatePicker.DatePickerDay, (0, _objectSpread2["default"])({
      onSelectDay: function onSelectDay(currentDate, dateSource) {
        setPanelDate(currentDate);
        _onSelectDay && _onSelectDay(currentDate, dateSource);
      },
      renderDay: function renderDay(day, propsNext) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayLabel["default"], {
          prefixCls: prefixCls,
          day: day,
          data: data,
          currentDate: propsNext.date
        });
      },
      date: date,
      today: today,
      panelDate: panelDate || new Date()
    }, otherProps))]
  });
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map