{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useMemo",
    "svgPaths",
    "Icon",
    "forwardRef",
    "props",
    "ref",
    "className",
    "prefixCls",
    "verticalAlign",
    "tagName",
    "TagName",
    "color",
    "type",
    "spin",
    "others",
    "renderSVGPaths",
    "svgPathsData",
    "pathStrings",
    "map",
    "d",
    "i",
    "svg",
    "isValidElement",
    "cloneElement",
    "fill",
    "style",
    "propps",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA;;AAoBA,IAAMC,IAAI,gBAAGH,KAAK,CAACI,UAAN,CAA4C,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvE,MAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,SAAS,GAAG,QAFR;AAGJC,IAAAA,aAAa,GAAG,QAHZ;AAIJC,IAAAA,OAAO,EAAEC,OAAO,GAAG,MAJf;AAKJC,IAAAA,KALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,IAAI,GAAG;AAPH,MASFT,KATJ;AAAA,MAQKU,MARL,iCASIV,KATJ;;AAWA,MAAMW,cAAc,GAAGf,OAAO,CAAC,MAAM;AACnC,QAAI,CAACY,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAMI,YAAY,GAAGf,QAArB;AACA,QAAMgB,WAAqB,GAAGD,YAAY,CAACJ,IAAD,CAAZ,IAAmC,EAAjE;AACA,WAAOK,WAAW,CAACC,GAAZ,CAAgB,CAACC,CAAD,EAAIC,CAAJ,kBAAU;AAAc,MAAA,CAAC,EAAED,CAAjB;AAAoB,MAAA,QAAQ,EAAC;AAA7B,OAAWC,CAAX,CAA1B,CAAP;AACD,GAP6B,EAO3B,CAACR,IAAD,CAP2B,CAA9B;AASA,MAAIS,GAAG,GAAG,IAAV;;AACA,MAAI,OAAOT,IAAP,KAAgB,QAApB,EAA8B;AAC5BS,IAAAA,GAAG,gBACD;AAAK,MAAA,IAAI,EAAEV,KAAX;AAAkB,MAAA,OAAO,EAAC,WAA1B;AAAA,gBACGI;AADH,MADF;AAKD,GAND,MAMO,kBAAIhB,KAAK,CAACuB,cAAN,CAAqBV,IAArB,CAAJ,EAAgC;AACrCS,IAAAA,GAAG,gBAAGtB,KAAK,CAACwB,YAAN,CAAmBX,IAAnB,EAA0D;AAC9DY,MAAAA,IAAI,EAAEb;AADwD,KAA1D,CAAN;AAGD,GAJM,MAIA;AACL,WAAO,IAAP;AACD;;AACDG,EAAAA,MAAM,CAACW,KAAP;AAAiBD,IAAAA,IAAI,EAAE;AAAvB,KAA0CV,MAAM,CAACW,KAAjD;;AACA,MAAMC,MAAM,gBACPZ,MADO;AAEVR,IAAAA,SAAS,EAAE,CACTC,SADS,EAETD,SAFS,EAGTC,SAAS,IAAIC,aAAb,GAAgCD,SAAhC,SAA6CC,aAA7C,GAA+D,IAHtD,EAITK,IAAI,IAAIN,SAAR,GAAuBA,SAAvB,aAA0C,IAJjC,EAMRoB,MANQ,CAMDC,OANC,EAORC,IAPQ,CAOH,GAPG,EAQRC,IARQ;AAFD,IAAZ;;AAYA,sBAAO,KAAC,OAAD,eAAaJ,MAAb;AAAA,cAAsBL;AAAtB,KAAP;AACD,CAjDY,CAAb;AAmDA,eAAenB,IAAf",
  "sourcesContent": [
    "import React, { useMemo } from 'react';\nimport svgPaths from '@uiw/icons/fonts/w-icon.json';\nimport './style/index.less';\n\ntype ElementTag<T = any> = T extends HTMLElement ? React.HTMLAttributes<T> : T;\n\nexport type IconsName = keyof typeof svgPaths;\nexport interface IconProps<T = HTMLSpanElement> extends ElementTag {\n  style?: React.CSSProperties;\n  className?: string;\n  prefixCls?: string;\n  /**\n   * HTML tag to use for the rendered element.\n   * @default \"span\"\n   */\n  tagName?: T extends HTMLElement ? keyof JSX.IntrinsicElements : T;\n  type?: IconsName | null | T;\n  spin?: boolean;\n  color?: string;\n  verticalAlign?: 'middle' | 'baseline';\n}\n\nconst Icon = React.forwardRef<HTMLDivElement, IconProps>((props, ref) => {\n  const {\n    className,\n    prefixCls = 'w-icon',\n    verticalAlign = 'middle',\n    tagName: TagName = 'span',\n    color,\n    type,\n    spin = false,\n    ...others\n  } = props;\n\n  const renderSVGPaths = useMemo(() => {\n    if (!type) {\n      return null;\n    }\n    const svgPathsData = svgPaths;\n    const pathStrings: string[] = svgPathsData[type as IconsName] || [];\n    return pathStrings.map((d, i) => <path key={i} d={d} fillRule=\"evenodd\" />);\n  }, [type]);\n\n  let svg = null;\n  if (typeof type === 'string') {\n    svg = (\n      <svg fill={color} viewBox=\"0 0 20 20\">\n        {renderSVGPaths}\n      </svg>\n    );\n  } else if (React.isValidElement(type)) {\n    svg = React.cloneElement(type as unknown as React.ReactElement, {\n      fill: color,\n    });\n  } else {\n    return null;\n  }\n  others.style = { fill: 'currentColor', ...others.style };\n  const propps = {\n    ...others,\n    className: [\n      prefixCls,\n      className,\n      prefixCls && verticalAlign ? `${prefixCls}-${verticalAlign}` : null,\n      spin && prefixCls ? `${prefixCls}-spin` : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim(),\n  };\n  return <TagName {...propps}>{svg}</TagName>;\n});\n\nexport default Icon;\n"
  ]
}