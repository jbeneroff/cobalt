import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "placeholder", "value", "autoFocus", "className", "size", "style", "disabled", "onChange", "onBlur", "onFocus"];
import React, { useEffect, useState } from 'react';
import { noop } from '@uiw/utils';
import Input from '@uiw/react-input';
import "./style/input.css";
import { createElement as _createElement } from "react";
import { jsx as _jsx } from "react/jsx-runtime";

function InternalPinCode(props, ref) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls = 'w-pin-code',
    placeholder = 'â—‹',
    value = [],
    autoFocus,
    className,
    size = 'default',
    style,
    disabled,
    onChange = noop,
    onBlur = noop,
    onFocus = noop
  } = props,
      otherProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [input] = useState({});
  var [placehold, setPlacehold] = useState(placeholder);
  var [values, setValues] = useState(value);
  var cls = [prefixCls, className, size ? prefixCls + "-" + size : null, disabled ? 'disabled' : null].filter(Boolean).join(' ').trim();

  function handleChange(e, idx) {
    var val = e.target.value;
    val = val.charAt(val.length - 1);
    var arr = [...values];

    if (Number(val) > -1 && val) {
      e.currentTarget.value = val;
      arr[idx] = val;

      if (input[idx + 1]) {
        input[idx + 1].focus();
      }

      setValues(arr);
    } else if (!val) {
      arr[idx] = '';
      setValues(arr);
    }
  }

  function handleKeyDown(e, idx) {
    var val = e.currentTarget.value;
    var key = e.key.toLocaleLowerCase();

    if (!val && input[idx - 1] && /(backspace|delete)/.test(key)) {
      input[idx - 1].focus();
    }
  }

  useEffect(() => {
    if (values !== value) {
      onChange(values);
    }
  }, [values]);

  function handleBlur(event) {
    setPlacehold(placeholder);
    onBlur(event);
  }

  function handleFocus(event) {
    setPlacehold('');
    onFocus(event);
  }

  return /*#__PURE__*/_jsx("div", _extends({
    className: cls,
    style: style
  }, otherProps, {
    ref: ref,
    children: [...values].map((val, key) => {
      var inpProps = {
        min: 0,
        type: 'text',
        inputMode: 'numeric',
        autoComplete: 'off',
        value: val,
        onChange: e => handleChange(e, key),
        onKeyDown: e => handleKeyDown(e, key),
        onBlur: e => handleBlur(e),
        onFocus: e => handleFocus(e),
        className: prefixCls + "-inner",
        placeholder: placehold,
        disabled,
        size
      };

      if (autoFocus && key === 0) {
        inpProps.autoFocus = true;
      }

      var child = /*#__PURE__*/_createElement(Input, _extends({
        ref: instance => {
          if (instance) {
            input[key] = instance;
          }
        }
      }, inpProps, {
        key: key
      }));

      return child;
    })
  }));
}

export default /*#__PURE__*/React.forwardRef(InternalPinCode);
//# sourceMappingURL=index.js.map