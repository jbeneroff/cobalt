{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useState",
    "useEffect",
    "Overlay",
    "Button",
    "Icon",
    "noop",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "children",
    "useButton",
    "usePortal",
    "autoFocus",
    "isOpen",
    "_",
    "title",
    "cancelText",
    "cancelButtonProps",
    "confirmButtonProps",
    "content",
    "confirmText",
    "type",
    "icon",
    "maxWidth",
    "minWidth",
    "width",
    "isCloseButtonShown",
    "onCancel",
    "onConfirm",
    "bodyStyle",
    "other",
    "setIsOpen",
    "loading",
    "setLoading",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "onClose",
    "handleCancel",
    "e",
    "handleConfirm"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useState, useEffect } from 'react';\nimport Overlay, { OverlayProps } from '@uiw/react-overlay';\nimport Button, { ButtonType, ButtonProps } from '@uiw/react-button';\nimport Icon from '@uiw/react-icon';\nimport { IProps, noop } from '@uiw/utils';\nimport './style/index.less';\n\nexport interface ModalProps extends IProps, OverlayProps {\n  type?: ButtonType;\n  cancelText?: string;\n  confirmButtonProps?: Omit<ButtonProps, 'ref'>;\n  cancelButtonProps?: Omit<ButtonProps, 'ref'>;\n  content?: React.ReactNode;\n  confirmText?: string;\n  title?: string;\n  icon?: JSX.Element | string | false | null;\n  useButton?: boolean;\n  usePortal?: boolean;\n  autoFocus?: boolean;\n  isCloseButtonShown?: boolean;\n  isOpen?: boolean;\n  bodyStyle?: React.CSSProperties;\n  maxWidth?: number;\n  minWidth?: number;\n  width?: number;\n  onCancel?: (evn: React.MouseEvent<HTMLButtonElement> & MouseEvent) => void;\n  onConfirm?: (evn: React.MouseEvent<HTMLButtonElement> & MouseEvent) => void;\n}\n\nexport default React.forwardRef<OverlayProps, ModalProps>((props, ref) => {\n  const {\n    prefixCls = 'w-modal',\n    className,\n    children,\n    useButton = true,\n    usePortal = true,\n    autoFocus = false,\n    isOpen: _ = false,\n    title,\n    cancelText,\n    cancelButtonProps,\n    confirmButtonProps,\n    content,\n    confirmText = 'чбошод',\n    type = 'light',\n    icon,\n    maxWidth = 500,\n    minWidth = 320,\n    width,\n    isCloseButtonShown = true,\n    onCancel = noop,\n    onConfirm = noop,\n    bodyStyle,\n    ...other\n  } = props;\n  const [isOpen, setIsOpen] = useState(props.isOpen);\n  useEffect(() => {\n    if (props.isOpen !== isOpen) {\n      setIsOpen(props.isOpen);\n    }\n  }, [props.isOpen]);\n\n  const [loading, setLoading] = useState(false);\n  const cls = [prefixCls, className, type ? `${type}` : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  function onClose() {\n    setIsOpen(false);\n  }\n  async function handleCancel(\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent> & MouseEvent,\n  ) {\n    setLoading(true);\n    try {\n      onCancel && (await onCancel(e));\n    } catch (e) {}\n    setIsOpen(false);\n    setLoading(false);\n  }\n  async function handleConfirm(\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent> & MouseEvent,\n  ) {\n    setLoading(true);\n    try {\n      onConfirm && (await onConfirm(e));\n    } catch (e) {}\n    setIsOpen(false);\n    setLoading(false);\n  }\n  return (\n    <Overlay\n      usePortal={usePortal}\n      isOpen={isOpen}\n      {...other}\n      onClose={onClose}\n      className={cls}\n    >\n      <div className={`${prefixCls}-container`}>\n        <div\n          className={[\n            `${prefixCls}-inner`,\n            title ? `${prefixCls}-shown-title` : null,\n            icon ? `${prefixCls}-shown-icon` : null,\n          ]\n            .filter(Boolean)\n            .join(' ')\n            .trim()}\n          style={{ maxWidth, minWidth, width }}\n        >\n          {(title || icon) && (\n            <div className={`${prefixCls}-header`}>\n              {icon && <Icon type={icon} />}\n              {title && <h4>{title}</h4>}\n              {isCloseButtonShown && (\n                <Button\n                  basic\n                  onClick={(e) => handleCancel(e)}\n                  icon=\"close\"\n                  type=\"light\"\n                />\n              )}\n            </div>\n          )}\n          <div className={`${prefixCls}-body`} style={bodyStyle}>\n            {children || content}\n          </div>\n          {useButton && (\n            <div className={`${prefixCls}-footer`}>\n              <Button\n                autoFocus={autoFocus}\n                type={type}\n                loading={loading}\n                disabled={loading}\n                {...confirmButtonProps}\n                onClick={(e) => handleConfirm(e)}\n              >\n                {confirmText}\n              </Button>\n              {cancelText && (\n                <Button {...cancelButtonProps} onClick={(e) => handleCancel(e)}>\n                  {cancelText}\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </Overlay>\n  );\n});\n"
  ]
}