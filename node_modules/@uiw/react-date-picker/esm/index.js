import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "weekday", "weekTitle", "monthLabel", "date", "today", "todayButton", "panelDate", "disabledDate", "renderDay", "onChange", "showTime"];
import React, { useEffect, useMemo, useState } from 'react';
import formatter from '@uiw/formatter';
import { noop } from '@uiw/utils';
import { TimePickerTime } from '@uiw/react-time-picker';
import { DatePickerDay } from './DatePickerDay';
import { DatePickerMonth } from './DatePickerMonth';
import { DatePickerYear } from './DatePickerYear';
import { DatePickerCaption } from './DatePickerCaption';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from './DatePickerDay';
export * from './DatePickerMonth';
export * from './DatePickerYear';
export * from './DatePickerCaption';
var MONTH_LABEL = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
export default function DatePicker(props) {
  var {
    prefixCls = 'w-datepicker',
    className,
    weekday,
    weekTitle,
    monthLabel = MONTH_LABEL,
    date,
    today = new Date(),
    todayButton,
    panelDate = new Date(),
    disabledDate,
    renderDay,
    onChange = noop,
    showTime
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [type, setType] = useState('day');
  var [selectDate, setSelectDate] = useState(date);
  var [selectPanelDate, setSelectPanelDate] = useState(panelDate);
  useEffect(() => {
    if (date) {
      setSelectDate(date);
      setSelectPanelDate(date);
    }
  }, [date]);
  var format = useMemo(() => showTime && showTime.format ? showTime.format : 'HH:mm:ss', [showTime]);

  function handleSelected(curType) {
    if (curType && /^(year|month|time)$/.test(curType)) {
      if (type === 'time') {
        curType = 'day';
      }

      setType(curType);
    } else {
      var currentDate = new Date(selectDate || selectPanelDate);
      var month = currentDate.getMonth();

      if (curType === 'prev') {
        month -= 1;
      }

      if (curType === 'next') {
        month += 1;
      }

      currentDate.setMonth(month);
      setSelectPanelDate(curType === 'today' ? today : currentDate);
      setSelectDate(curType === 'today' ? today : currentDate);
      setType('day');
    }
  }

  function onSelectedTime(type, num) {
    (selectPanelDate || new Date())["set" + type](num);
    setSelectPanelDate(new Date(selectPanelDate));
    onChange && onChange(new Date(selectPanelDate));
  }

  function onSelectedDate(type, month, paging) {
    (selectPanelDate || new Date())[type](month);
    setSelectPanelDate(new Date(selectPanelDate));
    setType('day');
    onChange && onChange(new Date(selectPanelDate));
  }

  return /*#__PURE__*/_jsxs("div", _extends({
    className: [prefixCls, className].filter(Boolean).join(' ').trim()
  }, other, {
    children: [/*#__PURE__*/_jsx(DatePickerCaption, {
      todayButton: todayButton,
      panelDate: selectPanelDate,
      monthLabel: monthLabel,
      onSelected: handleSelected
    }), type === 'day' && /*#__PURE__*/_jsx(DatePickerDay, {
      prefixCls: prefixCls,
      disabledDate: disabledDate,
      onSelectDay: (selectedDate, dateSource) => {
        setSelectPanelDate(selectedDate);
        onChange(selectedDate, dateSource);
      },
      renderDay: renderDay,
      date: selectDate,
      today: today || new Date(),
      panelDate: selectPanelDate,
      weekday: weekday,
      weekTitle: weekTitle
    }), type === 'month' && /*#__PURE__*/_jsx(DatePickerMonth, {
      panelDate: selectPanelDate,
      monthLabel: monthLabel,
      prefixCls: prefixCls,
      onSelected: num => onSelectedDate('setMonth', num)
    }), type === 'year' && /*#__PURE__*/_jsx(DatePickerYear, {
      prefixCls: prefixCls,
      panelDate: selectDate || selectPanelDate,
      onSelected: num => onSelectedDate('setFullYear', num)
    }), type === 'time' && /*#__PURE__*/_jsx(TimePickerTime, _extends({
      date: selectPanelDate
    }, showTime, {
      className: prefixCls + "-timepicker",
      onSelected: onSelectedTime
    })), showTime && format && /*#__PURE__*/_jsx("div", {
      className: prefixCls + "-time-btn",
      onClick: () => handleSelected('time'),
      children: formatter(format, selectDate || selectPanelDate)
    })]
  }));
}
//# sourceMappingURL=index.js.map