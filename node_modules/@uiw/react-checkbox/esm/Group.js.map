{
  "version": 3,
  "sources": [
    "../src/Group.tsx"
  ],
  "names": [
    "React",
    "useMemo",
    "useRef",
    "CheckboxGroup",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "name",
    "value",
    "onChange",
    "other",
    "valueRef",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "childs",
    "Children",
    "toArray",
    "children",
    "current",
    "map",
    "element",
    "isValidElement",
    "Array",
    "isArray",
    "includes",
    "push",
    "cloneElement",
    "Object",
    "assign",
    "checked",
    "e",
    "target",
    "type",
    "include",
    "val"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useMemo, useRef } from 'react';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport './style/group.less';\n\nexport type Value = string | number;\nexport interface CheckboxGroupPorps\n  extends IProps,\n    Omit<HTMLDivProps, 'onChange'> {\n  value?: Value[];\n  name?: string;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>, values: Value[]) => void;\n}\n\nexport const CheckboxGroup = React.forwardRef<\n  HTMLDivElement,\n  CheckboxGroupPorps\n>((props, ref) => {\n  const {\n    prefixCls = 'w-checkbox-group',\n    className,\n    name,\n    value,\n    onChange,\n    ...other\n  } = props;\n  const valueRef = useRef<Value[]>([]);\n  const cls = [prefixCls, className].filter(Boolean).join(' ').trim();\n  const childs = React.Children.toArray(props.children);\n  useMemo(() => (valueRef.current = value || []), [value]);\n  return (\n    <div {...other} className={cls} ref={ref}>\n      {React.Children.map(childs, (element: React.ReactNode) => {\n        if (!React.isValidElement(element)) return;\n        if (\n          Array.isArray(value) &&\n          element &&\n          element.props &&\n          element.props.value &&\n          value.includes(element.props.value)\n        ) {\n          if (!valueRef.current.includes(element.props.value)) {\n            valueRef.current.push(element.props.value);\n          }\n        }\n        return React.cloneElement(\n          element,\n          Object.assign({}, element.props, {\n            name,\n            checked: valueRef.current.includes(element.props.value),\n            onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n              if (e.target.type && e.target.type !== 'checkbox') return;\n              const checked = e.target.checked;\n              const include = valueRef.current.includes(element.props.value);\n              if (!include && checked) {\n                valueRef.current.push(element.props.value);\n              } else if (include && !checked) {\n                valueRef.current = valueRef.current.filter(\n                  (val) => val !== element.props.value,\n                );\n              }\n              onChange && onChange(e, valueRef.current);\n            },\n          }),\n        );\n      })}\n    </div>\n  );\n});\n"
  ]
}