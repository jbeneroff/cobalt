{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "props",
    "prefixCls",
    "className",
    "size",
    "loading",
    "tip",
    "vertical",
    "color",
    "bgColor",
    "children",
    "indicator",
    "fullscreen",
    "otherProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "indicatorView",
    "tipsView",
    "backgroundColor",
    "React",
    "cloneElement",
    "Object",
    "assign"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;;;;;eAgBe,oBAA6B;AAAA,MAA5BA,KAA4B,uEAAP,EAAO;AAC1C,yBAaIA,KAbJ,CACEC,SADF;AAAA,MACEA,SADF,iCACc,UADd;AAAA,MAEEC,SAFF,GAaIF,KAbJ,CAEEE,SAFF;AAAA,oBAaIF,KAbJ,CAGEG,IAHF;AAAA,MAGEA,IAHF,4BAGS,SAHT;AAAA,uBAaIH,KAbJ,CAIEI,OAJF;AAAA,MAIEA,OAJF,+BAIY,IAJZ;AAAA,MAKEC,GALF,GAaIL,KAbJ,CAKEK,GALF;AAAA,MAMEC,QANF,GAaIN,KAbJ,CAMEM,QANF;AAAA,MAOEC,KAPF,GAaIP,KAbJ,CAOEO,KAPF;AAAA,MAQEC,OARF,GAaIR,KAbJ,CAQEQ,OARF;AAAA,MASEC,QATF,GAaIT,KAbJ,CASES,QATF;AAAA,MAUEC,SAVF,GAaIV,KAbJ,CAUEU,SAVF;AAAA,0BAaIV,KAbJ,CAWEW,UAXF;AAAA,MAWEA,UAXF,kCAWe,KAXf;AAAA,MAYKC,UAZL,6CAaIZ,KAbJ;AAcA,MAAMa,GAAG,GAAG,CAACZ,SAAD,EAAYC,SAAZ,EAAuBC,IAAI,aAAMF,SAAN,cAAmBE,IAAnB,IAA4B,IAAvD,EACTW,MADS,CACFC,OADE,EAETC,IAFS,CAEJ,GAFI,EAGTC,IAHS,EAAZ;AAKA,MAAMC,aAAa,GAAG,oBACpB;AAAA,wBACE;AAAK,MAAA,OAAO,EAAC,aAAb;AAAA,6BACE;AACE,QAAA,EAAE,EAAC,IADL;AAEE,QAAA,EAAE,EAAC,IAFL;AAGE,QAAA,CAAC,EAAC,IAHJ;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,WAAW,EAAC,GALd;AAME,QAAA,gBAAgB,EAAC;AANnB;AADF,MADF;AAAA,GADoB,EAapB,EAboB,CAAtB;AAgBA,MAAMC,QAAQ,GAAG,oBACf;AAAA,wBACE;AACE,MAAA,SAAS,EAAE,WACNlB,SADM,YAETU,UAAU,aAAMV,SAAN,mBAA+B,IAFhC,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ,EADb;AAQE,MAAA,KAAK,EAAE;AAAEV,QAAAA,KAAK,EAALA,KAAF;AAASa,QAAAA,eAAe,EAAEZ;AAA1B,OART;AAAA,6BAUE;AAAK,QAAA,SAAS,YAAKP,SAAL,iBAAd;AAAA,mBACGS,SAAS,IAAIQ,aADhB,EAEGb,GAAG,iBACF;AACE,UAAA,SAAS,EAAE,WACNJ,SADM,YAETK,QAAQ,aAAML,SAAN,iBAA6B,IAF5B,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ,EADb;AAAA,oBASGZ;AATH,UAHJ;AAAA;AAVF,MADF;AAAA,GADe,EA8Bf,CAACM,UAAD,EAAaH,OAAb,EAAsBP,SAAtB,EAAiCK,QAAjC,EAA2CD,GAA3C,CA9Be,CAAjB;AAiCA,sBACE;AAAK,IAAA,SAAS,EAAEQ;AAAhB,KAAyBD,UAAzB;AAAA,eACG,CAACR,OAAO,IAAIO,UAAZ,KAA2BQ,QAD9B,EAEGV,QAAQ,iBACPY,kBAAMC,YAAN,CACEb,QADF,EAEEc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,QAAQ,CAACT,KAA3B,EAAkC;AAChCE,MAAAA,SAAS,EAAE,WACND,SADM,YAETG,OAAO,aAAMH,SAAN,aAAyB,IAFvB,EAIRa,MAJQ,CAIDC,OAJC,EAKRC,IALQ,CAKH,GALG,EAMRC,IANQ;AADqB,KAAlC,CAFF,CAHJ;AAAA,KADF;AAkBD,C",
  "sourcesContent": [
    "import React, { useMemo } from 'react';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\nimport './style/index.less';\n\nexport interface LoaderProps extends IProps, HTMLDivProps {\n  size?: 'small' | 'default' | 'large';\n  loading?: boolean;\n  fullscreen?: boolean;\n  color?: string;\n  bgColor?: string;\n  vertical?: boolean;\n  tip?: React.ReactNode;\n  indicator?: React.ReactNode;\n  children?: any | React.ReactNode;\n}\n\nexport default (props: LoaderProps = {}) => {\n  const {\n    prefixCls = 'w-loader',\n    className,\n    size = 'default',\n    loading = true,\n    tip,\n    vertical,\n    color,\n    bgColor,\n    children,\n    indicator,\n    fullscreen = false,\n    ...otherProps\n  } = props;\n  const cls = [prefixCls, className, size ? `${prefixCls}-${size}` : null]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  const indicatorView = useMemo(\n    () => (\n      <svg viewBox=\"25 25 50 50\">\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"20\"\n          fill=\"none\"\n          strokeWidth=\"5\"\n          strokeMiterlimit=\"10\"\n        />\n      </svg>\n    ),\n    [],\n  );\n\n  const tipsView = useMemo(\n    () => (\n      <div\n        className={[\n          `${prefixCls}-tips`,\n          fullscreen ? `${prefixCls}-fullscreen` : null,\n        ]\n          .filter(Boolean)\n          .join(' ')\n          .trim()}\n        style={{ color, backgroundColor: bgColor }}\n      >\n        <div className={`${prefixCls}-tips-nested`}>\n          {indicator || indicatorView}\n          {tip && (\n            <div\n              className={[\n                `${prefixCls}-text`,\n                vertical ? `${prefixCls}-vertical` : null,\n              ]\n                .filter(Boolean)\n                .join(' ')\n                .trim()}\n            >\n              {tip}\n            </div>\n          )}\n        </div>\n      </div>\n    ),\n    [fullscreen, bgColor, prefixCls, vertical, tip],\n  );\n\n  return (\n    <div className={cls} {...otherProps}>\n      {(loading || fullscreen) && tipsView}\n      {children &&\n        React.cloneElement(\n          children,\n          Object.assign({}, children.props, {\n            className: [\n              `${prefixCls}-warp`,\n              loading ? `${prefixCls}-blur` : null,\n            ]\n              .filter(Boolean)\n              .join(' ')\n              .trim(),\n          }),\n        )}\n    </div>\n  );\n};\n"
  ]
}