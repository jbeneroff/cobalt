{
  "version": 3,
  "sources": [
    "../src/Row.tsx"
  ],
  "names": [
    "React",
    "Fragment",
    "Cell",
    "Row",
    "props",
    "prefixCls",
    "layout",
    "bordered",
    "column",
    "colon",
    "children",
    "handleCell",
    "isHead",
    "map",
    "child",
    "index",
    "length",
    "label",
    "cls"
  ],
  "mappings": ";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAUA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAmC;AAAA,MAAtBA,KAAsB;AAAtBA,IAAAA,KAAsB,GAAJ,EAAI;AAAA;;AAChD,MAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA,QAAQ,GAAG;AAAzD,MAAgEN,KAAtE;;AACA,WAASO,UAAT,CAAoBC,MAApB,EAAsC;AACpC,WAAOF,QAAQ,CAACG,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,kBAClB,eAAC,IAAD,eACMD,KAAK,CAACV,KADZ;AAEE,MAAA,SAAS,EAAEC,SAFb;AAGE,MAAA,GAAG,EAAEU,KAHP;AAIE,MAAA,MAAM,EAAEP,MAJV;AAKE,MAAA,OAAO,EAAEI,MAAM,GAAG,IAAH,GAAU,IAL3B;AAME,MAAA,UAAU,EAAEF,QAAQ,CAACM,MAAT,GAAkB,CAAlB,KAAwBD,KANtC;AAOE,MAAA,MAAM,EAAET,MAPV;AAQE,MAAA,KAAK,EAAEG,KART;AASE,MAAA,QAAQ,EAAEF;AATZ,QAWGK,MAAM,GAAGE,KAAK,CAACV,KAAN,CAAYa,KAAf,GAAuBH,KAAK,CAACV,KAAN,CAAYM,QAX5C,CADK,CAAP;AAeD;;AACD,MAAMQ,GAAG,GAAGb,SAAS,GAAMA,SAAN,YAAwB,EAA7C;AACA,sBACE,MAAC,QAAD;AAAA,eACGC,MAAM,KAAK,UAAX,iBAAyB;AAAI,MAAA,SAAS,EAAEY,GAAf;AAAA,gBAAqBP,UAAU,CAAC,IAAD;AAA/B,MAD5B,eAEE;AAAI,MAAA,SAAS,EAAEO,GAAf;AAAA,gBAAqBP,UAAU;AAA/B,MAFF;AAAA,IADF;AAMD",
  "sourcesContent": [
    "import React, { Fragment } from 'react';\nimport { IProps } from '@uiw/utils';\nimport { DescriptionsItemProps } from './DescriptionsItem';\nimport Cell from './Cell';\n\nexport interface RowProps extends IProps {\n  children?: React.ReactElement<DescriptionsItemProps>[];\n  bordered?: boolean;\n  layout?: 'horizontal' | 'vertical';\n  colon?: boolean;\n  column?: number;\n}\n\nexport default function Row(props: RowProps = {}) {\n  const { prefixCls, layout, bordered, column, colon, children = [] } = props;\n  function handleCell(isHead?: boolean) {\n    return children.map((child, index) => (\n      <Cell\n        {...child.props}\n        prefixCls={prefixCls}\n        key={index}\n        column={column}\n        tagName={isHead ? 'th' : 'td'}\n        isLastCell={children.length - 1 === index}\n        layout={layout}\n        colon={colon}\n        bordered={bordered}\n      >\n        {isHead ? child.props.label : child.props.children}\n      </Cell>\n    ));\n  }\n  const cls = prefixCls ? `${prefixCls}-row` : '';\n  return (\n    <Fragment>\n      {layout === 'vertical' && <tr className={cls}>{handleCell(true)}</tr>}\n      <tr className={cls}>{handleCell()}</tr>\n    </Fragment>\n  );\n}\n"
  ]
}