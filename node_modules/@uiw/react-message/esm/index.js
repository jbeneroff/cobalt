import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "type", "title", "description", "showIcon", "icon", "rounded", "isCloseButtonShown"];
import React from 'react';
import { CSSTransition } from 'react-transition-group';
import Icon from '@uiw/react-icon';
import Button from '@uiw/react-button';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default class Message extends React.Component {
  constructor(props) {
    super(props);

    this.handleClosed = e => {
      var {
        onClose
      } = this.props;
      this.setState({
        isOpen: false
      });
      onClose && onClose(e);
    };

    this.renderIcon = () => {
      var {
        type,
        showIcon
      } = this.props;
      var icon = this.props.icon;

      if (!icon && showIcon) {
        switch (type) {
          case 'success':
            icon = 'circle-check';
            break;

          case 'warning':
            icon = 'warning';
            break;

          case 'info':
            icon = 'information';
            break;

          case 'error':
            icon = 'circle-close';
            break;

          default:
            break;
        }
      }

      return icon;
    };

    this.state = {
      isOpen: true
    };
  }

  render() {
    var _this$props = this.props,
        {
      prefixCls,
      className,
      type,
      title,
      description,
      showIcon,
      rounded,
      isCloseButtonShown
    } = _this$props,
        elementProps = _objectWithoutPropertiesLoose(_this$props, _excluded);

    var children = description || this.props.children;
    var cls = [prefixCls, className, prefixCls + "-" + type, rounded ? prefixCls + "-rounded" : null, showIcon ? prefixCls + "-icon" : null, showIcon ? "" + prefixCls + (title ? '-title' : '') + (children ? '-description' : '') : null].filter(Boolean).join(' ').trim();

    var Child = /*#__PURE__*/_jsxs("div", _extends({
      className: cls
    }, elementProps, {
      children: [isCloseButtonShown && /*#__PURE__*/_jsx(Button, {
        basic: true,
        onClick: this.handleClosed,
        icon: "close",
        type: "light"
      }), showIcon && /*#__PURE__*/_jsx(Icon, {
        type: this.renderIcon()
      }), /*#__PURE__*/_jsx("span", {
        className: prefixCls + "-title",
        children: title
      }), /*#__PURE__*/_jsx("span", {
        className: prefixCls + "-description",
        children: children
      })]
    }));

    if (!isCloseButtonShown) {
      return Child;
    }

    return /*#__PURE__*/_jsx(CSSTransition, {
      in: this.state.isOpen,
      unmountOnExit: true,
      timeout: 300,
      classNames: prefixCls,
      children: Child
    });
  }

}
Message.defaultProps = {
  prefixCls: 'w-message',
  rounded: true,
  isCloseButtonShown: false
};
//# sourceMappingURL=index.js.map