{
  "version": 3,
  "sources": [
    "../src/Cell.tsx"
  ],
  "names": [
    "React",
    "Fragment",
    "Cell",
    "props",
    "prefixCls",
    "className",
    "tagName",
    "TagName",
    "layout",
    "bordered",
    "label",
    "colon",
    "span",
    "children",
    "other",
    "labelProps",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAkBA,SAASC,IAAT,CAAcC,KAAd,EAAqC;AAAA,MAAvBA,KAAuB;AAAvBA,IAAAA,KAAuB,GAAJ,EAAI;AAAA;;AACnC,MAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,OAAO,EAAEC,OAAO,GAAG,IAHf;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,KANI;AAQJC,IAAAA,KARI;AASJC,IAAAA,IATI;AAUJC,IAAAA;AAVI,MAaFV,KAbJ;AAAA,MAYKW,KAZL,iCAaIX,KAbJ;;AAeA,MAAMY,UAAiD,GAAG;AACxDV,IAAAA,SAAS,EAAE,CACTD,SAAS,GAAMA,SAAN,mBAA+B,IAD/B,EAETC,SAFS,EAGTM,KAAK,GAAMP,SAAN,mBAA+B,IAH3B,EAIT,CAACM,KAAD,GAAYN,SAAZ,sBAAwC,IAJ/B,EAMRY,MANQ,CAMDC,OANC,EAORC,IAPQ,CAOH,GAPG,EAQRC,IARQ;AAD6C,GAA1D;;AAWA,MAAIX,MAAM,KAAK,YAAf,EAA6B;AAC3B,QAAI,CAACC,QAAL,EAAe;AACb,0BACE,MAAC,OAAD,eAAaK,KAAb;AAAoB,QAAA,OAAO,EAAEF,IAA7B;AAAA,gCACE,0BAAUG,UAAV;AAAA,oBAAuBL;AAAvB,WADF,eAEE;AAAM,UAAA,SAAS,EAAEN,SAAS,GAAMA,SAAN,qBAAiC,EAA3D;AAAA,oBACGS;AADH,UAFF;AAAA,SADF;AAQD;;AACD,wBACE,MAAC,QAAD;AAAA,8BACE,wBAAQE,UAAR;AAAA,kBAAqBL;AAArB,SADF,eAEE,KAAC,OAAD,eACMI,KADN;AAEE,QAAA,OAAO,EAAEF,IAAI,GAAGA,IAAI,GAAG,CAAP,GAAW,CAAd,GAAkBA,IAFjC;AAGE,QAAA,SAAS,EAAER,SAAS,GAAMA,SAAN,qBAAiC,EAHvD;AAAA,kBAKGS;AALH,SAFF;AAAA,MADF;AAYD;;AACD,sBACE,KAAC,OAAD;AACE,IAAA,OAAO,EAAED,IADX;AAEE,IAAA,SAAS,EAAKR,SAAL,eAAuBG,OAAO,KAAK,IAAZ,GAAmB,SAAnB,GAA+B,OAAtD,CAFX;AAAA,cAIGM;AAJH,IADF;AAQD;;AAED,eAAeX,IAAf",
  "sourcesContent": [
    "import React, { Fragment } from 'react';\nimport { IProps } from '@uiw/utils';\nimport { DescriptionsItemProps } from './DescriptionsItem';\nimport { RowProps } from './Row';\n\nexport interface CellProps\n  extends Omit<RowProps, 'children'>,\n    Omit<DescriptionsItemProps, 'children'>,\n    React.HTMLAttributes<HTMLTableCellElement>,\n    IProps {\n  children?: React.ReactElement<DescriptionsItemProps> | React.ReactNode;\n  tagName?: 'td' | 'th';\n  /**\n   * 是否为一行的最后一个\n   */\n  isLastCell?: boolean;\n}\n\nfunction Cell(props: CellProps = {}) {\n  const {\n    prefixCls,\n    className,\n    tagName: TagName = 'td',\n    layout,\n    bordered,\n    label,\n    isLastCell,\n    colon,\n    span,\n    children,\n    column,\n    ...other\n  } = props;\n\n  const labelProps: React.HTMLAttributes<HTMLSpanElement> = {\n    className: [\n      prefixCls ? `${prefixCls}-item-label` : null,\n      className,\n      colon ? `${prefixCls}-item-colon` : null,\n      !label ? `${prefixCls}-item-no-label` : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim(),\n  };\n  if (layout === 'horizontal') {\n    if (!bordered) {\n      return (\n        <TagName {...other} colSpan={span}>\n          <span {...labelProps}>{label}</span>\n          <span className={prefixCls ? `${prefixCls}-item-content` : ''}>\n            {children}\n          </span>\n        </TagName>\n      );\n    }\n    return (\n      <Fragment>\n        <th {...labelProps}>{label}</th>\n        <TagName\n          {...other}\n          colSpan={span ? span * 2 - 1 : span}\n          className={prefixCls ? `${prefixCls}-item-content` : ''}\n        >\n          {children}\n        </TagName>\n      </Fragment>\n    );\n  }\n  return (\n    <TagName\n      colSpan={span}\n      className={`${prefixCls}-item-${TagName === 'td' ? 'content' : 'label'}`}\n    >\n      {children}\n    </TagName>\n  );\n}\n\nexport default Cell;\n"
  ]
}