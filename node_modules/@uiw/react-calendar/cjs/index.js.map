{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "MONTH_LABEL",
    "Calendar",
    "props",
    "prefixCls",
    "className",
    "style",
    "today",
    "Date",
    "date",
    "data",
    "monthLabel",
    "titleFormat",
    "todayLabel",
    "_",
    "panelDate",
    "onPaging",
    "onSelectDay",
    "otherProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "setPanelDate",
    "handlePaging",
    "type",
    "currentDate",
    "month",
    "getMonth",
    "setMonth",
    "titleLable",
    "btngroup",
    "dateSource",
    "day",
    "propsNext"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  DatePickerDay,\n  DatePickerDayProps,\n  DatePickerDayDateSource,\n} from '@uiw/react-date-picker';\nimport Icon from '@uiw/react-icon';\nimport formatter from '@uiw/formatter';\nimport { IProps } from '@uiw/utils';\nimport RenderDay from './DayLabel';\nimport './style/index.less';\n\nexport interface CalendarProps extends IProps, DatePickerDayProps {\n  /**\n   * 设置日历面板上面的日期标题。\n   */\n  titleFormat?: string;\n  /**\n   * 点击选择日期回调\n   */\n  onSelectDay?: (\n    selectDay?: Date,\n    dateSource?: DatePickerDayDateSource,\n  ) => void;\n  /**\n   * 日历面板默认展示哪一页\n   */\n  panelDate?: Date;\n  /**\n   * 默认高亮当天日期\n   */\n  today?: Date;\n  /**\n   * 在日历面板上面添加通知，数组中的对象可以设置 `ElementProps`，如：`style`, `onClick` 等属性。\n   */\n  data?: ICalendarData[];\n  /**\n   * 选中的日期\n   */\n  date?: Date;\n  /**\n   * `今天` 按钮的文本设置\n   */\n  todayLabel?: string;\n  /**\n   * 月份显示文本\n   */\n  monthLabel?: string[];\n  /** 翻页触发事件 */\n  onPaging?: (\n    type: 'prev' | 'next' | 'today',\n    month: number,\n    panelDate?: Date,\n  ) => void;\n}\n\nexport interface ICalendarData {\n  label?: React.ReactNode;\n  date?: string;\n  [key: string]: any;\n}\n\nconst MONTH_LABEL = [\n  '一月',\n  '二月',\n  '三月',\n  '四月',\n  '五月',\n  '六月',\n  '七月',\n  '八月',\n  '九月',\n  '十月',\n  '十一月',\n  '十二月',\n];\n\nexport default function Calendar(props: CalendarProps) {\n  const {\n    prefixCls = 'w-calendar',\n    className,\n    style,\n    today = new Date(),\n    date,\n    data,\n    monthLabel = MONTH_LABEL,\n    titleFormat = 'YYYY/MM',\n    todayLabel = '今天',\n    panelDate: _,\n    onPaging,\n    onSelectDay,\n    ...otherProps\n  } = props;\n  const cls = [prefixCls, className].filter(Boolean).join(' ').trim();\n  const [panelDate, setPanelDate] = useState<Date>(\n    props.panelDate || new Date(),\n  );\n\n  useEffect(() => {\n    if (props.panelDate !== panelDate) {\n      setPanelDate(panelDate);\n    }\n  }, [props.panelDate]);\n\n  function handlePaging(type: 'prev' | 'next' | 'today') {\n    let currentDate = new Date();\n    if (type === 'today') {\n      currentDate = today || new Date();\n    } else {\n      const month = panelDate.getMonth();\n      if (panelDate && type === 'prev') {\n        panelDate.setMonth(month - 1);\n      }\n      if (panelDate && type === 'next') {\n        panelDate.setMonth(month + 1);\n      }\n      currentDate = panelDate;\n    }\n    setPanelDate(new Date(currentDate));\n    onPaging && onPaging(type, currentDate!.getMonth() + 1, currentDate);\n  }\n\n  const titleLable = useMemo(\n    () => (\n      <div className={`${prefixCls}-title`}>\n        {formatter(titleFormat, panelDate)}\n      </div>\n    ),\n    [prefixCls, titleFormat, panelDate],\n  );\n\n  const btngroup = useMemo(\n    () => (\n      <div className={`${prefixCls}-btn-group`}>\n        <Icon type=\"down\" onClick={() => handlePaging('prev')} />\n        <span\n          className={`${prefixCls}-btn`}\n          onClick={() => handlePaging('today')}\n        >\n          {todayLabel}\n        </span>\n        <Icon type=\"down\" onClick={() => handlePaging('next')} />\n      </div>\n    ),\n    [prefixCls, todayLabel],\n  );\n\n  return (\n    <div className={cls} style={style}>\n      <div className={`${prefixCls}-caption`}>\n        {titleLable}\n        {btngroup}\n      </div>\n      <DatePickerDay\n        onSelectDay={(currentDate, dateSource) => {\n          setPanelDate(currentDate!);\n          onSelectDay && onSelectDay(currentDate, dateSource);\n        }}\n        renderDay={(day, propsNext) => (\n          <RenderDay\n            prefixCls={prefixCls}\n            day={day}\n            data={data}\n            currentDate={propsNext.date}\n          />\n        )}\n        date={date}\n        today={today}\n        panelDate={panelDate || new Date()}\n        {...otherProps}\n      />\n    </div>\n  );\n}\n"
  ]
}