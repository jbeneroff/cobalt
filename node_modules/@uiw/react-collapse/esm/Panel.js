import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "icon", "children", "isActive", "onItemClick", "disabled", "showArrow", "header", "extra"];
import React from 'react';
import { CSSTransition } from 'react-transition-group';
import Icon from '@uiw/react-icon';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function Panel(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls = 'w-collapse',
    className,
    icon = 'down',
    children: _children,
    isActive,
    onItemClick,
    disabled = false,
    showArrow,
    header,
    extra
  } = props,
      resetProps = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = [prefixCls ? prefixCls + "-item" : null, className, isActive ? prefixCls + "-active" : null, disabled ? prefixCls + "-disabled" : null].filter(Boolean).join(' ').trim();
  var iconRender = typeof icon === 'string' ? /*#__PURE__*/_jsx(Icon, {
    type: icon
  }) : icon;

  var childStyle = child => {
    return Object.assign({}, child && child.props ? child.props.style : {}, {
      transitionDuration: '300ms'
    });
  };

  function getInstance(status, instance) {
    if (!instance) {
      return;
    }

    if (status === 'exited' || status === 'exiting') {
      instance.style.height = '1px';
    }

    if (status === 'entered' || status === 'entering') {
      instance.style.height = instance.scrollHeight + "px";
    }
  }

  return /*#__PURE__*/_jsxs("div", _extends({
    className: cls
  }, resetProps, {
    children: [/*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-header",
      onClick: onItemClick,
      children: [showArrow && iconRender, /*#__PURE__*/_jsx("span", {
        className: prefixCls + "-title",
        children: header
      }), extra && /*#__PURE__*/_jsx("div", {
        className: prefixCls + "-extra",
        children: extra
      })]
    }), /*#__PURE__*/_jsx(CSSTransition, {
      in: isActive,
      unmountOnExit: false,
      timeout: 300,
      classNames: prefixCls + "-panel",
      children: status => /*#__PURE__*/React.cloneElement( /*#__PURE__*/_jsx("div", {
        children: _children
      }), {
        className: prefixCls + "-panel",
        style: childStyle(_children),
        ref: e => getInstance(status, e)
      })
    })]
  }));
}
//# sourceMappingURL=Panel.js.map