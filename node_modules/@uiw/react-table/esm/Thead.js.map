{
  "version": 3,
  "sources": [
    "../src/Thead.tsx"
  ],
  "names": [
    "React",
    "noop",
    "props",
    "prefixCls",
    "className",
    "data",
    "onCellHead",
    "other",
    "filter",
    "Boolean",
    "join",
    "trim",
    "length",
    "map",
    "tds",
    "rowNum",
    "item",
    "colNum",
    "title",
    "ellipsis",
    "thProps",
    "titleNode",
    "colSpan",
    "evn"
  ],
  "mappings": ";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAiBC,IAAjB,QAA6B,YAA7B;AAEA;;AAOA,gBAAe,UACbC,KADa,EAEV;AAAA,MADHA,KACG;AADHA,IAAAA,KACG,GADiE,EACjE;AAAA;;AACH,MAAM;AACJC,IAAAA,SAAS,GAAG,SADR;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,IAAI,GAAG,EAHH;AAIJC,IAAAA,UAAU,GAAGL;AAJT,MAMFC,KANJ;AAAA,MAKKK,KALL,iCAMIL,KANJ;;AAOA,sBACE;AACE,IAAA,SAAS,EAAE,CAACC,SAAD,EAAYC,SAAZ,EAAuBI,MAAvB,CAA8BC,OAA9B,EAAuCC,IAAvC,CAA4C,GAA5C,EAAiDC,IAAjD;AADb,KAEMJ,KAFN;AAAA,cAIGF,IAAI,IACHA,IAAI,CAACO,MAAL,GAAc,CADf,IAECP,IAAI,CAACQ,GAAL,CAAS,CAACC,GAAD,EAAuBC,MAAvB,kBACP;AAAA,gBACG,CAACD,GAAG,IAAI,EAAR,EAAYD,GAAZ,CAAgB,CAACG,IAAD,EAAOC,MAAP,KAAkB;AACjC,YAAM;AAAEC,UAAAA,KAAF;AAAgCC,UAAAA;AAAhC,YACJH,IADF;AAAA,YAAmDI,OAAnD,iCACEJ,IADF;;AAEA,YAAMK,SAAgC,GACpC,OAAOH,KAAP,KAAiB,UAAjB,GACIA,KAAK,CAACF,IAAD,EAAOC,MAAP,EAAeF,MAAf,CADT,GAEIG,KAHN;;AAIA,YAAIE,OAAO,CAACE,OAAR,KAAoB,CAAxB,EAA2B;AACzB,iBAAO,IAAP;AACD;;AACD,YAAIH,QAAJ,EAAc;AACZC,UAAAA,OAAO,CAAChB,SAAR,IACEgB,OAAO,CAAChB,SAAR,IAAqB,EADvB,UAEID,SAFJ;AAGD;;AACD,4BACE;AAEE,UAAA,OAAO,EAAGoB,GAAD,IAASjB,UAAU,CAACU,IAAD,EAAOC,MAAP,EAAeF,MAAf,EAAwBQ,GAAxB;AAF9B,WAGMH,OAHN;AAAA,oBAKGC;AALH,YACOJ,MADP,CADF;AASD,OAxBA;AADH,OAASF,MAAT,CADF;AANJ,KADF;AAsCD,CAhDD",
  "sourcesContent": [
    "import React from 'react';\nimport { IProps, noop } from '@uiw/utils';\nimport { TableProps, TableColumns } from './';\nimport './style/index.less';\n\nexport interface TheadProps extends IProps {\n  data?: TableProps['data'][];\n  onCellHead?: TableProps['onCellHead'];\n}\n\nexport default (\n  props: TheadProps & React.HTMLAttributes<HTMLTableSectionElement> = {},\n) => {\n  const {\n    prefixCls = 'w-table',\n    className,\n    data = [],\n    onCellHead = noop,\n    ...other\n  } = props;\n  return (\n    <thead\n      className={[prefixCls, className].filter(Boolean).join(' ').trim()}\n      {...other}\n    >\n      {data &&\n        data.length > 0 &&\n        data.map((tds?: TableColumns[], rowNum?: number) => (\n          <tr key={rowNum}>\n            {(tds || []).map((item, colNum) => {\n              const { title, key, render, children, ellipsis, ...thProps } =\n                item;\n              const titleNode: TableColumns['title'] =\n                typeof title === 'function'\n                  ? title(item, colNum, rowNum!)\n                  : title;\n              if (thProps.colSpan === 0) {\n                return null;\n              }\n              if (ellipsis) {\n                thProps.className = `${\n                  thProps.className || ''\n                } ${prefixCls}-ellipsis`;\n              }\n              return (\n                <th\n                  key={colNum}\n                  onClick={(evn) => onCellHead(item, colNum, rowNum!, evn)}\n                  {...thProps}\n                >\n                  {titleNode}\n                </th>\n              );\n            })}\n          </tr>\n        ))}\n    </thead>\n  );\n};\n"
  ]
}