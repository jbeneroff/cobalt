{
  "version": 3,
  "sources": [
    "../src/Thead.tsx"
  ],
  "names": [
    "props",
    "prefixCls",
    "className",
    "data",
    "onCellHead",
    "noop",
    "other",
    "filter",
    "Boolean",
    "join",
    "trim",
    "length",
    "map",
    "tds",
    "rowNum",
    "item",
    "colNum",
    "title",
    "key",
    "render",
    "children",
    "ellipsis",
    "thProps",
    "titleNode",
    "colSpan",
    "evn"
  ],
  "mappings": ";;;;;;;;;;;;;AAAA;;AACA;;;;;;;eASe,oBAEV;AAAA,MADHA,KACG,uEADiE,EACjE;AACH,yBAMIA,KANJ,CACEC,SADF;AAAA,MACEA,SADF,iCACc,SADd;AAAA,MAEEC,SAFF,GAMIF,KANJ,CAEEE,SAFF;AAAA,oBAMIF,KANJ,CAGEG,IAHF;AAAA,MAGEA,IAHF,4BAGS,EAHT;AAAA,0BAMIH,KANJ,CAIEI,UAJF;AAAA,MAIEA,UAJF,kCAIeC,WAJf;AAAA,MAKKC,KALL,6CAMIN,KANJ;AAOA,sBACE;AACE,IAAA,SAAS,EAAE,CAACC,SAAD,EAAYC,SAAZ,EAAuBK,MAAvB,CAA8BC,OAA9B,EAAuCC,IAAvC,CAA4C,GAA5C,EAAiDC,IAAjD;AADb,KAEMJ,KAFN;AAAA,cAIGH,IAAI,IACHA,IAAI,CAACQ,MAAL,GAAc,CADf,IAECR,IAAI,CAACS,GAAL,CAAS,UAACC,GAAD,EAAuBC,MAAvB;AAAA,0BACP;AAAA,kBACG,CAACD,GAAG,IAAI,EAAR,EAAYD,GAAZ,CAAgB,UAACG,IAAD,EAAOC,MAAP,EAAkB;AACjC,cAAQC,KAAR,GACEF,IADF,CAAQE,KAAR;AAAA,cAAeC,GAAf,GACEH,IADF,CAAeG,GAAf;AAAA,cAAoBC,MAApB,GACEJ,IADF,CAAoBI,MAApB;AAAA,cAA4BC,QAA5B,GACEL,IADF,CAA4BK,QAA5B;AAAA,cAAsCC,QAAtC,GACEN,IADF,CAAsCM,QAAtC;AAAA,cAAmDC,OAAnD,6CACEP,IADF;AAEA,cAAMQ,SAAgC,GACpC,OAAON,KAAP,KAAiB,UAAjB,GACIA,KAAK,CAACF,IAAD,EAAOC,MAAP,EAAeF,MAAf,CADT,GAEIG,KAHN;;AAIA,cAAIK,OAAO,CAACE,OAAR,KAAoB,CAAxB,EAA2B;AACzB,mBAAO,IAAP;AACD;;AACD,cAAIH,QAAJ,EAAc;AACZC,YAAAA,OAAO,CAACpB,SAAR,aACEoB,OAAO,CAACpB,SAAR,IAAqB,EADvB,cAEID,SAFJ;AAGD;;AACD,8BACE;AAEE,YAAA,OAAO,EAAE,iBAACwB,GAAD;AAAA,qBAASrB,UAAU,CAACW,IAAD,EAAOC,MAAP,EAAeF,MAAf,EAAwBW,GAAxB,CAAnB;AAAA;AAFX,aAGMH,OAHN;AAAA,sBAKGC;AALH,cACOP,MADP,CADF;AASD,SAxBA;AADH,SAASF,MAAT,CADO;AAAA,KAAT;AANJ,KADF;AAsCD,C",
  "sourcesContent": [
    "import React from 'react';\nimport { IProps, noop } from '@uiw/utils';\nimport { TableProps, TableColumns } from './';\nimport './style/index.less';\n\nexport interface TheadProps extends IProps {\n  data?: TableProps['data'][];\n  onCellHead?: TableProps['onCellHead'];\n}\n\nexport default (\n  props: TheadProps & React.HTMLAttributes<HTMLTableSectionElement> = {},\n) => {\n  const {\n    prefixCls = 'w-table',\n    className,\n    data = [],\n    onCellHead = noop,\n    ...other\n  } = props;\n  return (\n    <thead\n      className={[prefixCls, className].filter(Boolean).join(' ').trim()}\n      {...other}\n    >\n      {data &&\n        data.length > 0 &&\n        data.map((tds?: TableColumns[], rowNum?: number) => (\n          <tr key={rowNum}>\n            {(tds || []).map((item, colNum) => {\n              const { title, key, render, children, ellipsis, ...thProps } =\n                item;\n              const titleNode: TableColumns['title'] =\n                typeof title === 'function'\n                  ? title(item, colNum, rowNum!)\n                  : title;\n              if (thProps.colSpan === 0) {\n                return null;\n              }\n              if (ellipsis) {\n                thProps.className = `${\n                  thProps.className || ''\n                } ${prefixCls}-ellipsis`;\n              }\n              return (\n                <th\n                  key={colNum}\n                  onClick={(evn) => onCellHead(item, colNum, rowNum!, evn)}\n                  {...thProps}\n                >\n                  {titleNode}\n                </th>\n              );\n            })}\n          </tr>\n        ))}\n    </thead>\n  );\n};\n"
  ]
}