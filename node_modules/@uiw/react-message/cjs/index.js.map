{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Message",
    "props",
    "e",
    "onClose",
    "setState",
    "isOpen",
    "type",
    "showIcon",
    "icon",
    "state",
    "prefixCls",
    "className",
    "title",
    "description",
    "rounded",
    "isCloseButtonShown",
    "elementProps",
    "children",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "Child",
    "handleClosed",
    "renderIcon",
    "React",
    "Component"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Icon from '@uiw/react-icon';\nimport Button from '@uiw/react-button';\nimport './style/index.less';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\n\nexport interface MessageProps extends IProps, Omit<HTMLDivProps, 'title'> {\n  title?: React.ReactNode;\n  icon?: JSX.Element | string | false | null;\n  type?: 'success' | 'warning' | 'info' | 'error';\n  description?: React.ReactNode;\n  showIcon?: boolean;\n  isCloseButtonShown?: boolean;\n  rounded?: boolean;\n  onClose?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport interface IMessageState {\n  isOpen: boolean;\n}\n\nexport default class Message extends React.Component<\n  MessageProps,\n  IMessageState\n> {\n  public static defaultProps: MessageProps = {\n    prefixCls: 'w-message',\n    rounded: true,\n    isCloseButtonShown: false,\n  };\n  constructor(props: MessageProps) {\n    super(props);\n    this.state = {\n      isOpen: true,\n    };\n  }\n  handleClosed = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { onClose } = this.props;\n    this.setState({ isOpen: false });\n    onClose && onClose(e);\n  };\n  renderIcon = () => {\n    const { type, showIcon } = this.props;\n    let icon = this.props.icon;\n    if (!icon && showIcon) {\n      switch (type) {\n        case 'success':\n          icon = 'circle-check';\n          break;\n        case 'warning':\n          icon = 'warning';\n          break;\n        case 'info':\n          icon = 'information';\n          break;\n        case 'error':\n          icon = 'circle-close';\n          break;\n        default:\n          break;\n      }\n    }\n    return icon;\n  };\n  render() {\n    const {\n      prefixCls,\n      className,\n      type,\n      title,\n      description,\n      showIcon,\n      icon,\n      rounded,\n      isCloseButtonShown,\n      ...elementProps\n    } = this.props;\n    const children = description || this.props.children;\n    const cls = [\n      prefixCls,\n      className,\n      `${prefixCls}-${type}`,\n      rounded ? `${prefixCls}-rounded` : null,\n      showIcon ? `${prefixCls}-icon` : null,\n      showIcon\n        ? `${prefixCls}${title ? '-title' : ''}${\n            children ? '-description' : ''\n          }`\n        : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    const Child = (\n      <div className={cls} {...elementProps}>\n        {isCloseButtonShown && (\n          <Button basic onClick={this.handleClosed} icon=\"close\" type=\"light\" />\n        )}\n        {showIcon && <Icon type={this.renderIcon()} />}\n        <span className={`${prefixCls}-title`}>{title}</span>\n        <span className={`${prefixCls}-description`}>{children}</span>\n      </div>\n    );\n    if (!isCloseButtonShown) {\n      return Child;\n    }\n    return (\n      <CSSTransition\n        in={this.state.isOpen}\n        unmountOnExit\n        timeout={300}\n        classNames={prefixCls}\n      >\n        {Child}\n      </CSSTransition>\n    );\n  }\n}\n"
  ]
}