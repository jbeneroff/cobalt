import _extends from "@babel/runtime/helpers/extends";
import React, { Fragment } from 'react';
import Cell from './Cell';
import { createElement as _createElement } from "react";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function Row(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    prefixCls,
    layout,
    bordered,
    column,
    colon,
    children = []
  } = props;

  function handleCell(isHead) {
    return children.map((child, index) => /*#__PURE__*/_createElement(Cell, _extends({}, child.props, {
      prefixCls: prefixCls,
      key: index,
      column: column,
      tagName: isHead ? 'th' : 'td',
      isLastCell: children.length - 1 === index,
      layout: layout,
      colon: colon,
      bordered: bordered
    }), isHead ? child.props.label : child.props.children));
  }

  var cls = prefixCls ? prefixCls + "-row" : '';
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [layout === 'vertical' && /*#__PURE__*/_jsx("tr", {
      className: cls,
      children: handleCell(true)
    }), /*#__PURE__*/_jsx("tr", {
      className: cls,
      children: handleCell()
    })]
  });
}
//# sourceMappingURL=Row.js.map