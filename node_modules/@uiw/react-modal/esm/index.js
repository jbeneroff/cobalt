import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "children", "useButton", "usePortal", "autoFocus", "isOpen", "title", "cancelText", "cancelButtonProps", "confirmButtonProps", "content", "confirmText", "type", "icon", "maxWidth", "minWidth", "width", "isCloseButtonShown", "onCancel", "onConfirm", "bodyStyle"];
import React, { useState, useEffect } from 'react';
import Overlay from '@uiw/react-overlay';
import Button from '@uiw/react-button';
import Icon from '@uiw/react-icon';
import { noop } from '@uiw/utils';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-modal',
    className,
    children,
    useButton = true,
    usePortal = true,
    autoFocus = false,
    isOpen: _ = false,
    title,
    cancelText,
    cancelButtonProps,
    confirmButtonProps,
    content,
    confirmText = 'чбошод',
    type = 'light',
    icon,
    maxWidth = 500,
    minWidth = 320,
    width,
    isCloseButtonShown = true,
    onCancel = noop,
    onConfirm = noop,
    bodyStyle
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var [isOpen, setIsOpen] = useState(props.isOpen);
  useEffect(() => {
    if (props.isOpen !== isOpen) {
      setIsOpen(props.isOpen);
    }
  }, [props.isOpen]);
  var [loading, setLoading] = useState(false);
  var cls = [prefixCls, className, type ? "" + type : null].filter(Boolean).join(' ').trim();

  function onClose() {
    setIsOpen(false);
  }

  function handleCancel(_x) {
    return _handleCancel.apply(this, arguments);
  }

  function _handleCancel() {
    _handleCancel = _asyncToGenerator(function* (e) {
      setLoading(true);

      try {
        onCancel && (yield onCancel(e));
      } catch (e) {}

      setIsOpen(false);
      setLoading(false);
    });
    return _handleCancel.apply(this, arguments);
  }

  function handleConfirm(_x2) {
    return _handleConfirm.apply(this, arguments);
  }

  function _handleConfirm() {
    _handleConfirm = _asyncToGenerator(function* (e) {
      setLoading(true);

      try {
        onConfirm && (yield onConfirm(e));
      } catch (e) {}

      setIsOpen(false);
      setLoading(false);
    });
    return _handleConfirm.apply(this, arguments);
  }

  return /*#__PURE__*/_jsx(Overlay, _extends({
    usePortal: usePortal,
    isOpen: isOpen
  }, other, {
    onClose: onClose,
    className: cls,
    children: /*#__PURE__*/_jsx("div", {
      className: prefixCls + "-container",
      children: /*#__PURE__*/_jsxs("div", {
        className: [prefixCls + "-inner", title ? prefixCls + "-shown-title" : null, icon ? prefixCls + "-shown-icon" : null].filter(Boolean).join(' ').trim(),
        style: {
          maxWidth,
          minWidth,
          width
        },
        children: [(title || icon) && /*#__PURE__*/_jsxs("div", {
          className: prefixCls + "-header",
          children: [icon && /*#__PURE__*/_jsx(Icon, {
            type: icon
          }), title && /*#__PURE__*/_jsx("h4", {
            children: title
          }), isCloseButtonShown && /*#__PURE__*/_jsx(Button, {
            basic: true,
            onClick: e => handleCancel(e),
            icon: "close",
            type: "light"
          })]
        }), /*#__PURE__*/_jsx("div", {
          className: prefixCls + "-body",
          style: bodyStyle,
          children: children || content
        }), useButton && /*#__PURE__*/_jsxs("div", {
          className: prefixCls + "-footer",
          children: [/*#__PURE__*/_jsx(Button, _extends({
            autoFocus: autoFocus,
            type: type,
            loading: loading,
            disabled: loading
          }, confirmButtonProps, {
            onClick: e => handleConfirm(e),
            children: confirmText
          })), cancelText && /*#__PURE__*/_jsx(Button, _extends({}, cancelButtonProps, {
            onClick: e => handleCancel(e),
            children: cancelText
          }))]
        })]
      })
    })
  }));
});
//# sourceMappingURL=index.js.map