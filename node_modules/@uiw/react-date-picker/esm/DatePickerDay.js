import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["date", "row", "col", "index", "today", "panelDate", "disabledDate", "renderDay", "onSelectDay"],
    _excluded2 = ["prefixCls", "className", "weekday", "weekTitle", "date", "today", "panelDate", "disabledDate", "renderDay", "onSelectDay"];
import React, { useMemo } from 'react';
import "./style/day.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

function isValidDate(date) {
  return date instanceof Date && !isNaN(date.getTime());
}

function classnames(obj) {
  return Object.keys(obj || {}).map(keyName => obj[keyName] ? keyName : null).filter(Boolean).join(' ').trim();
}

export function DayRect(props) {
  var {
    date: selectedDate,
    col,
    index,
    today,
    panelDate,
    disabledDate,
    renderDay,
    onSelectDay
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var cls = {
    end: col === 0 || col === 6,
    prev: false,
    today: false,
    selected: false,
    next: false,
    disabled: false
  };
  var date = panelDate;
  if (!date || !isValidDate(date)) date = new Date();
  var year = date.getFullYear();
  var month = date.getMonth();
  var week = useMemo(() => new Date(new Date(date).setDate(1)).getDay(), [date.toDateString()]);
  var lastDay = useMemo(() => new Date(year, month === 0 ? 12 : month + 1, 0).getDate(), [date.toDateString()]);
  var day = index;

  if (date) {
    day = day - week + 1;

    if (day < 1) {
      cls.prev = true;
    }

    if (day > lastDay) {
      cls.next = true;
    }
  }

  var cellDate = useMemo(() => new Date(new Date(date).setDate(day)), [day]);

  if (today && today.toDateString() === cellDate.toDateString()) {
    cls.today = true;
  }

  if (selectedDate && selectedDate.toDateString() === cellDate.toDateString()) {
    cls.selected = true;
  }

  var divProps = {
    onClick: () => {
      var cellMonth = cellDate.getMonth();
      onSelectDay && onSelectDay(cellDate, {
        year: cellDate.getFullYear(),
        month: cellMonth === 0 ? 12 : cellMonth + 1,
        day: cellDate.getDate()
      });
    }
  };

  if (disabledDate && disabledDate(cellDate, _extends({}, props, cls))) {
    cls.disabled = true;
    delete divProps.onClick;
  }

  return /*#__PURE__*/_jsx("div", _extends({
    className: classnames(cls)
  }, other, divProps, {
    children: renderDay ? renderDay(cellDate.getDate(), _extends({}, props, cls, {
      date: cellDate
    })) : /*#__PURE__*/_jsx("div", {
      children: cellDate.getDate()
    })
  }));
}
var WEEKTITLE = ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
var WEEKDAY = ['日', '一', '二', '三', '四', '五', '六'];
export function DatePickerDay(props) {
  var {
    prefixCls = 'w-datepicker',
    className,
    weekday = WEEKDAY,
    weekTitle = WEEKTITLE,
    date,
    today,
    panelDate,
    disabledDate,
    renderDay,
    onSelectDay: _onSelectDay
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded2);

  var weekdayLabel = useMemo(() => /*#__PURE__*/_jsx("div", {
    className: prefixCls + "-weekday",
    children: (weekday || []).map((week, idx) => /*#__PURE__*/_jsx("div", {
      className: classnames({
        end: idx === 0 || idx === 6
      }),
      title: weekTitle && weekTitle[idx],
      children: week
    }, idx))
  }), [prefixCls, weekday, weekTitle]);
  return /*#__PURE__*/_jsxs("div", _extends({}, other, {
    className: [prefixCls ? prefixCls + "-body" : null, className].filter(Boolean).join(' ').trim(),
    children: [weekdayLabel, /*#__PURE__*/_jsx("div", {
      className: [prefixCls ? prefixCls + "-day-body" : null].filter(Boolean).join(' ').trim(),
      children: [...Array(6)].map((_, idx) => /*#__PURE__*/_jsx("div", {
        className: prefixCls + "-week",
        children: [...Array(7)].map((_, col) => /*#__PURE__*/_jsx(DayRect, {
          date: date,
          today: today,
          disabledDate: disabledDate,
          renderDay: renderDay,
          panelDate: panelDate,
          col: col,
          row: idx,
          onSelectDay: (curDate, data) => {
            _onSelectDay && _onSelectDay(curDate, data);
          },
          index: idx * 7 + col
        }, col))
      }, idx))
    })]
  }));
}
//# sourceMappingURL=DatePickerDay.js.map