import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "disabled", "value", "format", "popoverProps", "allowClear", "onChange", "disabledHours", "disabledMinutes", "disabledSeconds", "hideDisabled", "precision"];
import React, { useEffect, useState } from 'react';
import Popover from '@uiw/react-popover';
import Input from '@uiw/react-input';
import Button from '@uiw/react-button';
import formatter from '@uiw/formatter';
import { TimePickerTime } from './Time';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
export * from './Panel';
export * from './Time';
export default function TimePicker(props) {
  var {
    prefixCls = 'w-timepicker',
    className,
    disabled,
    format = 'HH:mm:ss',
    popoverProps,
    allowClear = true,
    onChange,
    disabledHours,
    disabledMinutes,
    disabledSeconds,
    hideDisabled,
    precision
  } = props,
      inputProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [date, setDate] = useState(props.value);
  useEffect(() => setDate(props.value), [props.value]);
  var timeProps = {
    disabledHours,
    disabledMinutes,
    disabledSeconds,
    hideDisabled,
    precision
  };
  var inputValue = date ? formatter(format, date) : '';
  var datePickerTime = date || new Date();

  var _props = _extends({}, inputProps, {
    value: inputValue
  });

  if (allowClear && inputValue !== '' && !!inputValue) {
    _props.addonAfter = /*#__PURE__*/_jsx(Button, {
      className: prefixCls + "-close-btn",
      icon: "close",
      disabled: props.disabled,
      onClick: () => {
        setDate(undefined);
        onChange && onChange();
      },
      size: props.size,
      basic: true,
      type: "light"
    });
  }

  return /*#__PURE__*/_jsx(Popover, _extends({
    trigger: "focus",
    placement: "bottomLeft",
    autoAdjustOverflow: true,
    visibleArrow: false
  }, popoverProps, {
    content: /*#__PURE__*/_jsx(TimePickerTime, _extends({
      className: prefixCls + "-popover"
    }, timeProps, {
      date: datePickerTime,
      onSelected: (type, num, disableds, currentDate) => {
        setDate(new Date(currentDate));
        var dataStr = currentDate ? formatter(format, currentDate) : '';
        onChange && onChange(dataStr, currentDate, type, num, disableds);
      }
    })),
    children: /*#__PURE__*/_jsx(Input, _extends({
      placeholder: "\u8BF7\u9009\u62E9\u65F6\u95F4",
      readOnly: true,
      disabled: disabled
    }, _props, {
      className: [prefixCls + "-input", className].filter(Boolean).join(' ').trim()
    }))
  }));
}
//# sourceMappingURL=index.js.map