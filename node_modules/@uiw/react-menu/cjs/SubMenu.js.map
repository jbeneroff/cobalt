{
  "version": 3,
  "sources": [
    "../src/SubMenu.tsx"
  ],
  "names": [
    "checkedMenuItem",
    "node",
    "isCheck",
    "dataset",
    "menu",
    "test",
    "parentNode",
    "IconView",
    "prefixCls",
    "collapse",
    "isOpen",
    "filter",
    "Boolean",
    "join",
    "trim",
    "SubMenu",
    "React",
    "forwardRef",
    "props",
    "ref",
    "className",
    "disabled",
    "overlayProps",
    "children",
    "inlineIndent",
    "inlineCollapsed",
    "other",
    "overlayTriggerProps",
    "menuProps",
    "bordered",
    "popupRef",
    "useRef",
    "setIsOpen",
    "onClick",
    "e",
    "target",
    "currentTarget",
    "related",
    "relatedTarget",
    "nativeEvent",
    "length",
    "current",
    "hide",
    "onExit",
    "style",
    "height",
    "scrollHeight",
    "onExiting",
    "onEnter",
    "onEntering",
    "onEntered",
    "appear",
    "isOutside",
    "isClickOutside",
    "unmountOnExit",
    "trigger",
    "transitionName",
    "paddingLeft",
    "displayName"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useMemo, useState } from 'react';\nimport { CSSTransitionProps } from 'react-transition-group/CSSTransition';\nimport OverlayTrigger, {\n  OverlayTriggerProps,\n  OverlayTriggerRef,\n} from '@uiw/react-overlay-trigger';\nimport Icon from '@uiw/react-icon';\nimport { IProps } from '@uiw/utils';\nimport MenuItem, { MenuItemProps } from './MenuItem';\nimport Menu, { MenuProps } from './Menu';\nimport './style/submenu.less';\n\nexport interface SubMenuProps<T extends HTMLElement>\n  extends IProps,\n    MenuItemProps<T> {\n  overlayProps?: OverlayTriggerProps;\n  collapse?: boolean;\n  disabled?: boolean;\n  inlineCollapsed?: boolean;\n  inlineIndent?: number;\n}\n\nexport interface ISubMenuState {\n  isOpen: boolean;\n  overlayClassName: string;\n}\n\nfunction checkedMenuItem(node?: HTMLElement) {\n  let isCheck = false;\n  if (node) {\n    // eslint-disable-next-line\n    do {\n      if (!node.dataset.menu) {\n        isCheck = true;\n      }\n      if (node.dataset.menu && /^(subitem|divider)$/.test(node.dataset.menu)) {\n        isCheck = false;\n      }\n    } while (!node.dataset.menu && (node = node.parentNode as HTMLElement));\n  }\n  return isCheck;\n}\n\nfunction IconView({\n  prefixCls,\n  collapse,\n  isOpen,\n}: {\n  prefixCls?: string;\n  collapse?: boolean;\n  isOpen: boolean;\n}) {\n  return useMemo(\n    () => (\n      <Icon\n        type=\"caret-right\"\n        className={[\n          prefixCls ? `${prefixCls}-collapse-icon` : null,\n          !collapse && isOpen ? 'w-open' : null,\n          !collapse && !isOpen ? 'w-close' : null,\n        ]\n          .filter(Boolean)\n          .join(' ')\n          .trim()}\n      />\n    ),\n    [prefixCls, collapse, isOpen],\n  );\n}\n\nconst SubMenu = React.forwardRef<HTMLLIElement, SubMenuProps<any>>(\n  (props, ref) => {\n    const {\n      prefixCls = 'w-menu-subitem',\n      className,\n      disabled,\n      overlayProps = {},\n      children,\n      collapse = false,\n      inlineIndent,\n      inlineCollapsed,\n      ...other\n    } = props;\n    const overlayTriggerProps = {} as OverlayTriggerProps & CSSTransitionProps;\n    const menuProps: MenuProps = {\n      bordered: true,\n      children,\n      inlineIndent,\n      className: [prefixCls ? `${prefixCls}-overlay` : null]\n        .filter(Boolean)\n        .join(' ')\n        .trim(),\n    };\n    const popupRef = React.useRef<OverlayTriggerRef>(null);\n    const [isOpen, setIsOpen] = useState(false);\n    useMemo(() => {\n      setIsOpen(false);\n    }, [collapse]);\n    function onClick(e: React.MouseEvent<HTMLUListElement, MouseEvent>) {\n      const target = e.currentTarget;\n      const related = (e.relatedTarget || e.nativeEvent.target) as HTMLElement;\n      if (target.children.length < 1) return;\n      if (checkedMenuItem(related)) {\n        if (popupRef.current) {\n          popupRef.current!.hide();\n        }\n      }\n    }\n    function onExit(node: HTMLElement) {\n      node.style.height = `${node.scrollHeight}px`;\n      setIsOpen(false);\n    }\n    function onExiting(node: HTMLElement) {\n      node.style.height = '0px';\n    }\n    function onEnter(node: HTMLElement) {\n      node.style.height = '1px';\n      setIsOpen(true);\n    }\n    function onEntering(node: HTMLElement) {\n      node.style.height = `${node.scrollHeight}px`;\n    }\n    function onEntered(node: HTMLElement) {\n      node.style.height = 'initial';\n    }\n\n    if (!collapse) {\n      delete menuProps.onClick;\n      menuProps.bordered = false;\n      overlayTriggerProps.className = `${prefixCls}-collapse`;\n      overlayTriggerProps.appear = false;\n      overlayTriggerProps.isOutside = true;\n      overlayTriggerProps.isClickOutside = false;\n      overlayTriggerProps.unmountOnExit = false;\n      overlayTriggerProps.trigger = 'click';\n      overlayTriggerProps.transitionName = `${prefixCls}`;\n      overlayTriggerProps.onExit = onExit;\n      overlayTriggerProps.onExiting = onExiting;\n      // overlayTriggerProps.onEnter = onEnter;\n      overlayTriggerProps.onEntered = onEntered;\n      overlayTriggerProps.onEntering = onEntering;\n    } else {\n      overlayTriggerProps.className = `${prefixCls}-popup`;\n      overlayTriggerProps.trigger = 'hover';\n      // overlayTriggerProps.usePortal = true;\n      menuProps.onClick = onClick;\n    }\n    return (\n      <li data-menu=\"subitem\" ref={ref}>\n        <OverlayTrigger\n          placement=\"rightTop\"\n          autoAdjustOverflow\n          disabled={disabled}\n          isOpen={isOpen}\n          usePortal={false}\n          isOutside\n          {...overlayTriggerProps}\n          {...overlayProps}\n          ref={popupRef}\n          overlay={\n            <Menu\n              {...menuProps}\n              style={!collapse ? { paddingLeft: inlineIndent } : {}}\n            />\n          }\n        >\n          <MenuItem\n            {...other}\n            ref={null}\n            disabled={disabled}\n            isSubMenuItem\n            addonAfter={\n              <IconView\n                collapse={collapse}\n                prefixCls={prefixCls}\n                isOpen={isOpen}\n              />\n            }\n            className={[\n              prefixCls ? `${prefixCls}-title` : null,\n              !collapse ? `${prefixCls}-collapse-title` : null,\n              className,\n            ]\n              .filter(Boolean)\n              .join(' ')\n              .trim()}\n          />\n        </OverlayTrigger>\n      </li>\n    );\n  },\n);\n\nSubMenu.displayName = 'uiw.SubMenu';\n\nexport default SubMenu;\n"
  ]
}