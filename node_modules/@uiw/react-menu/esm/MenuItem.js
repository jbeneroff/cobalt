import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "tagName", "children", "disabled", "multiline", "icon", "text", "active", "addonAfter", "isSubMenuItem"];
import React, { Fragment } from 'react';
import Icon from '@uiw/react-icon';
import "./style/item.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var disabledProps = {
  href: undefined,
  onClick: undefined,
  onMouseDown: undefined,
  onMouseEnter: undefined,
  onMouseLeave: undefined,
  tabIndex: -1
};
var MenuItem = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    prefixCls = 'w-menu-item',
    className,
    tagName: TagName = 'a',
    disabled = false,
    multiline = false,
    icon,
    text,
    active = false,
    addonAfter,
    isSubMenuItem
  } = props,
      htmlProps = _objectWithoutPropertiesLoose(props, _excluded);

  var anchorCls = [prefixCls, active ? 'active' : null, disabled ? 'w-disabled' : null, className].filter(Boolean).join(' ').trim();
  var tagComp = /*#__PURE__*/React.createElement(TagName, _extends({}, htmlProps, disabled ? disabledProps : {}, {
    className: anchorCls,
    ref
  }), /*#__PURE__*/_jsxs(Fragment, {
    children: [/*#__PURE__*/_jsx(Icon, {
      className: prefixCls + "-icon",
      type: icon
    }), /*#__PURE__*/_jsx("div", {
      className: [prefixCls && prefixCls + "-text", !multiline && prefixCls + "-multiline"].filter(Boolean).join(' ').trim(),
      children: text
    }), addonAfter]
  }));

  if (isSubMenuItem) {
    return tagComp;
  }

  return /*#__PURE__*/_jsxs("li", {
    children: [" ", tagComp, " "]
  });
});
MenuItem.displayName = 'uiw.MenuItem';
export default MenuItem;
//# sourceMappingURL=MenuItem.js.map