{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "CSSTransition",
    "Icon",
    "Button",
    "Message",
    "Component",
    "constructor",
    "props",
    "handleClosed",
    "e",
    "onClose",
    "setState",
    "isOpen",
    "renderIcon",
    "type",
    "showIcon",
    "icon",
    "state",
    "render",
    "prefixCls",
    "className",
    "title",
    "description",
    "rounded",
    "isCloseButtonShown",
    "elementProps",
    "children",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "Child",
    "defaultProps"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Icon from '@uiw/react-icon';\nimport Button from '@uiw/react-button';\nimport './style/index.less';\nimport { IProps, HTMLDivProps } from '@uiw/utils';\n\nexport interface MessageProps extends IProps, Omit<HTMLDivProps, 'title'> {\n  title?: React.ReactNode;\n  icon?: JSX.Element | string | false | null;\n  type?: 'success' | 'warning' | 'info' | 'error';\n  description?: React.ReactNode;\n  showIcon?: boolean;\n  isCloseButtonShown?: boolean;\n  rounded?: boolean;\n  onClose?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport interface IMessageState {\n  isOpen: boolean;\n}\n\nexport default class Message extends React.Component<\n  MessageProps,\n  IMessageState\n> {\n  public static defaultProps: MessageProps = {\n    prefixCls: 'w-message',\n    rounded: true,\n    isCloseButtonShown: false,\n  };\n  constructor(props: MessageProps) {\n    super(props);\n    this.state = {\n      isOpen: true,\n    };\n  }\n  handleClosed = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const { onClose } = this.props;\n    this.setState({ isOpen: false });\n    onClose && onClose(e);\n  };\n  renderIcon = () => {\n    const { type, showIcon } = this.props;\n    let icon = this.props.icon;\n    if (!icon && showIcon) {\n      switch (type) {\n        case 'success':\n          icon = 'circle-check';\n          break;\n        case 'warning':\n          icon = 'warning';\n          break;\n        case 'info':\n          icon = 'information';\n          break;\n        case 'error':\n          icon = 'circle-close';\n          break;\n        default:\n          break;\n      }\n    }\n    return icon;\n  };\n  render() {\n    const {\n      prefixCls,\n      className,\n      type,\n      title,\n      description,\n      showIcon,\n      icon,\n      rounded,\n      isCloseButtonShown,\n      ...elementProps\n    } = this.props;\n    const children = description || this.props.children;\n    const cls = [\n      prefixCls,\n      className,\n      `${prefixCls}-${type}`,\n      rounded ? `${prefixCls}-rounded` : null,\n      showIcon ? `${prefixCls}-icon` : null,\n      showIcon\n        ? `${prefixCls}${title ? '-title' : ''}${\n            children ? '-description' : ''\n          }`\n        : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    const Child = (\n      <div className={cls} {...elementProps}>\n        {isCloseButtonShown && (\n          <Button basic onClick={this.handleClosed} icon=\"close\" type=\"light\" />\n        )}\n        {showIcon && <Icon type={this.renderIcon()} />}\n        <span className={`${prefixCls}-title`}>{title}</span>\n        <span className={`${prefixCls}-description`}>{children}</span>\n      </div>\n    );\n    if (!isCloseButtonShown) {\n      return Child;\n    }\n    return (\n      <CSSTransition\n        in={this.state.isOpen}\n        unmountOnExit\n        timeout={300}\n        classNames={prefixCls}\n      >\n        {Child}\n      </CSSTransition>\n    );\n  }\n}\n"
  ]
}