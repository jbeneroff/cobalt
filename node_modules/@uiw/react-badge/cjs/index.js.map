{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "className",
    "style",
    "color",
    "max",
    "dot",
    "processing",
    "count",
    "children",
    "other",
    "supProps",
    "filter",
    "Boolean",
    "join",
    "trim",
    "cls",
    "warpperProps",
    "backgroundColor"
  ],
  "mappings": ";;;;;;;;;;;;;AAAA;;;;;;4BAYeA,kBAAMC,UAAN,CAA8C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3E,yBAWID,KAXJ,CACEE,SADF;AAAA,MACEA,SADF,iCACc,SADd;AAAA,MAEEC,SAFF,GAWIH,KAXJ,CAEEG,SAFF;AAAA,qBAWIH,KAXJ,CAGEI,KAHF;AAAA,MAGEA,KAHF,6BAGU,EAHV;AAAA,MAIEC,KAJF,GAWIL,KAXJ,CAIEK,KAJF;AAAA,mBAWIL,KAXJ,CAKEM,GALF;AAAA,MAKEA,GALF,2BAKQ,EALR;AAAA,mBAWIN,KAXJ,CAMEO,GANF;AAAA,MAMEA,GANF,2BAMQ,KANR;AAAA,0BAWIP,KAXJ,CAOEQ,UAPF;AAAA,MAOEA,UAPF,kCAOe,KAPf;AAAA,MAQEC,KARF,GAWIT,KAXJ,CAQES,KARF;AAAA,MASEC,QATF,GAWIV,KAXJ,CASEU,QATF;AAAA,MAUKC,KAVL,6CAWIX,KAXJ;AAYA,MAAMY,QAAQ,GAAG;AACfT,IAAAA,SAAS,EAAE,CAAC,CAACI,GAAD,aAAUL,SAAV,cAA8B,IAA/B,EAAqCK,GAAG,GAAG,KAAH,GAAW,IAAnD,EACRM,MADQ,CACDC,OADC,EAERC,IAFQ,CAEH,GAFG,EAGRC,IAHQ,EADI;AAKfZ,IAAAA,KAAK,EAAE;AALQ,GAAjB;AAOA,MAAMa,GAAG,GAAG,CACVd,SADU,EAEVD,SAFU,EAGV,CAACQ,QAAD,GAAY,QAAZ,GAAuB,IAHb,EAIV,CAACA,QAAD,aAAeR,SAAf,eAAoC,IAJ1B,EAKVM,UAAU,aAAMN,SAAN,mBAA+B,IAL/B,EAOTW,MAPS,CAOFC,OAPE,EAQTC,IARS,CAQJ,GARI,EASTC,IATS,EAAZ;AAWA,MAAME,YAA2B,GAAG,EAApC;;AACA,MAAIT,KAAK,IAAIA,KAAK,KAAK,CAAvB,EAA0B;AACxBG,IAAAA,QAAQ,CAACR,KAAT;AAAmBe,MAAAA,eAAe,EAAEd;AAApC,OAA8CD,KAA9C;AACD,GAFD,MAEO;AACLc,IAAAA,YAAY,CAACd,KAAb,GAAqBA,KAAK,IAAI,EAA9B;AACD;;AACD,sBACE;AAAM,IAAA,SAAS,EAAEa;AAAjB,KAA0BN,KAA1B,GAAqCO,YAArC;AAAmD,IAAA,GAAG,EAAEjB,GAAxD;AAAA,eACGI,KAAK,iBACJ;AACE,MAAA,SAAS,YAAKH,SAAL,SADX;AAEE,MAAA,KAAK,EAAE;AAAEiB,QAAAA,eAAe,EAAEd;AAAnB;AAFT,MAFJ,EAOGK,QAPH,EAQGD,KAAK,KAAK,CAAV,IAAe,CAACJ,KAAhB,iBACC,8FAASO,QAAT;AAAA,gBACG,CAACL,GAAD,IAAQE,KAAR,IAAiBH,GAAjB,IAAwBG,KAAK,GAAGH,GAAhC,aAAyCA,GAAzC,SAAkDG;AADrD,OATJ;AAAA,KADF;AAgBD,CArDc,C",
  "sourcesContent": [
    "import React from 'react';\nimport { IProps, HTMLSpanProps } from '@uiw/utils';\nimport './style/index.less';\n\nexport interface BadgeProps extends IProps, HTMLSpanProps {\n  color?: string;\n  dot?: boolean;\n  processing?: boolean;\n  max?: number;\n  count?: number;\n}\n\nexport default React.forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n  const {\n    prefixCls = 'w-badge',\n    className,\n    style = {},\n    color,\n    max = 99,\n    dot = false,\n    processing = false,\n    count,\n    children,\n    ...other\n  } = props;\n  const supProps = {\n    className: [!dot ? `${prefixCls}-count` : null, dot ? 'dot' : null]\n      .filter(Boolean)\n      .join(' ')\n      .trim(),\n    style: {},\n  };\n  const cls = [\n    className,\n    prefixCls,\n    !children ? 'nowrap' : null,\n    !children ? `${prefixCls}-status` : null,\n    processing ? `${prefixCls}-processing` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  const warpperProps: HTMLSpanProps = {};\n  if (count || count === 0) {\n    supProps.style = { backgroundColor: color, ...style };\n  } else {\n    warpperProps.style = style || {};\n  }\n  return (\n    <span className={cls} {...other} {...warpperProps} ref={ref}>\n      {color && (\n        <span\n          className={`${prefixCls}-dot`}\n          style={{ backgroundColor: color }}\n        />\n      )}\n      {children}\n      {count !== 0 && !color && (\n        <sup {...supProps}>\n          {!dot && count && max && count > max ? `${max}+` : count}\n        </sup>\n      )}\n    </span>\n  );\n});\n"
  ]
}