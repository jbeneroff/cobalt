"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxGroup = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "name", "value", "onChange"];

var CheckboxGroup = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-checkbox-group' : _props$prefixCls,
      className = props.className,
      name = props.name,
      value = props.value,
      _onChange = props.onChange,
      other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var valueRef = (0, _react.useRef)([]);
  var cls = [prefixCls, className].filter(Boolean).join(' ').trim();

  var childs = _react["default"].Children.toArray(props.children);

  (0, _react.useMemo)(function () {
    return valueRef.current = value || [];
  }, [value]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, other), {}, {
    className: cls,
    ref: ref,
    children: _react["default"].Children.map(childs, function (element) {
      if (! /*#__PURE__*/_react["default"].isValidElement(element)) return;

      if (Array.isArray(value) && element && element.props && element.props.value && value.includes(element.props.value)) {
        if (!valueRef.current.includes(element.props.value)) {
          valueRef.current.push(element.props.value);
        }
      }

      return /*#__PURE__*/_react["default"].cloneElement(element, Object.assign({}, element.props, {
        name: name,
        checked: valueRef.current.includes(element.props.value),
        onChange: function onChange(e) {
          if (e.target.type && e.target.type !== 'checkbox') return;
          var checked = e.target.checked;
          var include = valueRef.current.includes(element.props.value);

          if (!include && checked) {
            valueRef.current.push(element.props.value);
          } else if (include && !checked) {
            valueRef.current = valueRef.current.filter(function (val) {
              return val !== element.props.value;
            });
          }

          _onChange && _onChange(e, valueRef.current);
        }
      }));
    })
  }));
});

exports.CheckboxGroup = CheckboxGroup;
//# sourceMappingURL=Group.js.map