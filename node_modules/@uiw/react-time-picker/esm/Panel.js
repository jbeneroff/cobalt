import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "count", "date", "type", "disabledHours", "disabledMinutes", "disabledSeconds", "hideDisabled", "onSelected"];
import React, { useMemo, useRef } from 'react';
import "./style/time-picker.css";
import { jsx as _jsx } from "react/jsx-runtime";
export default function TimePickerPanel(props) {
  var {
    prefixCls = 'w-timepicker',
    count = 24,
    date,
    type = 'Hours',
    hideDisabled,
    onSelected
  } = props,
      other = _objectWithoutPropertiesLoose(props, _excluded);

  var disableds = useRef([]);

  function getMaybeNumber() {
    if (date && type) {
      return new Date(date)["get" + type]();
    }

    return 0;
  }

  function handleClick(num, e) {
    if (!date) return;
    var currentDate = new Date(date);
    currentDate["set" + type](num);
    onSelected && onSelected(type, num, disableds.current, currentDate);
  }

  function getDisabledItem(num) {
    var disabled = props["disabled" + type];

    if (disabled) {
      return disabled(num, type, new Date(date));
    }

    return false;
  }

  function getItemInstance(tag) {
    if (tag && tag.parentNode && tag.dataset['index']) {
      var offsetTop = Number(tag.dataset['index']) * tag.clientHeight;

      if (tag.parentNode.parentNode) {
        tag.parentNode.parentNode.scrollTop = offsetTop;
      }
    }
  }

  var data = useMemo(() => {
    return [...Array(count)].map((_, idx) => {
      var disabled = getDisabledItem(idx);
      if (disabled) disableds.current.push(idx);
      return {
        count: idx,
        disabled: getDisabledItem(idx)
      };
    }).filter(item => hideDisabled && item.disabled ? false : true);
  }, [hideDisabled]);
  return /*#__PURE__*/_jsx("div", _extends({
    className: prefixCls + "-spinner"
  }, other, {
    children: /*#__PURE__*/_jsx("ul", {
      children: data.map((item, idx) => {
        var liProps = {};

        if (!item.disabled) {
          liProps.onClick = e => handleClick(item.count, e);
        }

        var currentCount = getMaybeNumber();
        return /*#__PURE__*/_jsx("li", _extends({
          "data-index": currentCount === item.count ? idx : undefined,
          ref: tag => tag && getItemInstance(tag)
        }, liProps, {
          className: [item.disabled ? 'disabled' : null, currentCount === item.count ? 'selected' : null, hideDisabled && item.disabled ? 'hide' : null].filter(Boolean).join(' ').trim(),
          children: item.count < 10 ? "0" + item.count : item.count
        }), idx);
      })
    })
  }));
}
//# sourceMappingURL=Panel.js.map