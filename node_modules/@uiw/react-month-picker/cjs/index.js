"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MonthPicker;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactInput = _interopRequireDefault(require("@uiw/react-input"));

var _reactPopover = _interopRequireDefault(require("@uiw/react-popover"));

var _reactButton = _interopRequireDefault(require("@uiw/react-button"));

var _formatter = _interopRequireDefault(require("@uiw/formatter"));

var _reactDatePicker = require("@uiw/react-date-picker");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "format", "onChange", "className", "popoverProps", "pickerCaptionProps", "allowClear", "monthLabel"];
var MONTH_LABEL = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];

function MonthPicker(props) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-monthpicker' : _props$prefixCls,
      _props$format = props.format,
      format = _props$format === void 0 ? 'YYYY/MM' : _props$format,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      className = props.className,
      popoverProps = props.popoverProps,
      _props$pickerCaptionP = props.pickerCaptionProps,
      pickerCaptionProps = _props$pickerCaptionP === void 0 ? {} : _props$pickerCaptionP,
      _props$allowClear = props.allowClear,
      allowClear = _props$allowClear === void 0 ? true : _props$allowClear,
      _props$monthLabel = props.monthLabel,
      monthLabel = _props$monthLabel === void 0 ? MONTH_LABEL : _props$monthLabel,
      inputProps = (0, _objectWithoutProperties2["default"])(props, _excluded);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(new Date()),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      panelDate = _useState4[0],
      setPanelDate = _useState4[1];

  var _useState5 = (0, _react.useState)('month'),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      type = _useState6[0],
      setType = _useState6[1];

  var _useState7 = (0, _react.useState)(props.value),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      date = _useState8[0],
      setDate = _useState8[1];

  (0, _react.useEffect)(function () {
    return setDate(props.value);
  }, [props.value]);
  inputProps.value = (0, _react.useMemo)(function () {
    return typeof date === 'string' ? date : date ? (0, _formatter["default"])(format, date) : '';
  }, [format, date]);

  if (allowClear && inputProps.value) {
    inputProps.addonAfter = /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactButton["default"], {
      className: "".concat(prefixCls, "-close-btn"),
      icon: "close",
      onClick: function onClick() {
        setDate('');
        onChange && onChange();
      },
      size: inputProps.size,
      basic: true,
      type: "light"
    });
  }

  function handleSelectedDate(type, num, paging) {
    var curPanelDate = new Date(new Date(panelDate)[type](num));

    if (!paging) {
      setType('month');
    }

    var curDate = (0, _formatter["default"])(format, new Date(curPanelDate));
    setDate(curDate);
    setPanelDate(curPanelDate);
    onChange && onChange(curPanelDate, curDate);

    if (type === 'setMonth') {
      setIsOpen(false);
    }
  }

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactPopover["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    trigger: "focus",
    placement: "bottomLeft",
    autoAdjustOverflow: true,
    isOpen: isOpen
  }, popoverProps), {}, {
    onVisibleChange: function onVisibleChange(open) {
      return setIsOpen(open);
    },
    content: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "".concat(prefixCls, "-popover"),
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDatePicker.DatePickerCaption, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
        panelDate: panelDate,
        monthLabel: monthLabel
      }, pickerCaptionProps), {}, {
        onSelected: function onSelected(captionType) {
          if (/^(month|year)$/.test(captionType)) {
            setType(captionType);
          } else {
            var year = new Date(panelDate).getFullYear();
            var curPanelDate = new Date(new Date(panelDate).setFullYear(type === 'next' ? year + 1 : year - 1));
            setPanelDate(curPanelDate);
          }
        }
      })), type === 'month' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDatePicker.DatePickerMonth, {
        panelDate: panelDate,
        monthLabel: monthLabel,
        onSelected: function onSelected(month, paging) {
          return handleSelectedDate('setMonth', month, paging);
        }
      }), type === 'year' && /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDatePicker.DatePickerYear, {
        panelDate: panelDate,
        onSelected: function onSelected(year, paging) {
          return handleSelectedDate('setFullYear', year, paging);
        }
      })]
    }),
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactInput["default"], (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      placeholder: "\u8BF7\u8F93\u5165\u65E5\u671F",
      readOnly: true
    }, inputProps), {}, {
      className: [prefixCls, className].filter(Boolean).join(' ').trim()
    }))
  }));
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map