import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["allowClear", "disabled", "size", "option", "loading", "prefixCls", "className", "style", "isOpen", "value", "defaultValue", "showSearch", "placeholder", "onSearch", "onChange", "onSelect"];
import React from 'react';
import Dropdown from '@uiw/react-dropdown';
import Icon from '@uiw/react-icon';
import Menu from '@uiw/react-menu';
import Input from '@uiw/react-input';
import { useState } from 'react';
import { useRef } from 'react';
import { useEffect } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export default function SearchSelect(props) {
  var {
    allowClear = false,
    disabled = false,
    size = 'default',
    option = [],
    loading = false,
    style,
    value,
    defaultValue,
    showSearch,
    placeholder,
    onSearch,
    onChange,
    onSelect
  } = props,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var [innerIsOpen, setInnerIsOpen] = useState(false);
  var [selectedValue, setSelectedValue] = useState(value);
  var [selectedLabel, setSelectedLabel] = useState('');
  var [selectIconType, setSelectIconType] = useState('');
  var divRef = useRef(null);
  useEffect(() => {
    if (defaultValue) {
      var defaultMenuItem = option.find(menuItem => defaultValue === menuItem.value);
      setSelectedValue(defaultValue);
      setSelectedLabel(defaultMenuItem ? defaultMenuItem.label : '');
    }
  }, []);
  useEffect(() => {
    if (value !== selectedValue) {
      setSelectedValue(value);
    }
  }, [value]);

  function handleItemClick(item) {
    setInnerIsOpen(false);
    setSelectedValue(item.value);
    setSelectedLabel(item.label);
    onSelect && onSelect(item.value); // 支持form组件

    handleSelectChange(item.value);
  } // 渲染icon


  function renderSelectIcon(type) {
    var selectIconType;

    if (type === 'enter' && allowClear && selectedValue) {
      selectIconType = 'close';
    } else {
      selectIconType = '';
    }

    setSelectIconType(selectIconType);
  } // handle change


  function handleInputChange(e) {
    var value = e.target.value;
    setInnerIsOpen(!!value);
    setSelectedLabel(value);
    setSelectIconType(showSearch && value ? 'loading' : '');
    showSearch && onSearch && onSearch(value);
    handleSelectChange(value);
  } // 清除选中的值


  function resetSelectedValue() {
    setInnerIsOpen(false);
    setSelectedValue('');
    setSelectedLabel('');
    setSelectIconType('');
    handleSelectChange('');
  }

  function handleSelectChange(value) {
    onChange && onChange(value);
  }

  return /*#__PURE__*/_jsx(Dropdown, _extends({
    trigger: "focus",
    style: {
      marginTop: 5
    },
    disabled: option && option.length > 0 ? false : true
  }, others, {
    onVisibleChange: open => setInnerIsOpen(open),
    isOpen: innerIsOpen,
    menu: /*#__PURE__*/_jsx(Menu, {
      bordered: true,
      style: {
        minHeight: 25,
        maxHeight: 280,
        overflowY: 'scroll',
        width: divRef.current ? divRef.current.offsetWidth : 'auto'
      },
      children: !option || option.length === 0 ? /*#__PURE__*/_jsx("div", {
        style: {
          color: '#c7c7c7',
          fontSize: 12
        },
        children: loading ? '正在加载数据...' : '没有数据'
      }) : option.map((item, idx) => {
        var active = selectedValue === item.value;
        return /*#__PURE__*/_jsx(Menu.Item, {
          active: active,
          text: item.label,
          onClick: () => handleItemClick(item)
        }, idx);
      })
    }),
    children: /*#__PURE__*/_jsx("div", {
      ref: divRef,
      onMouseOver: () => renderSelectIcon('enter'),
      onMouseLeave: () => renderSelectIcon('leave'),
      style: style,
      children: /*#__PURE__*/_jsx(Input, {
        readOnly: !showSearch,
        size: size,
        disabled: disabled,
        onChange: handleInputChange,
        value: selectedLabel,
        placeholder: placeholder,
        addonAfter: (selectIconType === 'close' || selectIconType === 'loading' && loading) && /*#__PURE__*/_jsx(Icon, {
          type: selectIconType,
          spin: loading && selectIconType === 'loading',
          onClick: resetSelectedValue
        })
      })
    })
  }));
}
//# sourceMappingURL=index.js.map