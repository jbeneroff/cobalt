{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "DescriptionsItem",
    "Row",
    "generateChildrenRows",
    "children",
    "column",
    "rows",
    "columns",
    "leftSpans",
    "forEach",
    "node",
    "index",
    "itemNode",
    "push",
    "lastItem",
    "length",
    "cloneElement",
    "span",
    "props",
    "InternalDescriptions",
    "ref",
    "prefixCls",
    "className",
    "title",
    "bordered",
    "size",
    "colon",
    "layout",
    "other",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "cloneChildren",
    "Children",
    "toArray",
    "childs",
    "map",
    "child",
    "Descriptions",
    "forwardRef",
    "Item"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport { IProps } from '@uiw/utils';\nimport DescriptionsItem, { DescriptionsItemProps } from './DescriptionsItem';\nimport Row, { RowProps } from './Row';\nimport './style/index.less';\n\nexport * from './DescriptionsItem';\n\nexport interface DescriptionsProps extends IProps {\n  column?: number;\n  title?: React.ReactNode;\n  children?: React.ReactNode;\n  bordered?: boolean;\n  colon?: boolean;\n  size?: 'large' | 'small' | 'default';\n  layout?: RowProps['layout'];\n}\n\nconst generateChildrenRows = (\n  children: React.ReactElement<DescriptionsItemProps>[],\n  column: number,\n): Array<React.ReactElement<DescriptionsItemProps>[]> => {\n  const rows: React.ReactElement<DescriptionsItemProps>[][] = [];\n  let columns: React.ReactElement<DescriptionsItemProps>[] | null = null;\n  let leftSpans: number;\n\n  children.forEach(\n    (node: React.ReactElement<DescriptionsItemProps>, index: number) => {\n      let itemNode = node;\n\n      if (!columns) {\n        leftSpans = column;\n        columns = [];\n        rows.push(columns);\n      }\n\n      // Always set last span to align the end of Descriptions\n      const lastItem = index === children.length - 1;\n      if (lastItem) {\n        itemNode = React.cloneElement(itemNode, {\n          span: leftSpans,\n        });\n      }\n      // Calculate left fill span\n      const { span = 1 } = itemNode.props;\n      columns.push(itemNode);\n      leftSpans -= span;\n\n      if (leftSpans <= 0) {\n        columns = null;\n      }\n    },\n  );\n\n  return rows;\n};\n\nfunction InternalDescriptions(\n  props: DescriptionsProps,\n  ref: React.ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    prefixCls = 'w-descriptions',\n    className,\n    title,\n    bordered,\n    column = 3,\n    size,\n    colon = true,\n    children,\n    layout = 'horizontal',\n    ...other\n  } = props;\n  const cls = [\n    prefixCls,\n    className,\n    prefixCls && layout ? `${prefixCls}-${layout}` : null,\n    bordered ? `${prefixCls}-bordered` : null,\n    size ? `${prefixCls}-${size}` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  const cloneChildren = React.Children.toArray(children) as JSX.Element[];\n  const childs: Array<React.ReactElement<DescriptionsItemProps>[]> =\n    generateChildrenRows(cloneChildren, column!);\n\n  return (\n    <div className={cls} ref={ref}>\n      <table {...other}>\n        {title && <caption className={`${prefixCls}-title`}>{title}</caption>}\n        <tbody>\n          {childs.map((child, index) => (\n            <Row\n              key={index}\n              prefixCls={prefixCls}\n              bordered={bordered}\n              colon={colon}\n              column={column}\n              layout={layout}\n            >\n              {child}\n            </Row>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst Descriptions = React.forwardRef<HTMLDivElement, DescriptionsProps>(\n  InternalDescriptions,\n);\ntype Descriptions = typeof Descriptions & {\n  Item: typeof DescriptionsItem;\n};\n\n(Descriptions as Descriptions).Item = DescriptionsItem;\n\nexport default Descriptions as Descriptions;\n"
  ]
}