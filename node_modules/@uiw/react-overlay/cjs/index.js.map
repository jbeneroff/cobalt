{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Overlay",
    "props",
    "className",
    "style",
    "isOpen",
    "_",
    "prefixCls",
    "usePortal",
    "maskClosable",
    "backdropProps",
    "portalProps",
    "hasBackdrop",
    "unmountOnExit",
    "timeout",
    "transitionName",
    "onOpening",
    "noop",
    "onOpened",
    "onClosing",
    "onClosed",
    "onClose",
    "children",
    "dialogProps",
    "otherProps",
    "setIsOpen",
    "visible",
    "setVisible",
    "container",
    "overlay",
    "overlayWillClose",
    "overlayWillOpen",
    "decoratedChild",
    "filter",
    "Boolean",
    "join",
    "trim",
    "tabIndex",
    "handleClosed",
    "node",
    "handleBackdropMouseDown",
    "e",
    "target",
    "current",
    "onMouseDown",
    "document",
    "body",
    "classList",
    "add",
    "remove",
    "TransitionGroupComp",
    "status"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * Overlay 组件\n * ---------------\n * 动画库 react-transition-group 文档\n * 老的文档\n * https://facebook.github.io/react/docs/animation.html\n * 新的文档\n * https://reactcommunity.org/react-transition-group/\n * 动画效果\n * https://daneden.github.io/animate.css/\n */\nimport React, { cloneElement, useEffect, useRef, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { TransitionProps } from 'react-transition-group/Transition';\nimport Portal, { PortalProps } from '@uiw/react-portal';\nimport { IProps, noop } from '@uiw/utils';\n\nimport './style/index.less';\n\nexport interface OverlayProps extends IProps, Omit<TransitionProps, 'timeout'> {\n  timeout?: TransitionProps['timeout'];\n  isOpen?: boolean;\n  usePortal?: boolean;\n  maskClosable?: boolean;\n  dialogProps?: React.HTMLProps<HTMLElement>;\n  backdropProps?: React.HTMLProps<HTMLDivElement>;\n  portalProps?: PortalProps;\n  hasBackdrop?: boolean;\n  unmountOnExit?: boolean;\n  transitionName?: string;\n  onEnter?: (node: HTMLElement, isAppearing: boolean) => void;\n  onOpening?: (node: HTMLElement, isAppearing: boolean) => void;\n  onOpened?: (node: HTMLElement, isAppearing: boolean) => void;\n  onClosing?: (node: HTMLElement) => void;\n  onClosed?: (\n    node: HTMLElement | React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => void;\n  onClose?: (evn: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}\n\nexport default function Overlay(props: OverlayProps) {\n  const {\n    className,\n    style,\n    isOpen: _ = false,\n    prefixCls = 'w-overlay',\n    usePortal = true,\n    maskClosable = true,\n    backdropProps = {},\n    portalProps = {},\n    hasBackdrop = true,\n    unmountOnExit = true, // 设置 true 销毁根节点\n    timeout = 300,\n    transitionName = 'w-overlay',\n    // onEnter = noop,\n    onOpening = noop,\n    onOpened = noop,\n    onClosing = noop,\n    onClosed = noop,\n    onClose = noop,\n    children,\n    dialogProps = {},\n    ...otherProps\n  } = props;\n\n  const [isOpen, setIsOpen] = useState(props.isOpen || false);\n  const [visible, setVisible] = useState(false);\n  const container = useRef<HTMLDivElement>(null);\n  const overlay = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (isOpen !== props.isOpen && props.isOpen) {\n      setVisible(true);\n    }\n    if (isOpen !== props.isOpen && !props.isOpen) {\n      overlayWillClose();\n      setIsOpen(false);\n    }\n  }, [props.isOpen]);\n\n  useEffect(() => {\n    if (visible) {\n      overlayWillOpen();\n      setIsOpen(true);\n    }\n  }, [visible]);\n\n  const decoratedChild =\n    typeof children === 'object' ? (\n      cloneElement(children, {\n        ...dialogProps,\n        style: { ...children.props.style, ...dialogProps.style },\n        className: [children.props.className, `${prefixCls}-content`]\n          .filter(Boolean)\n          .join(' ')\n          .trim(),\n        tabIndex: 0,\n      })\n    ) : (\n      <span {...dialogProps} className={`${prefixCls}-content`}>\n        {children}\n      </span>\n    );\n\n  function handleClosed(\n    node: HTMLElement | React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) {\n    setVisible(false);\n    onClosed && onClosed(node);\n  }\n\n  function handleBackdropMouseDown(\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) {\n    if (e.target !== container.current && usePortal) {\n      return;\n    }\n    if (maskClosable && hasBackdrop) {\n      overlayWillClose();\n      setIsOpen(false);\n      onClose && onClose(e);\n    }\n    backdropProps && backdropProps.onMouseDown && backdropProps.onMouseDown(e);\n  }\n\n  function overlayWillOpen() {\n    if (hasBackdrop && usePortal) {\n      document.body.classList.add(`${prefixCls}-open`);\n    }\n  }\n\n  function overlayWillClose() {\n    if (hasBackdrop && usePortal) {\n      document.body.classList.remove(`${prefixCls}-open`);\n    }\n    // if (unmountOnExit) {\n    //   setVisible(false)\n    // }\n  }\n\n  const TransitionGroupComp = (\n    <CSSTransition\n      classNames={transitionName}\n      unmountOnExit={unmountOnExit}\n      timeout={timeout!}\n      {...otherProps}\n      in={isOpen}\n      onEntering={onOpening}\n      onEntered={onOpened}\n      onExiting={onClosing}\n      onExited={handleClosed}\n    >\n      {(status) => {\n        return (\n          <div\n            style={style}\n            ref={overlay}\n            className={[\n              prefixCls,\n              className,\n              !usePortal ? `${prefixCls}-inline` : null,\n              isOpen ? `${prefixCls}-enter-done` : null,\n            ]\n              .filter(Boolean)\n              .join(' ')\n              .trim()}\n          >\n            {hasBackdrop &&\n              cloneElement(<div />, {\n                ...backdropProps,\n                onMouseDown: handleBackdropMouseDown,\n                className: [`${prefixCls}-backdrop`, backdropProps.className]\n                  .filter(Boolean)\n                  .join(' ')\n                  .trim(),\n                tabIndex: maskClosable ? 0 : null,\n              })}\n            {usePortal ? (\n              <div\n                ref={container}\n                onMouseDown={handleBackdropMouseDown}\n                className={`${prefixCls}-container`}\n              >\n                {cloneElement(decoratedChild, { 'data-status': status })}\n              </div>\n            ) : (\n              cloneElement(decoratedChild, { 'data-status': status })\n            )}\n          </div>\n        );\n      }}\n    </CSSTransition>\n  );\n  if (visible && usePortal) {\n    return <Portal {...{ ...portalProps }}>{TransitionGroupComp}</Portal>;\n  } else {\n    return TransitionGroupComp;\n  }\n}\n"
  ]
}