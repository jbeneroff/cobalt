import React from 'react';
import { IconProps } from '@uiw/react-icon';
import { IProps, HTMLDivProps } from '@uiw/utils';
import './style/index.less';
export declare type TreeRenderTitleNode<T> = {
    selected?: boolean;
    noChild?: boolean;
    isHalfChecked?: boolean;
    openKeys?: TreeProps<T>['openKeys'];
    selectedKeys?: TreeProps<T>['selectedKeys'];
};
export interface TreeProps<T> extends IProps, HTMLDivProps {
    icon?: IconProps<T>['type'];
    data?: TreeData[];
    openKeys?: TreeData['key'][];
    selectedKeys?: TreeData['key'][];
    defaultExpandAll?: boolean;
    /**
     * 是否自动展开父节点
     */
    autoExpandParent?: boolean;
    /**
     * 是否展示连接线
     */
    showLine?: boolean;
    iconAnimation?: boolean;
    isSelected?: boolean;
    /**
     * 子节点受父节点控制设置 `true`，需要配合 `multiple` 参数使用。
     */
    checkStrictly?: boolean;
    /**
     * 支持点选多个节点
     */
    multiple?: boolean;
    renderTitle?: (item: TreeData, node: TreeRenderTitleNode<T>) => React.ReactElement;
    onExpand?: (key: TreeData['key'], expanded: boolean, item: TreeData, evn: React.MouseEvent<HTMLElement>) => void;
    onSelected?: (keys: TreeData['key'][], key: TreeData['key'], selected: boolean, item: TreeData, evn: React.MouseEvent<HTMLElement>) => void;
}
export interface TreeData {
    label?: React.ReactNode;
    children?: TreeData[];
    key?: string | number;
    [keyName: string]: any;
}
export declare const getChildKeys: (childs?: TreeData[], result?: TreeData['key'][]) => TreeData['key'][];
export default function Tree<T>(props: TreeProps<T>): JSX.Element;
