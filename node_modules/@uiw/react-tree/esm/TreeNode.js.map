{
  "version": 3,
  "sources": [
    "../src/TreeNode.tsx"
  ],
  "names": [
    "React",
    "useCallback",
    "useMemo",
    "CSSTransition",
    "Icon",
    "noop",
    "getChildKeys",
    "Label",
    "label",
    "TreeNode",
    "props",
    "prefixCls",
    "renderTitle",
    "icon",
    "iconAnimation",
    "isSelected",
    "openKeys",
    "selectedKeys",
    "data",
    "level",
    "parent",
    "onItemClick",
    "onItemSelected",
    "other",
    "isOpen",
    "key",
    "indexOf",
    "onExit",
    "node",
    "style",
    "height",
    "scrollHeight",
    "onExiting",
    "onEnter",
    "isAppearing",
    "onEntering",
    "onEntered",
    "filter",
    "Boolean",
    "join",
    "trim",
    "map",
    "item",
    "idx",
    "selected",
    "noChild",
    "children",
    "itemIsOpen",
    "iconItem",
    "childKeys",
    "checkedKeys",
    "isHalfChecked",
    "length",
    "evn",
    "disabled"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useCallback, useMemo } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Icon, { IconProps } from '@uiw/react-icon';\nimport { IProps, noop } from '@uiw/utils';\nimport { TreeData, TreeProps, getChildKeys } from './';\n\ninterface TreeNodeProps<T> extends IProps {\n  data: TreeData[];\n  level: number;\n  parent?: TreeData;\n\n  icon?: IconProps<T>['type'];\n  iconAnimation?: boolean;\n  isSelected?: boolean;\n  renderTitle?: TreeProps<T>['renderTitle'];\n\n  openKeys?: TreeData['key'][];\n  selectedKeys?: TreeData['key'][];\n\n  onItemClick?: (item: TreeData, evn: React.MouseEvent<HTMLElement>) => void;\n  onItemSelected?: (item: TreeData, evn: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Label = ({ label }: { label: React.ReactNode }) =>\n  useMemo(() => <span>{label}</span>, [label]);\n\nexport default function TreeNode<T>(props: TreeNodeProps<T>) {\n  const {\n    prefixCls,\n    renderTitle,\n    icon,\n    iconAnimation,\n    isSelected,\n    openKeys,\n    selectedKeys,\n\n    data,\n    level,\n    parent,\n\n    onItemClick = noop,\n    onItemSelected = noop,\n    ...other\n  } = props;\n  let isOpen = false;\n\n  if (parent && parent.key) {\n    isOpen = !!(openKeys && openKeys.indexOf(parent.key) > -1);\n  }\n  const onExit = useCallback((node: HTMLElement) => {\n    node.style.height = `${node.scrollHeight}px`;\n  }, []);\n  const onExiting = useCallback((node: HTMLElement) => {\n    node.style.height = '1px';\n  }, []);\n  const onEnter = useCallback((node: HTMLElement, isAppearing: boolean) => {\n    node.style.height = '1px';\n  }, []);\n  const onEntering = useCallback((node: HTMLElement, isAppearing: boolean) => {\n    node.style.height = `${node.scrollHeight}px`;\n  }, []);\n  const onEntered = useCallback((node: HTMLElement, isAppearing: boolean) => {\n    node.style.height = 'initial';\n  }, []);\n  return (\n    <CSSTransition\n      classNames={prefixCls}\n      in={isOpen}\n      timeout={200}\n      onExit={onExit}\n      onExiting={onExiting}\n      onEnter={onEnter}\n      onEntered={onEntered}\n      onEntering={onEntering}\n    >\n      <ul\n        className={[\n          level !== 1 && isOpen ? [`${prefixCls}-open`] : null,\n          level !== 1 && !isOpen ? [`${prefixCls}-close`] : null,\n        ]\n          .filter(Boolean)\n          .join(' ')\n          .trim()}\n      >\n        {data.map((item, idx: number) => {\n          item.parent = parent;\n          const selected = !!(\n            selectedKeys && selectedKeys.indexOf(item.key) > -1\n          );\n          const noChild = !item.children;\n          const itemIsOpen =\n            openKeys && openKeys.indexOf(item.key) > -1 && !!item.children;\n          const iconItem =\n            typeof icon === 'function'\n              ? icon(item, {\n                  isOpen: !!itemIsOpen,\n                  noChild,\n                  openKeys,\n                  selectedKeys,\n                })\n              : icon;\n          const childKeys = noChild ? [] : getChildKeys(item.children);\n          const checkedKeys = selectedKeys\n            ? selectedKeys.filter((key) => childKeys.indexOf(key) > -1)\n            : [];\n          const isHalfChecked =\n            checkedKeys.length > 0 && childKeys.length !== checkedKeys.length;\n          return (\n            <li key={idx}>\n              <div className={`${prefixCls}-label`}>\n                <span\n                  className={`${prefixCls}-switcher`}\n                  onClick={(evn) => onItemClick(item, evn)}\n                >\n                  <Icon\n                    type={iconItem || 'caret-right'}\n                    className={[\n                      typeof icon === 'function'\n                        ? `${prefixCls}-switcher-noop`\n                        : null,\n                      noChild ? 'no-child' : null,\n                      !iconAnimation ? 'no-animation' : null,\n                      itemIsOpen ? 'open' : null,\n                    ]\n                      .filter(Boolean)\n                      .join(' ')\n                      .trim()}\n                  />\n                </span>\n                <div\n                  onClick={(evn) => onItemSelected(item, evn)}\n                  className={[\n                    `${prefixCls}-title`,\n                    selected && isSelected ? 'selected' : null,\n                    item.disabled ? 'disabled' : null,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')\n                    .trim()}\n                >\n                  {renderTitle ? (\n                    renderTitle(item, {\n                      selected,\n                      noChild,\n                      openKeys,\n                      isHalfChecked,\n                      selectedKeys,\n                    })\n                  ) : (\n                    <Label label={item.label} />\n                  )}\n                </div>\n              </div>\n              {item.children && (\n                <TreeNode\n                  {...other}\n                  {...{\n                    prefixCls,\n                    icon,\n                    iconAnimation,\n                    isSelected,\n                    openKeys,\n                    selectedKeys,\n                    onItemClick,\n                    onItemSelected,\n                    renderTitle,\n                  }}\n                  prefixCls={prefixCls}\n                  data={item.children}\n                  level={level + 1}\n                  parent={item}\n                />\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </CSSTransition>\n  );\n}\n"
  ]
}