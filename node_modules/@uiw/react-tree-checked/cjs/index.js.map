{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "TreeChecked",
    "prefixCls",
    "props",
    "className",
    "filter",
    "Boolean",
    "join",
    "trim",
    "checkStrictly",
    "isSelected",
    "multiple",
    "item",
    "node",
    "checkedProps",
    "isHalfChecked",
    "indeterminate",
    "selected",
    "checked",
    "label"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;AACA;;AAKA;;;;;;AAKe,SAASA,WAAT,OAGsB;AAAA,4BAFnCC,SAEmC;AAAA,MAFnCA,SAEmC,+BAFvB,eAEuB;AAAA,MADhCC,KACgC;AACnCA,EAAAA,KAAK,CAACC,SAAN,GAAkB,CAACF,SAAD,EAAYC,KAAK,CAACC,SAAlB,EACfC,MADe,CACRC,OADQ,EAEfC,IAFe,CAEV,GAFU,EAGfC,IAHe,EAAlB;AAIAL,EAAAA,KAAK,CAACM,aAAN,GAAsB,IAAtB;AACAN,EAAAA,KAAK,CAACO,UAAN,GAAmB,KAAnB;AACAP,EAAAA,KAAK,CAACQ,QAAN,GAAiB,IAAjB;AACA,sBACE,qBAAC,qBAAD;AACE,IAAA,WAAW,EAAE,qBAACC,IAAD,EAAiBC,IAAjB,EAAkD;AAC7D,UAAMC,YAA2B,GAAG,EAApC;;AACA,UAAID,IAAI,CAACE,aAAT,EAAwB;AACtBD,QAAAA,YAAY,CAACE,aAAb,GAA6B,IAA7B;AACD;;AACD,UAAIH,IAAI,CAACI,QAAT,EAAmB;AACjBH,QAAAA,YAAY,CAACI,OAAb,GAAuB,IAAvB;AACD,OAFD,MAEO;AACLJ,QAAAA,YAAY,CAACI,OAAb,GAAuB,KAAvB;AACD;;AACD,0BACE,sBAAC,eAAD;AAAA,gCACE,qBAAC,yBAAD;AAAU,UAAA,SAAS,YAAKhB,SAAL;AAAnB,WAAiDY,YAAjD,EADF,EAEGF,IAAI,CAACO,KAAL,iBAAc;AAAA,oBAAOP,IAAI,CAACO;AAAZ,UAFjB;AAAA,QADF;AAMD;AAjBH,KAkBMhB,KAlBN,EADF;AAsBD",
  "sourcesContent": [
    "import React, { Fragment } from 'react';\nimport Tree, {\n  TreeProps,\n  TreeRenderTitleNode,\n  TreeData,\n} from '@uiw/react-tree';\nimport Checkbox, { CheckboxProps } from '@uiw/react-checkbox';\nimport './style/index.less';\n\nexport interface TreeCheckedProps<T> extends TreeProps<T> {}\n\nexport default function TreeChecked<T>({\n  prefixCls = 'w-treechecked',\n  ...props\n}: TreeCheckedProps<T>): JSX.Element {\n  props.className = [prefixCls, props.className]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  props.checkStrictly = true;\n  props.isSelected = false;\n  props.multiple = true;\n  return (\n    <Tree\n      renderTitle={(item: TreeData, node: TreeRenderTitleNode<T>) => {\n        const checkedProps: CheckboxProps = {};\n        if (node.isHalfChecked) {\n          checkedProps.indeterminate = true;\n        }\n        if (node.selected) {\n          checkedProps.checked = true;\n        } else {\n          checkedProps.checked = false;\n        }\n        return (\n          <Fragment>\n            <Checkbox className={`${prefixCls}-checked`} {...checkedProps} />\n            {item.label && <span>{item.label}</span>}\n          </Fragment>\n        );\n      }}\n      {...props}\n    />\n  );\n}\n"
  ]
}