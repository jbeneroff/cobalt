{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useMemo",
    "useState",
    "DatePickerDay",
    "Icon",
    "formatter",
    "RenderDay",
    "MONTH_LABEL",
    "Calendar",
    "props",
    "prefixCls",
    "className",
    "style",
    "today",
    "Date",
    "date",
    "data",
    "monthLabel",
    "titleFormat",
    "todayLabel",
    "onPaging",
    "onSelectDay",
    "otherProps",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "panelDate",
    "setPanelDate",
    "handlePaging",
    "type",
    "currentDate",
    "month",
    "getMonth",
    "setMonth",
    "titleLable",
    "btngroup",
    "dateSource",
    "day",
    "propsNext"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport {\n  DatePickerDay,\n  DatePickerDayProps,\n  DatePickerDayDateSource,\n} from '@uiw/react-date-picker';\nimport Icon from '@uiw/react-icon';\nimport formatter from '@uiw/formatter';\nimport { IProps } from '@uiw/utils';\nimport RenderDay from './DayLabel';\nimport './style/index.less';\n\nexport interface CalendarProps extends IProps, DatePickerDayProps {\n  /**\n   * 设置日历面板上面的日期标题。\n   */\n  titleFormat?: string;\n  /**\n   * 点击选择日期回调\n   */\n  onSelectDay?: (\n    selectDay?: Date,\n    dateSource?: DatePickerDayDateSource,\n  ) => void;\n  /**\n   * 日历面板默认展示哪一页\n   */\n  panelDate?: Date;\n  /**\n   * 默认高亮当天日期\n   */\n  today?: Date;\n  /**\n   * 在日历面板上面添加通知，数组中的对象可以设置 `ElementProps`，如：`style`, `onClick` 等属性。\n   */\n  data?: ICalendarData[];\n  /**\n   * 选中的日期\n   */\n  date?: Date;\n  /**\n   * `今天` 按钮的文本设置\n   */\n  todayLabel?: string;\n  /**\n   * 月份显示文本\n   */\n  monthLabel?: string[];\n  /** 翻页触发事件 */\n  onPaging?: (\n    type: 'prev' | 'next' | 'today',\n    month: number,\n    panelDate?: Date,\n  ) => void;\n}\n\nexport interface ICalendarData {\n  label?: React.ReactNode;\n  date?: string;\n  [key: string]: any;\n}\n\nconst MONTH_LABEL = [\n  '一月',\n  '二月',\n  '三月',\n  '四月',\n  '五月',\n  '六月',\n  '七月',\n  '八月',\n  '九月',\n  '十月',\n  '十一月',\n  '十二月',\n];\n\nexport default function Calendar(props: CalendarProps) {\n  const {\n    prefixCls = 'w-calendar',\n    className,\n    style,\n    today = new Date(),\n    date,\n    data,\n    monthLabel = MONTH_LABEL,\n    titleFormat = 'YYYY/MM',\n    todayLabel = '今天',\n    panelDate: _,\n    onPaging,\n    onSelectDay,\n    ...otherProps\n  } = props;\n  const cls = [prefixCls, className].filter(Boolean).join(' ').trim();\n  const [panelDate, setPanelDate] = useState<Date>(\n    props.panelDate || new Date(),\n  );\n\n  useEffect(() => {\n    if (props.panelDate !== panelDate) {\n      setPanelDate(panelDate);\n    }\n  }, [props.panelDate]);\n\n  function handlePaging(type: 'prev' | 'next' | 'today') {\n    let currentDate = new Date();\n    if (type === 'today') {\n      currentDate = today || new Date();\n    } else {\n      const month = panelDate.getMonth();\n      if (panelDate && type === 'prev') {\n        panelDate.setMonth(month - 1);\n      }\n      if (panelDate && type === 'next') {\n        panelDate.setMonth(month + 1);\n      }\n      currentDate = panelDate;\n    }\n    setPanelDate(new Date(currentDate));\n    onPaging && onPaging(type, currentDate!.getMonth() + 1, currentDate);\n  }\n\n  const titleLable = useMemo(\n    () => (\n      <div className={`${prefixCls}-title`}>\n        {formatter(titleFormat, panelDate)}\n      </div>\n    ),\n    [prefixCls, titleFormat, panelDate],\n  );\n\n  const btngroup = useMemo(\n    () => (\n      <div className={`${prefixCls}-btn-group`}>\n        <Icon type=\"down\" onClick={() => handlePaging('prev')} />\n        <span\n          className={`${prefixCls}-btn`}\n          onClick={() => handlePaging('today')}\n        >\n          {todayLabel}\n        </span>\n        <Icon type=\"down\" onClick={() => handlePaging('next')} />\n      </div>\n    ),\n    [prefixCls, todayLabel],\n  );\n\n  return (\n    <div className={cls} style={style}>\n      <div className={`${prefixCls}-caption`}>\n        {titleLable}\n        {btngroup}\n      </div>\n      <DatePickerDay\n        onSelectDay={(currentDate, dateSource) => {\n          setPanelDate(currentDate!);\n          onSelectDay && onSelectDay(currentDate, dateSource);\n        }}\n        renderDay={(day, propsNext) => (\n          <RenderDay\n            prefixCls={prefixCls}\n            day={day}\n            data={data}\n            currentDate={propsNext.date}\n          />\n        )}\n        date={date}\n        today={today}\n        panelDate={panelDate || new Date()}\n        {...otherProps}\n      />\n    </div>\n  );\n}\n"
  ]
}