{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "Icon",
    "React",
    "forwardRef",
    "props",
    "ref",
    "className",
    "prefixCls",
    "verticalAlign",
    "tagName",
    "TagName",
    "color",
    "type",
    "spin",
    "others",
    "renderSVGPaths",
    "svgPathsData",
    "svgPaths",
    "pathStrings",
    "map",
    "d",
    "i",
    "svg",
    "isValidElement",
    "cloneElement",
    "fill",
    "style",
    "propps",
    "filter",
    "Boolean",
    "join",
    "trim"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAqBA,IAAMA,IAAI,gBAAGC,kBAAMC,UAAN,CAA4C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACvE,MACEC,SADF,GASIF,KATJ,CACEE,SADF;AAAA,yBASIF,KATJ,CAEEG,SAFF;AAAA,MAEEA,SAFF,iCAEc,QAFd;AAAA,6BASIH,KATJ,CAGEI,aAHF;AAAA,MAGEA,aAHF,qCAGkB,QAHlB;AAAA,uBASIJ,KATJ,CAIEK,OAJF;AAAA,MAIWC,OAJX,+BAIqB,MAJrB;AAAA,MAKEC,KALF,GASIP,KATJ,CAKEO,KALF;AAAA,MAMEC,IANF,GASIR,KATJ,CAMEQ,IANF;AAAA,oBASIR,KATJ,CAOES,IAPF;AAAA,MAOEA,IAPF,4BAOS,KAPT;AAAA,MAQKC,MARL,6CASIV,KATJ;AAWA,MAAMW,cAAc,GAAG,oBAAQ,YAAM;AACnC,QAAI,CAACH,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAMI,YAAY,GAAGC,iBAArB;AACA,QAAMC,WAAqB,GAAGF,YAAY,CAACJ,IAAD,CAAZ,IAAmC,EAAjE;AACA,WAAOM,WAAW,CAACC,GAAZ,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,0BAAU;AAAc,QAAA,CAAC,EAAED,CAAjB;AAAoB,QAAA,QAAQ,EAAC;AAA7B,SAAWC,CAAX,CAAV;AAAA,KAAhB,CAAP;AACD,GAPsB,EAOpB,CAACT,IAAD,CAPoB,CAAvB;AASA,MAAIU,GAAG,GAAG,IAAV;;AACA,MAAI,OAAOV,IAAP,KAAgB,QAApB,EAA8B;AAC5BU,IAAAA,GAAG,gBACD;AAAK,MAAA,IAAI,EAAEX,KAAX;AAAkB,MAAA,OAAO,EAAC,WAA1B;AAAA,gBACGI;AADH,MADF;AAKD,GAND,MAMO,kBAAIb,kBAAMqB,cAAN,CAAqBX,IAArB,CAAJ,EAAgC;AACrCU,IAAAA,GAAG,gBAAGpB,kBAAMsB,YAAN,CAAmBZ,IAAnB,EAA0D;AAC9Da,MAAAA,IAAI,EAAEd;AADwD,KAA1D,CAAN;AAGD,GAJM,MAIA;AACL,WAAO,IAAP;AACD;;AACDG,EAAAA,MAAM,CAACY,KAAP;AAAiBD,IAAAA,IAAI,EAAE;AAAvB,KAA0CX,MAAM,CAACY,KAAjD;AACA,MAAMC,MAAM,qEACPb,MADO;AAEVR,IAAAA,SAAS,EAAE,CACTC,SADS,EAETD,SAFS,EAGTC,SAAS,IAAIC,aAAb,aAAgCD,SAAhC,cAA6CC,aAA7C,IAA+D,IAHtD,EAITK,IAAI,IAAIN,SAAR,aAAuBA,SAAvB,aAA0C,IAJjC,EAMRqB,MANQ,CAMDC,OANC,EAORC,IAPQ,CAOH,GAPG,EAQRC,IARQ;AAFD,IAAZ;AAYA,sBAAO,qBAAC,OAAD,oEAAaJ,MAAb;AAAA,cAAsBL;AAAtB,KAAP;AACD,CAjDY,CAAb;;eAmDerB,I",
  "sourcesContent": [
    "import React, { useMemo } from 'react';\nimport svgPaths from '@uiw/icons/fonts/w-icon.json';\nimport './style/index.less';\n\ntype ElementTag<T = any> = T extends HTMLElement ? React.HTMLAttributes<T> : T;\n\nexport type IconsName = keyof typeof svgPaths;\nexport interface IconProps<T = HTMLSpanElement> extends ElementTag {\n  style?: React.CSSProperties;\n  className?: string;\n  prefixCls?: string;\n  /**\n   * HTML tag to use for the rendered element.\n   * @default \"span\"\n   */\n  tagName?: T extends HTMLElement ? keyof JSX.IntrinsicElements : T;\n  type?: IconsName | null | T;\n  spin?: boolean;\n  color?: string;\n  verticalAlign?: 'middle' | 'baseline';\n}\n\nconst Icon = React.forwardRef<HTMLDivElement, IconProps>((props, ref) => {\n  const {\n    className,\n    prefixCls = 'w-icon',\n    verticalAlign = 'middle',\n    tagName: TagName = 'span',\n    color,\n    type,\n    spin = false,\n    ...others\n  } = props;\n\n  const renderSVGPaths = useMemo(() => {\n    if (!type) {\n      return null;\n    }\n    const svgPathsData = svgPaths;\n    const pathStrings: string[] = svgPathsData[type as IconsName] || [];\n    return pathStrings.map((d, i) => <path key={i} d={d} fillRule=\"evenodd\" />);\n  }, [type]);\n\n  let svg = null;\n  if (typeof type === 'string') {\n    svg = (\n      <svg fill={color} viewBox=\"0 0 20 20\">\n        {renderSVGPaths}\n      </svg>\n    );\n  } else if (React.isValidElement(type)) {\n    svg = React.cloneElement(type as unknown as React.ReactElement, {\n      fill: color,\n    });\n  } else {\n    return null;\n  }\n  others.style = { fill: 'currentColor', ...others.style };\n  const propps = {\n    ...others,\n    className: [\n      prefixCls,\n      className,\n      prefixCls && verticalAlign ? `${prefixCls}-${verticalAlign}` : null,\n      spin && prefixCls ? `${prefixCls}-spin` : null,\n    ]\n      .filter(Boolean)\n      .join(' ')\n      .trim(),\n  };\n  return <TagName {...propps}>{svg}</TagName>;\n});\n\nexport default Icon;\n"
  ]
}