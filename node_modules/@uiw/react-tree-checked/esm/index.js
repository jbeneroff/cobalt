import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls"];
import React, { Fragment } from 'react';
import Tree from '@uiw/react-tree';
import Checkbox from '@uiw/react-checkbox';
import "./style/index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function TreeChecked(_ref) {
  var {
    prefixCls = 'w-treechecked'
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  props.className = [prefixCls, props.className].filter(Boolean).join(' ').trim();
  props.checkStrictly = true;
  props.isSelected = false;
  props.multiple = true;
  return /*#__PURE__*/_jsx(Tree, _extends({
    renderTitle: (item, node) => {
      var checkedProps = {};

      if (node.isHalfChecked) {
        checkedProps.indeterminate = true;
      }

      if (node.selected) {
        checkedProps.checked = true;
      } else {
        checkedProps.checked = false;
      }

      return /*#__PURE__*/_jsxs(Fragment, {
        children: [/*#__PURE__*/_jsx(Checkbox, _extends({
          className: prefixCls + "-checked"
        }, checkedProps)), item.label && /*#__PURE__*/_jsx("span", {
          children: item.label
        })]
      });
    }
  }, props));
}
//# sourceMappingURL=index.js.map