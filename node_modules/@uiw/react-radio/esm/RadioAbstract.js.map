{
  "version": 3,
  "sources": [
    "../src/RadioAbstract.tsx"
  ],
  "names": [
    "React",
    "useState",
    "useMemo",
    "RadioAbstract",
    "forwardRef",
    "props",
    "ref",
    "prefixCls",
    "type",
    "disabled",
    "value",
    "className",
    "style",
    "children",
    "size",
    "checked",
    "prChecked",
    "onChange",
    "other",
    "setChecked",
    "prevChecked",
    "setPrevChecked",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "handleChange",
    "e",
    "persist",
    "target",
    "label"
  ],
  "mappings": ";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;;;AAgBA,OAAO,IAAMC,aAAa,gBAAGH,KAAK,CAACI,UAAN,CAG3B,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChB,MAAM;AACJC,IAAAA,SAAS,GAAG,SADR;AAEJC,IAAAA,IAAI,GAAG,OAFH;AAGJC,IAAAA,QAAQ,GAAG,KAHP;AAIJC,IAAAA,KAAK,GAAG,EAJJ;AAKJC,IAAAA,SALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA,IARI;AASJC,IAAAA,OAAO,EAAEC,SAAS,GAAG,KATjB;AAUJC,IAAAA;AAVI,MAYFZ,KAZJ;AAAA,MAWKa,KAXL,iCAYIb,KAZJ;;AAcA,MAAM,CAACU,OAAD,EAAUI,UAAV,IAAwBlB,QAAQ,CAACe,SAAD,CAAtC;AACA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,EAA9C;;AACA,MAAIe,SAAS,KAAKI,WAAlB,EAA+B;AAC7BC,IAAAA,cAAc,CAACL,SAAD,CAAd;AACD;;AACDd,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAIc,SAAS,KAAKI,WAAlB,EAA+B;AAC7BD,MAAAA,UAAU,CAACH,SAAD,CAAV;AACD;AACF,GAJM,EAIJ,CAACI,WAAD,CAJI,CAAP;AAMA,MAAME,GAAG,GAAG,CACVf,SADU,EAEVI,SAFU,EAGVF,QAAQ,GAAG,UAAH,GAAgB,IAHd,EAIVK,IAAI,GAAMP,SAAN,SAAmBO,IAAnB,GAA4B,IAJtB,EAMTS,MANS,CAMFC,OANE,EAOTC,IAPS,CAOJ,GAPI,EAQTC,IARS,EAAZ;AASAxB,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAIa,OAAO,KAAKV,KAAK,CAACU,OAAtB,EAA+B;AAC7BI,MAAAA,UAAU,CAAC,CAAC,CAACd,KAAK,CAACU,OAAT,CAAV;AACD;AACF,GAJM,EAIJ,CAACV,KAAK,CAACU,OAAP,CAJI,CAAP;;AAMA,WAASY,YAAT,CAAsBC,CAAtB,EAA8D;AAC5DA,IAAAA,CAAC,CAACC,OAAF;AACAV,IAAAA,UAAU,CAACS,CAAC,CAACE,MAAF,CAASf,OAAV,CAAV;AACAE,IAAAA,QAAQ,IAAIA,QAAQ,CAACW,CAAD,CAApB;AACD;;AAED,MAAMG,KAAK,GAAGlB,QAAQ,IAAIH,KAA1B;AACA,sBACE;AAAaC,IAAAA,SAAS,EAAEW,GAAxB;AAA6BV,IAAAA,KAA7B;AAAA,4BACE,wCACWM,KADX;AACkBV,MAAAA,IADlB;AACwBC,MAAAA,QADxB;AACkCC,MAAAA;AADlC;AAEE,MAAA,OAAO,EAAEK,OAFX;AAGE,MAAA,QAAQ,EAAEY,YAHZ;AAIE,MAAA,GAAG,EAAErB;AAJP,OADF,EAOGyB,KAAK,iBAAI;AAAK,MAAA,SAAS,EAAKxB,SAAL,UAAd;AAAA,gBAAsCwB;AAAtC,MAPZ;AAAA,IADF;AAWD,CA9D4B,CAAtB",
  "sourcesContent": [
    "import React, { useState, useMemo } from 'react';\nimport { IProps, HTMLInputProps } from '@uiw/utils';\n\n/**\n * Constructs a type by picking all properties from `HTMLInputProps` and then removing `size`.\n * Omit: https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk\n */\nexport interface RadioAbstractProps\n  extends IProps,\n    Omit<HTMLInputProps, 'size'> {\n  size?: 'large' | 'default' | 'small';\n  checked?: boolean;\n  disabled?: boolean;\n  onChange?: (even: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const RadioAbstract = React.forwardRef<\n  HTMLInputElement,\n  RadioAbstractProps\n>((props, ref) => {\n  const {\n    prefixCls = 'w-radio',\n    type = 'radio',\n    disabled = false,\n    value = '',\n    className,\n    style,\n    children,\n    size,\n    checked: prChecked = false,\n    onChange,\n    ...other\n  } = props;\n\n  const [checked, setChecked] = useState(prChecked);\n  const [prevChecked, setPrevChecked] = useState<boolean>();\n  if (prChecked !== prevChecked) {\n    setPrevChecked(prChecked);\n  }\n  useMemo(() => {\n    if (prChecked !== prevChecked) {\n      setChecked(prChecked);\n    }\n  }, [prevChecked]);\n\n  const cls = [\n    prefixCls,\n    className,\n    disabled ? 'disabled' : null,\n    size ? `${prefixCls}-${size}` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n  useMemo(() => {\n    if (checked !== props.checked) {\n      setChecked(!!props.checked);\n    }\n  }, [props.checked]);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    e.persist();\n    setChecked(e.target.checked);\n    onChange && onChange(e);\n  }\n\n  const label = children || value;\n  return (\n    <label {...{ className: cls, style }}>\n      <input\n        {...{ ...other, type, disabled, value }}\n        checked={checked}\n        onChange={handleChange}\n        ref={ref}\n      />\n      {label && <div className={`${prefixCls}-text`}>{label}</div>}\n    </label>\n  );\n});\n"
  ]
}