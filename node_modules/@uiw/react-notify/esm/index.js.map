{
  "version": 3,
  "sources": [
    "../src/index.tsx"
  ],
  "names": [
    "React",
    "ReactDOM",
    "randomid",
    "Container",
    "notifys",
    "notifysDom",
    "NotificationCreate",
    "props",
    "type",
    "placement",
    "icon",
    "div",
    "document",
    "createElement",
    "body",
    "appendChild",
    "className",
    "filter",
    "Boolean",
    "join",
    "trim",
    "render",
    "duration",
    "create",
    "key",
    "willUnmount",
    "nprops",
    "notifysChild",
    "onClose",
    "keys",
    "Object",
    "length",
    "removeChild",
    "forEach",
    "options"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AlertProps } from '@uiw/react-alert';\nimport { randomid } from '@uiw/utils';\nimport Container, { Placement, ContainerNotifys } from './Container';\nimport './style/index.less';\n\nexport interface NotificationCreateProps extends Omit<AlertProps, 'type'> {\n  placement?: Placement;\n  description?: React.ReactNode;\n  type?:\n    | 'primary'\n    | 'danger'\n    | 'open'\n    | 'success'\n    | 'warning'\n    | 'info'\n    | 'error';\n  duration?: number;\n  key?: string;\n  willUnmount?: (\n    props: NotificationCreateProps,\n    notifys: ContainerNotifys,\n  ) => void;\n}\n\nexport type Notifys = { [key: string]: any };\nexport type NotifysDom = { [key: string]: HTMLDivElement };\n\nconst notifys: Notifys = {};\nconst notifysDom: NotifysDom = {};\n\nexport interface NotificationProps {\n  (props: NotificationCreateProps, type: NotificationCreateProps['type']): void;\n  [key: string]: () => void;\n}\n\nfunction NotificationCreate(\n  props: NotificationCreateProps,\n  type: NotificationCreateProps['type'] = 'open',\n) {\n  if (!props.placement) {\n    props.placement = 'topRight';\n  }\n  props.type = type as NotificationCreateProps['type'];\n  if (!props.icon && props.icon !== null) {\n    switch (props.type) {\n      case 'success':\n        props.icon = 'circle-check';\n        break;\n      case 'warning':\n        props.icon = 'warning';\n        break;\n      case 'info':\n        props.icon = 'information';\n        break;\n      case 'error':\n        props.icon = 'circle-close';\n        break;\n      default:\n        break;\n    }\n  }\n  switch (props.type) {\n    case 'info':\n      props.type = 'primary';\n      break;\n    case 'error':\n      props.type = 'danger';\n      break;\n    default:\n      break;\n  }\n\n  if (props.placement && !notifys[props.placement]) {\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n    div.className = ['w-notify-warpper', props.placement]\n      .filter(Boolean)\n      .join(' ')\n      .trim();\n    notifysDom[props.placement] = div;\n    notifys[props.placement] = ReactDOM.render(<Container />, div);\n  }\n\n  if (props.duration !== null) {\n    props.duration = (props.duration || 4.5) * 1000;\n  }\n\n  if (notifys[props.placement]) {\n    notifys[props.placement].create({\n      ...props,\n      duration: props.duration,\n      key: randomid(),\n      willUnmount(nprops: any, notifysChild: ContainerNotifys) {\n        if (!nprops) return;\n        nprops.onClose && nprops.onClose();\n        const keys = Object.keys(notifysChild[props.placement as Placement]);\n        if (keys.length === 0 && notifys[props.placement as Placement]) {\n          delete notifys[props.placement as Placement];\n          if (notifysDom[props.placement as Placement]) {\n            document.body.removeChild(notifysDom[props.placement as Placement]);\n          }\n        }\n      },\n    });\n  }\n}\n\n['open', 'success', 'warning', 'info', 'error'].forEach((type) => {\n  (NotificationCreate as NotificationProps)[type] = (\n    options: NotificationCreateProps = {},\n  ) => {\n    return NotificationCreate(options, type as NotificationCreateProps['type']);\n  };\n});\n\nexport interface NotificationApi {\n  open(option: NotificationCreateProps): void;\n  success(option: NotificationCreateProps): void;\n  warning(option: NotificationCreateProps): void;\n  info(option: NotificationCreateProps): void;\n  error(option: NotificationCreateProps): void;\n}\n\nexport default (NotificationCreate as unknown) as NotificationApi;\n"
  ]
}